import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as i,f as d}from"./app-b15e6a73.js";const r={},c=d(`<h2 id="路径" tabindex="-1"><a class="header-anchor" href="#路径" aria-hidden="true">#</a> 路径</h2><p>Linux 的文件系统则像一棵倒长的树，它只有一个根：<code>/</code></p><p><strong>绝对路径</strong>（absolute path）总是以根目录<code>/</code> 开头，</p><p><strong>相对路径</strong>（relative path）总是以当前目录开头</p><h2 id="文件权限" tabindex="-1"><a class="header-anchor" href="#文件权限" aria-hidden="true">#</a> 文件权限</h2><p><strong>文件权限</strong>（file permission）由4个子串拼接而成</p><ul><li>文件类型（1位）</li><li>所有者权限（3位）</li><li>组用户权限（3位）</li><li>其他用户权限（3位）</li></ul><div class="language-Ruby line-numbers-mode" data-ext="Ruby"><pre class="language-Ruby"><code>achao@starship:/bin$ ls -l /etc
total 1236
drwxr-xr-x 3 root root      4096 Jul 29 18:56 acpi
-rw-r--r-- 1 root root      3028 Jul 29 18:28 adduser.conf
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的文件类型有-（代表文件）、d（代表目录）和l（代表链接）</p><p><code>Linux</code>的权限系统沿袭了<code>Unix</code>的规则：每个系统上都有多个用户（user），这些用户分属于不同的组（group），其中有一个名为<code>root</code>的用户是系统管理员，拥有对系统完全的控制权，包括规定其他用户的权限。每个文件或者目录都被指定一个用户作为它的所有者（owner），所有者能对属于自己的文件或者目录做什么，就定义在所有者权限这3个字符中。上面acpi的所有者权限为rwx，表示该目录的所有者（我们暂且叫他X）对它有读（read）、写（write）和执行（execute）权限。而<code>adduser.conf</code>的所有者权限为rw-，表示X 只能对它进行读和写操作，不能运行它。</p><p>组用户权限规定了与X 同组的其他用户对这个文件<code>/</code>目录的权限，比如<code>acpi</code>的组用户权限是r-x，表示与X同组的其他用户只能读和执行（对于文件夹来说，执行就意味着将该目录作为当前工作目录），不能写（更改、删除）；<code>adduser.conf</code>的组用户权限是r--，表示与X同组的其他用户只能读这个文件（对于文件来说，读代表查看文件内容），不能写（更改、删除）和执行。</p><p><strong>其他用户</strong>指不与X同组的其他所有用户，它们的权限由权限标志的最后3个字符确定。</p><p><strong>最小权限原则</strong>（principle of least privilege，PoLP），其主要内容是：如果只需要权限集合A就能完成一项任务，就不要使用比它更大的权限集合B。换句话说，完成任务的模块拥有的权限越少越好。</p><p>为什么要了解用户、组之类的概念呢？</p><p>我们知道计算机是20世纪40年代出现的，而个人计算机（personal computer）最早诞生于20世纪70年代，在其间的几十年里，计算机的造价十分高昂，只有部分大学和研究机构买得起，由专业部门管理和维护，供多个用户使用，<code>Unix</code>正是基于这样的使用模式设计的。为了避免用户误操作或者恶意攻击对系统造成损害，就有了现在我们看到的权限系统。那么对于个人计算机，能不能关闭权限系统呢？当然可以，比如我们可以用<code>chown</code>（change ownership命令将所有文件、目录的权限都设置为rwxrwxrwx，即所有用户对所有文件都拥有全部权限，效果和关闭权限系统类似。但安全和便利是一枚硬币的两面。实践证明，只追求便利、完全放开权限会导致系统故障频发，用户要花费大量时间重新安装系统，更新损坏的硬件。比较好的方法是在二者之间保持合理的平衡，在权限系统的保护下，提供一些工具提升便利性。这类工具中最常用的是<code>sudo</code>，它的基本思路是：对于值得信任的用户（<code>Linux</code>术语叫<code>sudoer</code>，即有权力执行<code>sudo</code>命令的人），比如个人计算机的拥有者，能以<code>root</code>的身份执行命令。</p><h2 id="unix哲学" tabindex="-1"><a class="header-anchor" href="#unix哲学" aria-hidden="true">#</a> <code>Unix</code>哲学</h2><ul><li>Everything is a file.</li><li>没有消息就是最好的消息</li><li>一个工具只做一件事</li></ul><h2 id="linux原则" tabindex="-1"><a class="header-anchor" href="#linux原则" aria-hidden="true">#</a> <code>Linux</code>原则</h2><ul><li>最少打扰原则</li><li></li></ul>`,19),n=[c];function a(l,s){return o(),i("div",null,n)}const p=e(r,[["render",a],["__file","linuxConcept.html.vue"]]);export{p as default};
