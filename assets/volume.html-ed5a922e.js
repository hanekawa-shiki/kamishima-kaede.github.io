import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as a,f as c}from"./app-1b738512.js";const n={},r=c(`<h2 id="容器数据卷" tabindex="-1"><a class="header-anchor" href="#容器数据卷" aria-hidden="true">#</a> 容器数据卷</h2><h3 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么？</h3><p>卷就是目录或文件，存在于一个或多个容器中，由<code>Docker</code>挂载到容器，但不属于联合文件系统，因此能够绕过<code>Union File System</code>提供一些用于持续存储或共享数据的特性：<br> 卷的设计目的就是<strong>数据的持久化</strong>， 完全独立于容器的生存周期，因此<code>Docker</code>不会在容器删除时删除其挂载的数据卷</p><p>将docker容器内的数据保存进宿主机的磁盘中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行一个带有容器卷存储功能的容器实例</span>

<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录 镜像名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>Docker</code>挂载主机目录访问，如果出现<code>cannot open directory .: Permission denied</code> 解决办法：在挂载目录后多加一个<code>--privileged=true</code>参数即可。 使用该参数，<code>container</code>内的<code>root</code>拥有真正的<code>root</code>权限，否则，<code>container</code>内的<code>root</code>只是外部的一个普通用户权限。</p></div><h3 id="能干嘛" tabindex="-1"><a class="header-anchor" href="#能干嘛" aria-hidden="true">#</a> 能干嘛?</h3><p>将运用与运行的环境打包镜像，<code>run</code>后形成容器实例运行 ，但是我们对数据的要求希望是<strong>持久化的</strong>   <code>Docker</code>容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。 为了能保存数据在<code>Docker</code>中我们使用卷。   特点：</p><ul><li>1：数据卷可在容器之间共享或重用数据</li><li>2：卷中的更改可以直接实时生效，爽</li><li>3：数据卷中的更改不会包含在镜像的更新中</li><li>4：数据卷的生命周期一直持续到没有容器使用它为止</li></ul>`,9),d=[r];function s(i,t){return o(),a("div",null,d)}const h=e(n,[["render",s],["__file","volume.html.vue"]]);export{h as default};
