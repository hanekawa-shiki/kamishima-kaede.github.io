const e=JSON.parse('{"key":"v-ba0f9e2a","path":"/docker/dockerImages.html","title":"","lang":"zh-CN","frontmatter":{"article":false,"description":"Docker镜像是什么 是什么 镜像 是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。 &nbsp; 只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。 分层的镜像 以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载 UnionFS（联合文件系统）","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/docker/dockerImages.html"}],["meta",{"property":"og:site_name","content":"Kamishima-kaede"}],["meta",{"property":"og:description","content":"Docker镜像是什么 是什么 镜像 是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。 &nbsp; 只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。 分层的镜像 以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载 UnionFS（联合文件系统）"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T07:44:29.000Z"}],["meta",{"property":"article:author","content":"kamishima-kaede"}],["meta",{"property":"article:modified_time","content":"2023-03-22T07:44:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"\\",\\"description\\":\\"Docker镜像是什么 是什么 镜像 是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。 &nbsp; 只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。 分层的镜像 以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载 UnionFS（联合文件系统）\\"}"]]},"headers":[{"level":2,"title":"Docker镜像是什么","slug":"docker镜像是什么","link":"#docker镜像是什么","children":[]}],"git":{"createdTime":1679471069000,"updatedTime":1679471069000,"contributors":[{"name":"shiki ryougi","email":"shikiryougi@shikideMacBook.local","commits":1}]},"readingTime":{"minutes":4.28,"words":1284},"filePathRelative":"docker/dockerImages.md","localizedDate":"2023年3月22日","excerpt":"<h2> <code>Docker</code>镜像是什么</h2>\\n<p>是什么</p>\\n<p>镜像\\n是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。\\n&nbsp;\\n只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p>\\n<p>分层的镜像</p>\\n<p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载</p>\\n<p>UnionFS（联合文件系统）</p>","autoDesc":true}');export{e as data};
