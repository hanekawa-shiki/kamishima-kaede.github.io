import{_ as e,W as c,X as d,a1 as o}from"./framework-c116a07c.js";const a={},l=o('<h2 id="base" tabindex="-1"><a class="header-anchor" href="#base" aria-hidden="true">#</a> <code>&lt;base&gt;</code></h2><p>一个文档的基本<code>URL</code>，可以通过使用<code>document.baseURI</code>查询。如果文档不包含<code>&lt;base&gt;</code>元素，<code>baseURI</code>默认为<code>document.location.href</code>。</p><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><ul><li><p>1.<code>href</code></p><p>用于文档中相对<code>URL</code>地址的基础<code>URL</code>。允许绝对和相对<code>URL</code>。</p></li><li><p>2.<code>target</code></p><ul><li><code>_self</code>: 载入结果到当前浏览上下文中。（该值是元素的默认值）。</li><li><code>_blank</code>: 载入结果到一个新的未命名的浏览上下文。</li><li><code>_parent</code>: 载入结果到父级浏览上下文（如果当前页是内联框）。如果没有父级结构，该选项的行为和<code>_self</code>一样。</li><li><code>_top</code>: 载入结果到顶级浏览上下文（该浏览上下文是当前上下文的最顶级上下文）。如果没有父级，该选项的行为和<code>_self</code>一样。</li></ul></li></ul><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ul><li>1.<code>&lt;base&gt;</code>会影响页内锚点</li><li>2.多个<code>&lt;base&gt;</code>标签，只会使用第一个<code>href</code>和<code>target</code>值</li></ul>',6),t=[l];function i(r,s){return c(),d("div",null,t)}const h=e(a,[["render",i],["__file","base.html.vue"]]);export{h as default};
