import{_ as l,W as i,X as u,Z as n,$ as s,Y as e,a2 as r,a1 as a,C as t}from"./framework-c116a07c.js";const d={},k=a('<h1 id="自动化更新部署" tabindex="-1"><a class="header-anchor" href="#自动化更新部署" aria-hidden="true">#</a> 自动化更新部署</h1><p>这里要解决2个问题:</p><ul><li>1.<a href="#%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81">自动更新代码</a></li><li>2.<a href="#%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2">打包部署</a></li></ul><h2 id="自动更新代码" tabindex="-1"><a class="header-anchor" href="#自动更新代码" aria-hidden="true">#</a> 自动更新代码</h2><p>这里通过使用<code>github</code>的<code>webhook</code>.</p><p>得知远程<code>git</code>仓库代码更新后,拉取更新服务器上<code>git</code>仓库</p>',6),m={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"提示",-1),b=n("p",null,[n("code",null,"Git Hook"),s("(钩子)是"),n("code",null,"Git"),s("在代码提交、推送、合并等工作流程中引入的事件触发器，其中最常用的场景是代码检查，持续集成，自动部署等。")],-1),g=n("code",null,"github",-1),h=n("code",null,"webook",-1),f={href:"https://docs.github.com/cn/developers/webhooks-and-events/webhooks/about-webhooks",target:"_blank",rel:"noopener noreferrer"},x=a("<p>这里要解决以下问题</p><ul><li>服务器接收<code>webhook</code>请求后再拉取<code>github</code>仓库代码</li></ul><p>解决方案:使用<code>nodejs</code>的<code>http</code>模块,写一个专门处理<code>webhook</code>请求的服务,该服务接收到<code>webhook</code>请求后,执行对应更新代码的<code>shell</code>脚本</p>",3),q=["src"],w=a(`<p>核心代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span>
<span class="token comment">// 这里使用了npm包github-webhook-handler,用来解析webhook请求</span>
<span class="token keyword">const</span> createHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;github-webhook-handler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如图GitHub webhook中配置的Secret,如上图</span>
<span class="token keyword">const</span> secret <span class="token operator">=</span> <span class="token string">&#39;Gae3$de&amp;1*Cub*IAmlr1ZB6L!ko9BAV#&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 日志配置</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> error<span class="token punctuation">,</span> info <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./log.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// path是webhook访问的路径,如上图</span>
<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">createHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/mywebhook&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> secret <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;no such location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这边的端口监听的本地服务器端口,通过nginx做的方向代理</span>

handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  error<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听到push事件的时候执行我们的自动化脚本</span>
handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  info<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Received a push event for %s to %s&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">,</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// bash脚本代码如下</span>
  <span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token string">&#39;sh&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;./build.sh&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    info<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resp <span class="token operator">+=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包部署" tabindex="-1"><a class="header-anchor" href="#打包部署" aria-hidden="true">#</a> 打包部署</h2><p>打包部署就是通过<code>bash</code>脚本实现,没什么好说的,直接上脚本</p><p>自动化脚本如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#! /bin/bash</span>

<span class="token comment"># 任意命令出错时终止运行</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># 代码仓库目录</span>
<span class="token assign-left variable">GITURL</span><span class="token operator">=</span><span class="token string">&quot;aaaa&quot;</span> <span class="token comment"># 仓库代码路径</span>
<span class="token assign-left variable">GITDIR</span><span class="token operator">=</span><span class="token string">&quot;/xxx/xxxx/&quot;</span> <span class="token comment"># glone仓库路径</span>
<span class="token assign-left variable">BLOG</span><span class="token operator">=</span><span class="token string">&quot;/xxx/xxxx/abc/&quot;</span> <span class="token comment"># 本地代码路径</span>
<span class="token assign-left variable">LOG</span><span class="token operator">=</span><span class="token string">&quot;/xxx/xxxx/bashLog&quot;</span> <span class="token comment"># 执行脚本日志路径</span>
<span class="token comment"># Nginx 中配置的网站的 HTML 根目录</span>
<span class="token assign-left variable">OUTPUT</span><span class="token operator">=</span><span class="token string">&quot;/xxx/xxxx/www/&quot;</span> <span class="token comment"># 打包后部署的路径</span>
<span class="token assign-left variable">LogNameDATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> <span class="token string">&#39;+%Y%m%d&#39;</span><span class="token variable">\`</span></span> <span class="token comment"># 时间戳</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;BACKUP DATE:&quot;</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token variable">)</span></span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;TIME&quot;</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token variable">)</span></span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$BLOG</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;==========git仓库不存在,拉取仓库==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
  <span class="token builtin class-name">cd</span> <span class="token variable">$GITDIR</span>
  <span class="token function">git</span> clone <span class="token variable">$GITURL</span>
  <span class="token builtin class-name">cd</span> <span class="token variable">$BLOG</span>
  <span class="token keyword">else</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;==========git仓库已存在==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
  <span class="token builtin class-name">cd</span> <span class="token variable">$GITDIR</span>
  <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token string">&quot;./abc&quot;</span>
  <span class="token function">git</span> clone <span class="token variable">$GITURL</span>
  <span class="token builtin class-name">cd</span> <span class="token variable">$BLOG</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;==========拉取代码==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
<span class="token function">git</span> checkout master
<span class="token builtin class-name">echo</span> <span class="token string">&quot;==========删除缓存==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token string">&quot;./node_modules&quot;</span>
<span class="token function">yarn</span> cache clean
<span class="token builtin class-name">echo</span> <span class="token string">&quot;==========下载依赖==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
<span class="token function">yarn</span> <span class="token function">install</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;==========开始打包==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
<span class="token function">yarn</span> run build
<span class="token builtin class-name">echo</span> <span class="token string">&quot;==========删除生产目录==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$OUTPUT</span>/*
<span class="token builtin class-name">echo</span> <span class="token string">&quot;==========拷贝生产包==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
<span class="token function">cp</span> <span class="token parameter variable">-r</span> <span class="token string">&quot;./dist&quot;</span> <span class="token variable">$OUTPUT</span>/
<span class="token builtin class-name">echo</span> <span class="token string">&quot;==========部署成功==========&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG</span>/<span class="token variable">$LogNameDATE</span>.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_=n("code",null,"github actions",-1),L=a(`<h2 id="持久化服务" tabindex="-1"><a class="header-anchor" href="#持久化服务" aria-hidden="true">#</a> 持久化服务</h2><p>这里我们引入<code>npm</code>包:<code>pm2</code>,做持久化服务.</p><p>为什么需要<code>pm2</code>?</p><ul><li>由于<code>node</code>是单进程应用,如果直接通过<code>node app</code>来启动一旦代码执行报错没做相应处理会造成整个应用崩溃,这里就需要<code>pm2</code>做进程管理了</li><li>除此之外<code>pm2</code>包括守护进程、监控、日志的一整套完整的功能</li></ul><p>这里我们全局安装<code>pm2</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> pm2@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>cd</code>到<code>node</code>服务的目录后,执行启动目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pm2 start ./webhook.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>pm2</code>常用操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动命令</span>
pm2 start app.js <span class="token comment"># 启动nodeJs应用，进程的默认名称为文件名app</span>
pm2 start app.js <span class="token parameter variable">--name</span> mynode <span class="token comment"># 启动node，并指定进程名称为mynode</span>
pm2 start app.js <span class="token parameter variable">-i</span> max <span class="token comment"># 根据有效CPU数目启动最大进程数目</span>
pm2 start app.js <span class="token parameter variable">-i</span> <span class="token number">3</span> <span class="token comment"># 启动3个进程</span>
pm2 start app.js <span class="token parameter variable">--watch</span> <span class="token comment"># 实时监控的方式启动，app.js文件有变动时，pm2会自动reload</span>
pm2 start app.js <span class="token parameter variable">-x</span> <span class="token comment"># 用fork模式启动 app.js 而不是使用 cluster</span>
pm2 start app.js <span class="token parameter variable">-x</span> – <span class="token parameter variable">-a</span> <span class="token number">23</span> <span class="token comment"># 用fork模式启动 app.js 并且传递参数（-a 23）</span>
pm2 start app.json <span class="token comment"># 启动进程, 在 app.json里设置选项</span>
pm2 start app.js <span class="token parameter variable">-i</span> max – <span class="token parameter variable">-a</span> <span class="token number">23</span> <span class="token comment"># 在 – 之后给 app.js 传递参数</span>
pm2 start app.js <span class="token parameter variable">-i</span> max <span class="token parameter variable">-e</span> err.log <span class="token parameter variable">-o</span> out.log <span class="token comment"># 启动并生成一个配置文件</span>

<span class="token comment"># 查看与监视进程</span>
pm2 list <span class="token comment">#显示所有进程；</span>
pm2 show <span class="token number">0</span>，pm2 info <span class="token number">0</span> <span class="token comment"># 查看进程id为 0 的详细信息；</span>
pm2 monit <span class="token comment"># 进入监视页面，监视每个node进程的CPU和内存的使用情况。</span>

<span class="token comment"># 停止、删除进程</span>
pm2 stop/delete <span class="token number">0</span> <span class="token comment"># 停止/删除id为 0 的进程；</span>
pm2 stop/delete all <span class="token comment"># 停止/删除所有进程。</span>

<span class="token comment"># 重启、重载</span>
pm2 restart <span class="token number">0</span> <span class="token comment"># 重启id为 0 的进程；</span>
pm2 restart all <span class="token comment"># 重启所有进程；</span>
pm2 reload <span class="token number">0</span> <span class="token comment"># 0秒停机重载id为 0 进程（用于 NETWORKED 进程）；</span>
pm2 reload all <span class="token comment"># 重载所有进程。</span>

<span class="token comment"># 日志操作</span>
pm2 logs <span class="token comment"># 显示所有进程的日志；</span>
pm2 logs <span class="token number">0</span> <span class="token comment"># 显示进程id为 0 的日志；</span>
pm2 flush <span class="token comment"># 清空所有日志文件；</span>
pm2 reloadLogs <span class="token comment"># 重载所有日志。</span>
pm2 startup <span class="token comment"># 产生 init 脚本，保持进程活着。</span>

<span class="token comment"># 杀死PM2进程</span>
pm2 <span class="token function">kill</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function $(p,y){const o=t("ExternalLinkIcon"),c=t("RouterLink");return i(),u("div",null,[k,n("div",m,[v,b,n("p",null,[g,s("上关于"),h,s("操作的"),n("a",f,[s("详细文档"),e(o)])])]),x,n("p",null,[s("github的webhook配置示意图: "),n("img",{src:p.$withBase("/imgs/webhook.png")},null,8,q)]),w,n("p",null,[s("如果服务器资源比较紧张,也可以通过"),_,s("自动化打包,并自动化部署,"),e(c,{to:"/website_build/giuhub_actions.html"},{default:r(()=>[s("参考步骤")]),_:1})]),L])}const T=l(d,[["render",$],["__file","pm2_bash.html.vue"]]);export{T as default};
