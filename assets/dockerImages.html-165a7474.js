const e=JSON.parse('{"key":"v-ba0f9e2a","path":"/docker/dockerImages.html","title":"","lang":"zh-CN","frontmatter":{"article":false,"description":"Docker镜像是什么 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。 &nbsp; 只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。 分层的镜像 以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载 UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承 ，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/docker/dockerImages.html"}],["meta",{"property":"og:site_name","content":"Kamishima-kaede"}],["meta",{"property":"og:description","content":"Docker镜像是什么 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。 &nbsp; 只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。 分层的镜像 以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载 UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承 ，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://hanekawa.top/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-26T07:19:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"property":"article:author","content":"kamishima-kaede"}],["meta",{"property":"article:modified_time","content":"2023-03-26T07:19:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"\\",\\"description\\":\\"Docker镜像是什么 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。 &nbsp; 只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。 分层的镜像 以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载 UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承 ，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。\\"}"]]},"headers":[{"level":2,"title":"Docker镜像是什么","slug":"docker镜像是什么","link":"#docker镜像是什么","children":[{"level":3,"title":"分层的镜像","slug":"分层的镜像","link":"#分层的镜像","children":[]},{"level":3,"title":"Docker镜像加载原理","slug":"docker镜像加载原理","link":"#docker镜像加载原理","children":[]},{"level":3,"title":"commit操作","slug":"commit操作","link":"#commit操作","children":[]}]},{"level":2,"title":"阿里云","slug":"阿里云","link":"#阿里云","children":[]},{"level":2,"title":"私有库","slug":"私有库","link":"#私有库","children":[]}],"git":{"createdTime":1679471069000,"updatedTime":1679815197000,"contributors":[{"name":"shiki ryougi","email":"shikiryougi@shikideMacBook.local","commits":2}]},"readingTime":{"minutes":5.71,"words":1714},"filePathRelative":"docker/dockerImages.md","localizedDate":"2023年3月22日","excerpt":"<h2> <code>Docker</code>镜像是什么</h2>\\n<p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。<br>\\n&nbsp;<br>\\n只有通过这个镜像文件才能生成<code>Docker</code>容器实例(类似Java中new出来一个对象)。</p>\\n<h3> 分层的镜像</h3>\\n<p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载</p>\\n<p><code>UnionFS</code>（联合文件系统）：<code>Union</code>文件系统（<code>UnionFS</code>）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。<code>Union</code>文件系统是<code>Docker</code>镜像的基础。镜像可以通过分层来进行继承 ，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>","autoDesc":true}');export{e as data};
