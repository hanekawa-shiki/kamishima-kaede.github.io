import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-b15e6a73.js";const p={},t=e(`<h1 id="位置匹配" tabindex="-1"><a class="header-anchor" href="#位置匹配" aria-hidden="true">#</a> 位置匹配</h1><h2 id="_1-锚点" tabindex="-1"><a class="header-anchor" href="#_1-锚点" aria-hidden="true">#</a> 1. 锚点</h2><p>在 ES5 中，共有 6 个锚：</p><p><code>^</code>、<code>$</code>、<code>\\b</code>、<code>\\B</code>、<code>(?=p)</code>、<code>(?!p)</code></p><h3 id="_1-1-和" tabindex="-1"><a class="header-anchor" href="#_1-1-和" aria-hidden="true">#</a> 1.1. <code>^</code>和<code>$</code></h3><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。<br><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p><p><strong>多行匹配模式（即有修饰符 m）时，二者是行的概念，这一点需要我们注意</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;#hello#&quot;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&quot;I\\nlove\\njavascript&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
#I#
#love#
#javascript#
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-b和-b" tabindex="-1"><a class="header-anchor" href="#_1-2-b和-b" aria-hidden="true">#</a> 1.2. <code>\\b</code>和<code>\\B</code></h3><p><code>\\b</code>是单词边界，具体就是<code>\\w</code>与<code>\\W</code>之间的位置，也包括<code>\\w</code>与<code>^</code>之间的位置，和<code>\\w</code>与<code>$</code>之间的位置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [#JS#] #Lesson_01#.#mp4#</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// #[J#S]# L#e#s#s#o#n#_#0#1.m#p#4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-p-和-p" tabindex="-1"><a class="header-anchor" href="#_1-3-p-和-p" aria-hidden="true">#</a> 1.3. <code>(?=p)</code>和<code>(?!p)</code></h3><p>(?=p)，其中 p 是一个子模式，即 p 前面的位置，或者说，该位置后面的字符要匹配 p。而 (?!p) 就是 (?=p) 的反面意思。<br> 二者的学名分别是 positive lookahead 和 negative lookahead。正向先行断言和负向先行断言</p><p>ES5 之后的版本，会支持 positive lookbehind 和 negative lookbehind。具体是 (?&lt;=p) 和 (?&lt;!p)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [#JS#] #Lesson_01#.#mp4#</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// #[J#S]# L#e#s#s#o#n#_#0#1.m#p#4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-位置的特性" tabindex="-1"><a class="header-anchor" href="#_1-4-位置的特性" aria-hidden="true">#</a> 1.4. 位置的特性</h3><p>对于位置的理解，我们可以理解成空字符 &quot;&quot;。</p><h2 id="_1-5-1" tabindex="-1"><a class="header-anchor" href="#_1-5-1" aria-hidden="true">#</a> 1.5.1</h2><h3 id="_1-5-1-数字的千位分隔符表示法" tabindex="-1"><a class="header-anchor" href="#_1-5-1-数字的千位分隔符表示法" aria-hidden="true">#</a> 1.5.1 数字的千位分隔符表示法</h3>`,19),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","positionMatching.html.vue"]]);export{d as default};
