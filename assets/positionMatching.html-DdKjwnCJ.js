import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as e}from"./app-BOrPEP5d.js";const t={},p=e(`<h1 id="位置匹配" tabindex="-1"><a class="header-anchor" href="#位置匹配"><span>位置匹配</span></a></h1><h2 id="_1-锚点" tabindex="-1"><a class="header-anchor" href="#_1-锚点"><span>1. 锚点</span></a></h2><p>在 ES5 中，共有 6 个锚：</p><p><code>^</code>、<code>$</code>、<code>\\b</code>、<code>\\B</code>、<code>(?=p)</code>、<code>(?!p)</code></p><h3 id="_1-1-和" tabindex="-1"><a class="header-anchor" href="#_1-1-和"><span>1.1. <code>^</code>和<code>$</code></span></a></h3><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。<br><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p><p><strong>多行匹配模式（即有修饰符 m）时，二者是行的概念，这一点需要我们注意</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;#hello#&quot;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&quot;I\\nlove\\njavascript&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
#I#
#love#
#javascript#
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-b和-b" tabindex="-1"><a class="header-anchor" href="#_1-2-b和-b"><span>1.2. <code>\\b</code>和<code>\\B</code></span></a></h3><p><code>\\b</code>是单词边界，具体就是<code>\\w</code>与<code>\\W</code>之间的位置，也包括<code>\\w</code>与<code>^</code>之间的位置，和<code>\\w</code>与<code>$</code>之间的位置。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [#JS#] #Lesson_01#.#mp4#</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// #[J#S]# L#e#s#s#o#n#_#0#1.m#p#4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-p-和-p" tabindex="-1"><a class="header-anchor" href="#_1-3-p-和-p"><span>1.3. <code>(?=p)</code>和<code>(?!p)</code></span></a></h3><p>(?=p)，其中 p 是一个子模式，即 p 前面的位置，或者说，该位置后面的字符要匹配 p。而 (?!p) 就是 (?=p) 的反面意思。<br> 二者的学名分别是 positive lookahead 和 negative lookahead。正向先行断言和负向先行断言</p><p>ES5 之后的版本，会支持 positive lookbehind 和 negative lookbehind。具体是 (?&lt;=p) 和 (?&lt;!p)。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token string">&#39;[JS] Lesson_01.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [#JS#] #Lesson_01#.#mp4#</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// #[J#S]# L#e#s#s#o#n#_#0#1.m#p#4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-位置的特性" tabindex="-1"><a class="header-anchor" href="#_1-4-位置的特性"><span>1.4. 位置的特性</span></a></h3><p>对于位置的理解，我们可以理解成空字符 &quot;&quot;。</p><h2 id="_1-5-1" tabindex="-1"><a class="header-anchor" href="#_1-5-1"><span>1.5.1</span></a></h2><h3 id="_1-5-1-数字的千位分隔符表示法" tabindex="-1"><a class="header-anchor" href="#_1-5-1-数字的千位分隔符表示法"><span>1.5.1 数字的千位分隔符表示法</span></a></h3>`,19),o=[p];function c(l,i){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","positionMatching.html.vue"]]),k=JSON.parse('{"path":"/regexp/positionMatching.html","title":"位置匹配","lang":"zh-CN","frontmatter":{"article":false,"description":"位置匹配 1. 锚点 在 ES5 中，共有 6 个锚： ^、$、\\\\b、\\\\B、(?=p)、(?!p) 1.1. ^和$ ^（脱字符）匹配开头，在多行匹配中匹配行开头。 $（美元符号）匹配结尾，在多行匹配中匹配行结尾。 多行匹配模式（即有修饰符 m）时，二者是行的概念，这一点需要我们注意 1.2. \\\\b和\\\\B \\\\b是单词边界，具体就是\\\\w与\\\\W之间的位置，...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/regexp/positionMatching.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"位置匹配"}],["meta",{"property":"og:description","content":"位置匹配 1. 锚点 在 ES5 中，共有 6 个锚： ^、$、\\\\b、\\\\B、(?=p)、(?!p) 1.1. ^和$ ^（脱字符）匹配开头，在多行匹配中匹配行开头。 $（美元符号）匹配结尾，在多行匹配中匹配行结尾。 多行匹配模式（即有修饰符 m）时，二者是行的概念，这一点需要我们注意 1.2. \\\\b和\\\\B \\\\b是单词边界，具体就是\\\\w与\\\\W之间的位置，..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-25T10:50:51.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2022-08-25T10:50:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"位置匹配\\",\\"description\\":\\"位置匹配 1. 锚点 在 ES5 中，共有 6 个锚： ^、$、\\\\\\\\b、\\\\\\\\B、(?=p)、(?!p) 1.1. ^和$ ^（脱字符）匹配开头，在多行匹配中匹配行开头。 $（美元符号）匹配结尾，在多行匹配中匹配行结尾。 多行匹配模式（即有修饰符 m）时，二者是行的概念，这一点需要我们注意 1.2. \\\\\\\\b和\\\\\\\\B \\\\\\\\b是单词边界，具体就是\\\\\\\\w与\\\\\\\\W之间的位置，...\\"}"]]},"headers":[{"level":2,"title":"1. 锚点","slug":"_1-锚点","link":"#_1-锚点","children":[{"level":3,"title":"1.1. ^和$","slug":"_1-1-和","link":"#_1-1-和","children":[]},{"level":3,"title":"1.2. \\\\b和\\\\B","slug":"_1-2-b和-b","link":"#_1-2-b和-b","children":[]},{"level":3,"title":"1.3. (?=p)和(?!p)","slug":"_1-3-p-和-p","link":"#_1-3-p-和-p","children":[]},{"level":3,"title":"1.4. 位置的特性","slug":"_1-4-位置的特性","link":"#_1-4-位置的特性","children":[]}]},{"level":2,"title":"1.5.1","slug":"_1-5-1","link":"#_1-5-1","children":[{"level":3,"title":"1.5.1 数字的千位分隔符表示法","slug":"_1-5-1-数字的千位分隔符表示法","link":"#_1-5-1-数字的千位分隔符表示法","children":[]}]}],"git":{"createdTime":1660729772000,"updatedTime":1661424651000,"contributors":[{"name":"shiki","email":"kamiacgxu@gmail.com","commits":3}]},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"regexp/positionMatching.md","localizedDate":"2022年8月17日","excerpt":"\\n<h2>1. 锚点</h2>\\n<p>在 ES5 中，共有 6 个锚：</p>\\n<p><code>^</code>、<code>$</code>、<code>\\\\b</code>、<code>\\\\B</code>、<code>(?=p)</code>、<code>(?!p)</code></p>\\n<h3>1.1. <code>^</code>和<code>$</code></h3>\\n<p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。<br>\\n<code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p>\\n<p><strong>多行匹配模式（即有修饰符 m）时，二者是行的概念，这一点需要我们注意</strong></p>","autoDesc":true}');export{u as comp,k as data};
