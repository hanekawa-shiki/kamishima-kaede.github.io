import{_ as a,W as t,X as e,$ as o}from"./framework-18b71f17.js";const s="/assets/1-d89b4f0b.gif",i="/assets/2-6e272d48.gif",d="/assets/2-6e272d48.gif",r="/assets/4-9e39b3d2.gif";const c={},_=o('<h1 id="四、composition-api-的优势" tabindex="-1" data-v-333b59f6><a class="header-anchor" href="#四、composition-api-的优势" aria-hidden="true" data-v-333b59f6>#</a> 四、Composition API 的优势</h1><h2 id="_1-options-api-存在的问题" tabindex="-1" data-v-333b59f6><a class="header-anchor" href="#_1-options-api-存在的问题" aria-hidden="true" data-v-333b59f6>#</a> 1.Options API 存在的问题</h2><p data-v-333b59f6>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><p data-v-333b59f6><img src="'+s+'" alt="before" data-v-333b59f6><img src="'+i+'" alt="before edit" data-v-333b59f6></p><h2 id="_2-composition-api-的优势" tabindex="-1" data-v-333b59f6><a class="header-anchor" href="#_2-composition-api-的优势" aria-hidden="true" data-v-333b59f6>#</a> 2.Composition API 的优势</h2><p data-v-333b59f6>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><p data-v-333b59f6><img src="'+d+'" alt="after" data-v-333b59f6><img src="'+r+'" alt="after edit" data-v-333b59f6></p>',7),n=[_];function p(f,m){return t(),e("div",null,n)}const b=a(c,[["render",p],["__scopeId","data-v-333b59f6"],["__file","compare.html.vue"]]);export{b as default};
