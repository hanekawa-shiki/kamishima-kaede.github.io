"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5283],{5177:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>h});var n=a(6352);const e=[(0,n.Fv)('<h1 id="webassembly-system-interface-wasi" tabindex="-1"><a class="header-anchor" href="#webassembly-system-interface-wasi"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#webassembly-system-interface-wasi" target="_blank" rel="noopener noreferrer">WebAssembly System Interface (WASI)</a></span></a></h1><p>当你听到 WebAssembly (通常简称为 WASM)时，你可以把它想象成一个使得各种不同语言写成的程序能够在网页上运行的魔法工具。而 WebAssembly System Interface（WASI）则是这个魔法工具的一部分，它让这些程序不仅能在网页上运行，还能以一种安全的方式与操作系统进行交互，比如读写文件、处理网络连接等。</p><p>在 Node.js 中，支持 WASI 意味着你可以在 Node.js 应用里运行那些编译成 WASM 的代码，并且让这些代码能够进行一些系统级别的操作，而这正是 WASI 所定义的。这开启了一扇门，让用其他语言编写的高性能代码可以被直接集成进 Node.js 项目中。</p><h3 id="实际运用的例子" tabindex="-1"><a class="header-anchor" href="#实际运用的例子"><span>实际运用的例子</span></a></h3><ol><li><p><strong>跨平台命令行工具</strong>：假设你有一个用 Rust 编写的命令行工具，因为 Rust 能编译成 WASM，你就可以通过 WASI 在 Node.js 应用中运行这个工具。这意味着你可以创建一个跨平台的命令行工具包，无论用户使用的是 Windows、Mac 还是 Linux，他们都可以通过 Node.js 来运行这个工具。</p></li><li><p><strong>性能密集型任务</strong>：有些任务像图像处理或者大数据计算特别占用 CPU。如果你的 Node.js 应用需要处理这类任务，你可以考虑用 C/C++或 Rust 这样更靠近硬件、执行效率更高的语言来编写这部分代码，然后编译成 WASM，并通过 WASI 在 Node.js 中运行它。这样做可以显著提升性能。</p></li><li><p><strong>加密和安全操作</strong>：加密库通常用 C/C++之类的语言写成，因为这些语言既快又能直接操作内存。通过 WASI，你可以将这些库编译成 WASM 模块，并在 Node.js 中使用它们，为你的应用增加高效且安全的加密功能。</p></li></ol><h3 id="如何在-node-js-中使用-wasi" tabindex="-1"><a class="header-anchor" href="#如何在-node-js-中使用-wasi"><span>如何在 Node.js 中使用 WASI</span></a></h3><p>使用 Node.js 中的 WASI 模块开始相对简单。首先，你需要确保你的 Node.js 版本支持 WASI（从 12.x 版本开始引入 WASI，但最新版本会有更好的支持和稳定性）。下面是一个基本的步骤：</p><ol><li><p><strong>编译 WASM 模块</strong>：首先，你需要有一个编译成 WASM 的程序。假设你已经有了这样一个程序。</p></li><li><p><strong>载入和运行 WASM 模块</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wasi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> importObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasi_unstable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    fs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;./your_program.wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  );</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">importObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们首先从<code>wasi</code>模块载入<code>WASI</code>类并实例化它。然后，我们使用 Node.js 的<code>fs</code>模块读取 WASM 程序文件，并使用 WebAssembly 的 API 编译和实例化这个程序，最后通过<code>wasi.start(instance)</code>运行它。</p></li></ol><p>通过理解 WASI 在 Node.js 中的应用，你就打开了一个充满可能性的新世界。你可以将各种高效的、用其他语言编写的模块集成到你的 Node.js 应用中，无论是出于性能考虑，还是想要复用现有的代码库。</p><h2 id="security" tabindex="-1"><a class="header-anchor" href="#security"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#security" target="_blank" rel="noopener noreferrer">Security</a></span></a></h2><p>Node.js 是一个非常流行的 JavaScript 运行环境，它允许你在服务器端运行 JavaScript 代码。这是一项革命性的发展，因为在 Node.js 出现之前，JavaScript 主要被用于浏览器中来制作网页的交互效果。Node.js 的出现使得开发者可以使用同一种语言（JavaScript）来编写前端和后端代码，极大地提高了开发效率和便利。</p><h3 id="wasi-和-node-js-安全" tabindex="-1"><a class="header-anchor" href="#wasi-和-node-js-安全"><span>WASI 和 Node.js 安全</span></a></h3><p>WASI（WebAssembly System Interface）是一个让 WebAssembly（通常简称为 Wasm）能够以一种标准化的方式在各种不同环境中运行的系统接口。简单来说，WASI 让你能够用类似于 C、C++、Rust 这样的低级语言编写的代码，编译成 Wasm，并在支持 WASI 的任何环境下运行，包括 Node.js。</p><p>在 Node.js v21.7.1 的文档中提到的安全问题，主要关注的是在使用 WASI 时需要考虑的安全措施。由于 WASI 允许 Wasm 应用与系统进行交互，因此确保这些交互不会对系统安全构成威胁是非常重要的。</p><h4 id="实际应用举例" tabindex="-1"><a class="header-anchor" href="#实际应用举例"><span>实际应用举例</span></a></h4><ol><li><p><strong>沙盒执行环境</strong>：使用 WASI 在 Node.js 中运行第三方服务或插件时，可以创建一个沙盒环境。这意味着即使这个第三方服务含有恶意代码，它也无法访问外部系统资源，从而保护了主机系统的安全。例如，如果你正在开发一个插件系统，通过 WASI 运行插件可以限制这些插件仅能访问它们需要的资源，而不能随意操作文件系统或网络。</p></li><li><p><strong>加密服务</strong>：假设你正在开发一个需要高性能加密算法的应用。你可以使用 Rust 等语言编写这些算法，并将其编译为 Wasm 模块，通过 Node.js 使用 WASI 加载并执行。这样，你既能利用 Rust 提供的性能优势，又能确保加密算法的执行不会被其他 JavaScript 代码直接访问，增加了整个应用的安全性。</p></li><li><p><strong>数据处理</strong>：在处理敏感数据，如用户信息或金融记录时，可以使用 WASI 来隔离数据处理逻辑。这样即使应用的其他部分遭到攻击，这些处理逻辑也能保证数据的安全性。例如，一个在线银行应用可以将其核心的资金转账逻辑编译为 Wasm 模块，并通过 WASI 在 Node.js 中安全执行，防止潜在的注入攻击或数据泄露。</p></li></ol><h4 id="安全建议" tabindex="-1"><a class="header-anchor" href="#安全建议"><span>安全建议</span></a></h4><ul><li><strong>最小权限原则</strong>：只赋予运行在 WASI 环境中的应用程序必需的权限。比如，如果一个应用不需要访问网络，就不应该给它这样的权限。</li><li><strong>审计和监控</strong>：定期审查使用 WASI 的应用程序，确保它们没有异常行为。同时，监控系统调用可以帮助快速检测潜在的安全威胁。</li><li><strong>使用安全的编码实践</strong>：即使是在 WASI 沙盒环境中，也应该遵循安全的编码实践。例如，防范缓冲区溢出、使用安全的数据处理库等。</li></ul><p>总之，在 Node.js 中使用 WASI 提供了在高性能和高安全性之间达到平衡的可能性。正确理解和实施相关的安全措施，可以使你的应用在享受 WASI 带来的好处的同时，也保持了高度的安全性。</p><h2 id="class-wasi" tabindex="-1"><a class="header-anchor" href="#class-wasi"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#class-wasi" target="_blank" rel="noopener noreferrer">Class: WASI</a></span></a></h2><p>当我们讨论 Node.js 中的<code>Class: WASI</code>时，我们首先需要了解 WASI 的含义。WASI 全称为 WebAssembly System Interface，即 WebAssembly 系统接口。简单来说，WASI 是一个允许 WebAssembly（通常缩写为 Wasm）代码与系统资源（比如文件系统、网络等）交互的标准接口。这意味着通过 WASI，WebAssembly 代码可以在类似于传统服务器或命令行工具环境中运行，而不仅仅是在浏览器里。</p><p>在 Node.js 中，<code>Class: WASI</code>提供了对 WASI 操作的封装，使得 Node.js 应用能够执行和管理 WASI 模块。这样一来，Node.js 开发者就可以在其应用中使用 WebAssembly，并借助 WASI 进行更多系统级的操作。</p><h3 id="如何理解-wasi-在-node-js-中的应用" tabindex="-1"><a class="header-anchor" href="#如何理解-wasi-在-node-js-中的应用"><span>如何理解 WASI 在 Node.js 中的应用？</span></a></h3><p>让我们通过一些实际的例子来理解在 Node.js v21.7.1 中<code>Class: WASI</code>的用途。</p><h4 id="实例-1-独立运行-webassembly-模块" tabindex="-1"><a class="header-anchor" href="#实例-1-独立运行-webassembly-模块"><span>实例 1：独立运行 WebAssembly 模块</span></a></h4><p>假设你有一个用 C 语言编写并编译成 WebAssembly 的程序，该程序可以读取文件内容并处理数据。在 Node.js 应用中，你可以使用 WASI 的功能来加载和执行这个 WebAssembly 模块，访问本地文件系统，并输出处理结果。这让原本只能在浏览器中运行的 WebAssembly 代码变得可以在服务器或者命令行工具中运用，扩大了 WebAssembly 的应用场景。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wasi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;my_program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;input.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  preopens</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;/sandbox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;path/to/my_project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> importObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;path/to/my_program.wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasmBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">importObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>WASI</code>被用来创建一个 WASI 实例，配置它的参数、环境变量和文件系统映射，然后加载和启动一个 WebAssembly 模块。此时，该 WebAssembly 模块就能进行文件读写等操作。</p><h4 id="实例-2-沙盒化运行环境" tabindex="-1"><a class="header-anchor" href="#实例-2-沙盒化运行环境"><span>实例 2：沙盒化运行环境</span></a></h4><p>想象一个场景，在线代码编辑器支持用户上传并运行 C 语言编写的算法。为了安全起见，你不希望用户的代码直接运行在服务器的主操作系统上。这时，你可以将用户代码编译为 WebAssembly，通过 WASI 在 Node.js 中以沙盒化的方式运行这段代码，有效隔离潜在的风险。</p><p>通过 WASI，你可以精细控制 WebAssembly 代码访问的文件系统部分和可用资源，确保代码运行在一个受限制且安全的环境中。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Node.js 中的<code>Class: WASI</code>为开发者提供了一个强大的工具，使其能够在 Node.js 应用中利用 WebAssembly 的高性能特性，同时通过 WASI 标准进行系统级别的交互。无论是为了运行高性能计算任务，还是为了在安全的沙盒环境中执行用户提交的代码，WASI 都展现出了其独特的价值和广泛的应用前景。</p><h3 id="new-wasi-options" tabindex="-1"><a class="header-anchor" href="#new-wasi-options"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#new-wasioptions" target="_blank" rel="noopener noreferrer">new WASI([options])</a></span></a></h3><p>理解 Node.js 中的 <code>WASI</code> 首先需要了解两个关键概念：<strong>WebAssembly (Wasm)</strong> 和 <strong>WebAssembly System Interface (WASI)</strong>。</p><h3 id="webassembly-wasm" tabindex="-1"><a class="header-anchor" href="#webassembly-wasm"><span>WebAssembly (Wasm)</span></a></h3><p>WebAssembly 是一种代码的编译格式，旨在为 web 应用提供高效、安全的执行方式。简单来说，开发者可以使用 C/C++、Rust 等语言编写程序，然后将这些程序编译成 Wasm 格式，在网页上运行。这样做的好处是能够让复杂的应用（比如游戏、视频处理程序）以接近原生性能运行在浏览器中。</p><h3 id="webassembly-system-interface-wasi-1" tabindex="-1"><a class="header-anchor" href="#webassembly-system-interface-wasi-1"><span>WebAssembly System Interface (WASI)</span></a></h3><p>WASI 是一个为 Wasm 模块设计的系统接口标准，使其能够在各种不同环境中运行，包括但不限于 web 浏览器。它提供了一系列的 API，允许 WebAssembly 程序进行文件操作、访问环境变量、网络通信等系统级调用。</p><h3 id="node-js-中的-new-wasi-options" tabindex="-1"><a class="header-anchor" href="#node-js-中的-new-wasi-options"><span>Node.js 中的 <code>new WASI([options])</code></span></a></h3><p>Node.js 支持 WASI，意味着你可以在 Node.js 环境中运行用其他语言编写并编译成 Wasm 的程序，同时利用 WASI 进行系统级别的操作。通过 <code>new WASI([options])</code> 可以创建一个 WASI 实例，这个实例通过配置选项能够指定如何与宿主系统交互。</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><ul><li><strong>options</strong> (<code>Object</code>): 用于配置 WASI 实例的选项。 <ul><li><code>args</code> (<code>Array</code>&lt;<code>string&gt;</code>): 启动 Wasm 应用时传递的参数。</li><li><code>env</code> (<code>Object</code>): 环境变量键值对。</li><li><code>preopens</code> (<code>Object</code>): 定义哪些文件系统目录可以被 Wasm 应用访问。</li></ul></li></ul><h4 id="实际运用例子" tabindex="-1"><a class="header-anchor" href="#实际运用例子"><span>实际运用例子</span></a></h4><ol><li><p><strong>命令行工具</strong></p><p>假设你用 Rust 编写了一个命令行工具，进行文本分析。你可以将它编译成 WebAssembly 模块，并通过 Node.js 运行这个模块，使用 WASI 来读取和写入文件，或许还可以进行网络请求。</p></li><li><p><strong>图像处理应用</strong></p><p>如果你有一个用 C++ 写的图像处理库，想要在服务器端对上传的图片进行处理。你可以编译成 Wasm，然后用 Node.js 加 WASI 运行，这样既可利用现有的优秀图像处理库，又可以享受到 JavaScript 生态系统的便利。</p></li><li><p><strong>科学计算</strong></p><p>对于需要大量计算资源的应用，比如数据分析或机器学习项目，你可以将关键的计算部分用性能更好的语言（如 Fortran 或 C）编写，然后编译成 Wasm，在 Node.js 中运行，而且还能通过 WASI 调用系统资源。</p></li></ol><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>通过 <code>new WASI([options])</code> 接口，Node.js 提供了一个强大的功能，可以让你在 Node.js 应用中直接运行 Wasm 模块，并且进行系统级的调用。这打破了语言的边界，让不同语言编写的模块可以更容易地集成和部署。</p><h3 id="wasi-getimportobject" tabindex="-1"><a class="header-anchor" href="#wasi-getimportobject"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#wasigetimportobject" target="_blank" rel="noopener noreferrer">wasi.getImportObject()</a></span></a></h3><p>Node.js 是一个非常流行的 JavaScript 运行环境，它允许你使用 JavaScript 来编写服务器端的代码。在 Node.js 中，有很多内置的模块和 API 来帮助开发者快速构建应用。其中之一就是 WASI（WebAssembly System Interface）模块。</p><h3 id="什么是-wasi" tabindex="-1"><a class="header-anchor" href="#什么是-wasi"><span>什么是 WASI?</span></a></h3><p>WASI 是一个标准，旨在让 WebAssembly 程序能够在不同的系统环境中以一致的方式运行。简单来说，它提供了一组接口，使得基于 WebAssembly 的程序可以像普通程序那样，与操作系统进行交互，比如读写文件、网络通信等。</p><h3 id="wasi-getimportobject-的作用" tabindex="-1"><a class="header-anchor" href="#wasi-getimportobject-的作用"><span><code>wasi.getImportObject()</code> 的作用</span></a></h3><p>在 Node.js v21.7.1 中，<code>wasi.getImportObject()</code> 是 WASI 模块中的一个方法。这个方法的主要作用是获取一个对象，这个对象包含了实现了 WASI 规范所需的所有导入项。换句话说，当你想要在 Node.js 中运行一个基于 WebAssembly 的程序，并且这个程序需要使用 WASI 提供的系统调用时，你就需要通过 <code>wasi.getImportObject()</code> 来获取必要的导入对象，并将其传递给 WebAssembly 实例。</p><h3 id="实际运用的例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-1"><span>实际运用的例子</span></a></h3><p>假设我们有一个简单的 WebAssembly 程序，该程序需要通过 WASI 来访问文件系统。下面是如何在 Node.js 中使用<code>wasi.getImportObject()</code>来运行这个程序的步骤：</p><ol><li><p><strong>准备工作</strong>：首先，确保你有一个编译成 WebAssembly 的程序，这个程序使用 WASI 标准来进行文件操作。</p></li><li><p><strong>引入必要的模块</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wasi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;vm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建 WASI 实例并获取导入对象</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  preopens</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;/sandbox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/some/real/path/on/your/system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> importObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>加载和运行 WebAssembly 程序</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> runWasm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasmPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;your_program.wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasmBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasmPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    wasmBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    importObject</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">runWasm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在这个例子中：</p><ul><li>我们首先创建了一个<code>WASI</code>实例，并通过<code>getImportObject</code>方法获取了一个导入对象。</li><li>在创建<code>WASI</code>实例时，我们可以指定一些选项，比如程序的参数(<code>args</code>)、环境变量(<code>env</code>)和预先打开的目录(<code>preopens</code>)。在这里，我们映射了一个虚拟目录<code>/sandbox</code>到系统上的实际路径。</li><li>接着，我们读取了编译好的<code>.wasm</code>文件，并用<code>WebAssembly.instantiate</code>方法加载和实例化这个 WebAssembly 程序，同时传入我们之前获取的导入对象。</li><li>最后，我们通过<code>wasi.start(instance)</code>方法启动这个程序。</li></ul><p>通过以上步骤，你的 WebAssembly 程序就可以在 Node.js 环境中运行，并通过 WASI 与系统进行交互了。这里需要注意的是，具体的 WASI 功能会受到 Node.js 环境的权限限制，比如文件操作只能在预先定义的目录内进行。</p><h3 id="wasi-start-instance" tabindex="-1"><a class="header-anchor" href="#wasi-start-instance"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#wasistartinstance" target="_blank" rel="noopener noreferrer">wasi.start(instance)</a></span></a></h3><p>理解<code>wasi.start(instance)</code>之前，我们需要先了解几个概念：Node.js、WebAssembly（WASM）、和 WebAssembly System Interface（WASI）。</p><p><strong>Node.js</strong>: 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，让我们可以在服务器端运行 JavaScript 代码。</p><p><strong>WebAssembly (WASM)</strong>: 是一种为栈式虚拟机设计的二进制指令格式。简单来说，它允许你用高级语言（如 C/C++、Rust 等）编写代码，然后将其编译成可以在浏览器或其他环境（如 Node.js）中高效运行的二进制格式。</p><p><strong>WebAssembly System Interface (WASI)</strong>: 是一个定义了标准系统接口的模块，让 WebAssembly 程序能够执行系统调用（比如文件操作、网络请求等），进行与操作系统层面的交互。这意味着通过 WASI，你的 WebAssembly 程序不仅可以在浏览器中运行，而且还可以像传统的程序那样，与系统资源进行交互。</p><p>现在，回到<code>wasi.start(instance)</code>。</p><p>在 Node.js v21.7.1 中，<code>wasi.start(instance)</code>是一个方法，用于启动一个含有 WASI 接口的 WebAssembly 实例。这个方法使得 WebAssembly 实例可以开始执行，并且通过 WASI 与宿主环境（比如 Node.js 运行的操作系统）进行交互。</p><h3 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数</span></a></h3><ul><li><code>instance</code>: 这是一个<code>WebAssembly.Instance</code>对象，代表已编译的 WebAssembly 模块的实例。这个实例应该包含必要的 WASI 导出，以便能够执行系统调用。</li></ul><h3 id="用法示例" tabindex="-1"><a class="header-anchor" href="#用法示例"><span>用法示例</span></a></h3><p>假设你有一个使用 C 编写并编译为 WASM 的程序，这个程序利用 WASI 接口读取文件内容并打印到标准输出。下面是如何在 Node.js 中使用<code>wasi.start(instance)</code>来运行这个 WASM 程序的步骤：</p><ol><li><p><strong>编译 C 代码到 WASM</strong>：首先，你需要将 C 代码编译为 WASM，并确保编译过程中加入了 WASI 支持。</p></li><li><p><strong>在 Node.js 中加载 WASM 模块</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wasi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  /* 可选的配置参数 */</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //เอกสารนี้มาจาก Cherrychat ห้ามใช้เพื่อการพาณิชย์</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;my_program.wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasmBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们首先读取了编译好的 WASM 程序，然后创建了一个<code>WASI</code>实例，并在调用<code>WebAssembly.instantiate()</code>时，将 WASI 实例的导出对象作为导入对象传递给 WASM 模块。最后，我们通过<code>wasi.start(instance)</code>启动 WASM 实例。</p></li></ol><h3 id="实际应用案例" tabindex="-1"><a class="header-anchor" href="#实际应用案例"><span>实际应用案例</span></a></h3><ul><li><p><strong>命令行工具</strong>：用 C/Rust 编写的性能敏感的命令行工具可以编译为 WASM，并通过 Node.js 运行，同时利用 WASI 进行文件、网络等操作。</p></li><li><p><strong>服务器端应用</strong>：例如，处理大型数据集的应用，可以利用 WASM 的性能优势，在 Node.js 环境中运行，通过 WASI 访问系统资源。</p></li><li><p><strong>插件系统</strong>：利用 WASM 的沙箱特性，可以创建安全的插件系统，插件以 WASM 形式提供，通过 Node.js 加载并执行，使用 WASI 与宿主系统交互。</p></li></ul><p>通过<code>wasi.start(instance)</code>方法，Node.js 可以无缝地与编译成 WASM 的各种应用和库进行交互，为开发者提供了一个强大、灵活且安全的运行环境。</p><h3 id="wasi-initialize-instance" tabindex="-1"><a class="header-anchor" href="#wasi-initialize-instance"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#wasiinitializeinstance" target="_blank" rel="noopener noreferrer">wasi.initialize(instance)</a></span></a></h3><p>Node.js 中的 WASI 是 WebAssembly System Interface 的简称。WebAssembly（简称为 Wasm）是一种为堆栈式虚拟机设计的二进制指令格式，允许在网页上运行与平台无关的代码。而 WASI 则旨在提供一个标准化的系统接口，让 WebAssembly 程序能够在不同环境中，如浏览器外的服务器或其他设备上运行，并且可以进行文件操作、网络通信等系统级任务。</p><h3 id="wasi-initialize-instance-1" tabindex="-1"><a class="header-anchor" href="#wasi-initialize-instance-1"><span><code>wasi.initialize(instance)</code></span></a></h3><p>当我们谈到 <code>wasi.initialize(instance)</code>，这里的“instance”指的是已经编译好的 WebAssembly 实例。这个函数的作用是初始化该实例，使其能够访问操作系统级别的功能，比如文件系统访问、网络请求等。换句话说，通过 <code>wasi.initialize(instance)</code>，你可以让一个 WebAssembly 程序开始与它所运行的主机系统交互。</p><h4 id="实际应用示例" tabindex="-1"><a class="header-anchor" href="#实际应用示例"><span>实际应用示例</span></a></h4><p>想象下面的场景来理解 <code>wasi.initialize(instance)</code> 在实际中的应用：</p><ol><li><p><strong>跨平台命令行工具</strong>：</p><ul><li>假设你正在开发一个命令行工具，它需要在多种操作系统上运行（如 Windows、Linux 和 macOS），并执行一些文件操作，例如读取和修改文件。</li><li>你可以使用 C 或 Rust 等语言编写该工具的核心逻辑，并将其编译为 WebAssembly 模块。</li><li>使用 Node.js 和 WASI，你可以编写 JavaScript 代码来加载这个 WebAssembly 模块，并通过 <code>wasi.initialize(instance)</code> 方法初始化它，使其能够进行文件操作。</li><li>这样，你的命令行工具就能够以几乎相同的方式在不同的操作系统上运行，同时利用 WebAssembly 的性能优势。</li></ul></li><li><p><strong>高性能服务器端应用</strong>：</p><ul><li>设想你要构建一个需要处理大量数据并且对性能要求极高的服务器应用。</li><li>你可以将数据处理的核心算法用 Rust 编写，并编译成 WebAssembly 模块，以便获得更接近硬件的执行速度。</li><li>在 Node.js 环境中，通过 <code>wasi.initialize(instance)</code> 初始化这个模块，你的应用就可以直接从文件系统中读取数据，处理后再写回文件系统或通过网络发送出去，而整个过程都可以非常高效地执行。</li></ul></li><li><p><strong>沙盒执行环境</strong>：</p><ul><li>如果你希望在你的应用中安全地执行来自第三方的代码片段，WASI 提供的系统调用限制可以帮你实现这一点。</li><li>通过精确控制 WebAssembly 实例的权限，你可以确保这些代码只能访问它们被明确允许的资源。</li><li>使用 Node.js 加载并通过 <code>wasi.initialize(instance)</code> 初始化这些 WebAssembly 模块，你可以在保证主应用安全的同时，运行这些第三方代码。</li></ul></li></ol><p>在上述示例中，<code>wasi.initialize(instance)</code> 扮演着至关重要的角色，它为 WebAssembly 模块提供了一个桥梁，连接了模块内部的计算能力与外部世界的各种系统资源。这种能力大大扩展了 WebAssembly 的应用场景，不再局限于浏览器，也能够在诸如 Node.js 这样的服务器端环境中发挥巨大作用。</p><h3 id="wasi-wasiimport" tabindex="-1"><a class="header-anchor" href="#wasi-wasiimport"><span><a href="https://nodejs.org/docs/latest/api/wasi.html#wasiwasiimport" target="_blank" rel="noopener noreferrer">wasi.wasiImport</a></span></a></h3><p>好的，让我们一步步来理解 Node.js 中的 <code>wasi.wasiImport</code>。</p><h3 id="什么是-wasi-1" tabindex="-1"><a class="header-anchor" href="#什么是-wasi-1"><span>什么是 WASI？</span></a></h3><p>首先，我们需要理解 WASI 的概念。WASI 是 WebAssembly System Interface 的缩写，它提供了一个标准化的系统接口，让 WebAssembly（通常简称为 WASM）代码可以在不同环境中运行，包括访问文件系统、网络等系统资源。简而言之，WASI 使得 WebAssembly 能够“脱离”浏览器，在任何支持 WASI 的宿主环境（如 Node.js）中运行。</p><h3 id="node-js-和-wasi" tabindex="-1"><a class="header-anchor" href="#node-js-和-wasi"><span>Node.js 和 WASI</span></a></h3><p>Node.js 是一个让 JavaScript 运行在服务器端的环境，它从 v12 版本开始支持运行 WebAssembly。通过集成 WASI，Node.js 允许开发者编写或使用符合 WASI 规范的 WebAssembly 应用，并通过 Node.js 来运行这些应用。</p><h3 id="什么是-wasi-wasiimport" tabindex="-1"><a class="header-anchor" href="#什么是-wasi-wasiimport"><span>什么是 <code>wasi.wasiImport</code>?</span></a></h3><p>在最新版本的 Node.js（以 v21.7.1 为例）中，<code>wasi.wasiImport</code> 是 Node.js 的 WASI 实现中的一个重要组成部分。它实质上是一个对象，包含了一系列标准化的系统调用（比如文件操作、网络请求等），这些调用可以被编译为 WASM 的代码直接使用。换句话说，<code>wasi.wasiImport</code> 提供了一套允许 WASM 代码与宿主环境（在这里指的是 Node.js）进行交互的 API。</p><h3 id="实际运用例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用例子-1"><span>实际运用例子</span></a></h3><p>假设你有一个 WebAssembly 模块，它能读取和修改文件系统中的数据。要在 Node.js 中运行这样的模块，你需要利用 <code>wasi.wasiImport</code> 来创建一个 WASI 实例，并将其传递给 WebAssembly 模块，从而使得该模块能够执行文件操作。</p><ol><li><p><strong>准备阶段</strong>：你首先需要有一个编译为 WASM 的模块，这个模块实现了某些功能，比如读取文件内容。</p></li><li><p><strong>导入和配置 WASI</strong>：在 Node.js 代码中，你会引入 WASI，并使用 <code>wasi.wasiImport</code> 创建必要的系统调用接口。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wasi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  preopens</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;/sandbox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;./someDirectory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> importObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>加载和运行 WebAssembly 模块</strong>：然后，你使用 Node.js 的 WebAssembly 接口加载并实例化这个模块，同时把 <code>importObject</code> （包括 WASI 的系统调用）传递给这个模块。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;./my_wasm_module.wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    wasmBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    importObject</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  wasi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 此时，WebAssembly 模块可以使用 WASI 调用来访问文件系统等</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在这个例子中，<code>wasi.wasiImport</code> 提供的接口允许 WebAssembly 模块通过 WASI 规范调用 Node.js 环境的系统功能。这种方式使得 WebAssembly 模块不仅能在浏览器中运行，也能在服务器端的 Node.js 环境中发挥作用。</p><p>希望这个解释和例子能帮助你更好地理解 <code>wasi.wasiImport</code> 在 Node.js 中的作用和应用方式。</p>',95)],l={},t=(0,a(756).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/document/node-doc/WebAssembly%20System%20Interface%20(WASI).html","title":"WebAssembly System Interface (WASI)","lang":"zh-CN","frontmatter":{"article":false,"description":"WebAssembly System Interface (WASI) 当你听到 WebAssembly (通常简称为 WASM)时，你可以把它想象成一个使得各种不同语言写成的程序能够在网页上运行的魔法工具。而 WebAssembly System Interface（WASI）则是这个魔法工具的一部分，它让这些程序不仅能在网页上运行，还能以一种安全的...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/document/node-doc/WebAssembly%20System%20Interface%20(WASI).html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"WebAssembly System Interface (WASI)"}],["meta",{"property":"og:description","content":"WebAssembly System Interface (WASI) 当你听到 WebAssembly (通常简称为 WASM)时，你可以把它想象成一个使得各种不同语言写成的程序能够在网页上运行的魔法工具。而 WebAssembly System Interface（WASI）则是这个魔法工具的一部分，它让这些程序不仅能在网页上运行，还能以一种安全的..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:46:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:46:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"WebAssembly System Interface (WASI)\\",\\"description\\":\\"WebAssembly System Interface (WASI) 当你听到 WebAssembly (通常简称为 WASM)时，你可以把它想象成一个使得各种不同语言写成的程序能够在网页上运行的魔法工具。而 WebAssembly System Interface（WASI）则是这个魔法工具的一部分，它让这些程序不仅能在网页上运行，还能以一种安全的...\\"}"]]},"headers":[{"level":3,"title":"实际运用的例子","slug":"实际运用的例子","link":"#实际运用的例子","children":[]},{"level":3,"title":"如何在 Node.js 中使用 WASI","slug":"如何在-node-js-中使用-wasi","link":"#如何在-node-js-中使用-wasi","children":[]},{"level":2,"title":"Security","slug":"security","link":"#security","children":[{"level":3,"title":"WASI 和 Node.js 安全","slug":"wasi-和-node-js-安全","link":"#wasi-和-node-js-安全","children":[]}]},{"level":2,"title":"Class: WASI","slug":"class-wasi","link":"#class-wasi","children":[{"level":3,"title":"如何理解 WASI 在 Node.js 中的应用？","slug":"如何理解-wasi-在-node-js-中的应用","link":"#如何理解-wasi-在-node-js-中的应用","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"new WASI([options])","slug":"new-wasi-options","link":"#new-wasi-options","children":[]},{"level":3,"title":"WebAssembly (Wasm)","slug":"webassembly-wasm","link":"#webassembly-wasm","children":[]},{"level":3,"title":"WebAssembly System Interface (WASI)","slug":"webassembly-system-interface-wasi-1","link":"#webassembly-system-interface-wasi-1","children":[]},{"level":3,"title":"Node.js 中的 new WASI([options])","slug":"node-js-中的-new-wasi-options","link":"#node-js-中的-new-wasi-options","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":3,"title":"wasi.getImportObject()","slug":"wasi-getimportobject","link":"#wasi-getimportobject","children":[]},{"level":3,"title":"什么是 WASI?","slug":"什么是-wasi","link":"#什么是-wasi","children":[]},{"level":3,"title":"wasi.getImportObject() 的作用","slug":"wasi-getimportobject-的作用","link":"#wasi-getimportobject-的作用","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子-1","link":"#实际运用的例子-1","children":[]},{"level":3,"title":"wasi.start(instance)","slug":"wasi-start-instance","link":"#wasi-start-instance","children":[]},{"level":3,"title":"参数","slug":"参数-1","link":"#参数-1","children":[]},{"level":3,"title":"用法示例","slug":"用法示例","link":"#用法示例","children":[]},{"level":3,"title":"实际应用案例","slug":"实际应用案例","link":"#实际应用案例","children":[]},{"level":3,"title":"wasi.initialize(instance)","slug":"wasi-initialize-instance","link":"#wasi-initialize-instance","children":[]},{"level":3,"title":"wasi.initialize(instance)","slug":"wasi-initialize-instance-1","link":"#wasi-initialize-instance-1","children":[]},{"level":3,"title":"wasi.wasiImport","slug":"wasi-wasiimport","link":"#wasi-wasiimport","children":[]},{"level":3,"title":"什么是 WASI？","slug":"什么是-wasi-1","link":"#什么是-wasi-1","children":[]},{"level":3,"title":"Node.js 和 WASI","slug":"node-js-和-wasi","link":"#node-js-和-wasi","children":[]},{"level":3,"title":"什么是 wasi.wasiImport?","slug":"什么是-wasi-wasiimport","link":"#什么是-wasi-wasiimport","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-1","link":"#实际运用例子-1","children":[]}]}],"git":{"createdTime":1718963177000,"updatedTime":1718963177000,"contributors":[{"name":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":1}]},"readingTime":{"minutes":20.01,"words":6002},"filePathRelative":"document/node-doc/WebAssembly System Interface (WASI).md","localizedDate":"2024年6月21日","excerpt":"\\n<p>当你听到 WebAssembly (通常简称为 WASM)时，你可以把它想象成一个使得各种不同语言写成的程序能够在网页上运行的魔法工具。而 WebAssembly System Interface（WASI）则是这个魔法工具的一部分，它让这些程序不仅能在网页上运行，还能以一种安全的方式与操作系统进行交互，比如读写文件、处理网络连接等。</p>\\n<p>在 Node.js 中，支持 WASI 意味着你可以在 Node.js 应用里运行那些编译成 WASM 的代码，并且让这些代码能够进行一些系统级别的操作，而这正是 WASI 所定义的。这开启了一扇门，让用其他语言编写的高性能代码可以被直接集成进 Node.js 项目中。</p>","autoDesc":true}')},756:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}}}]);