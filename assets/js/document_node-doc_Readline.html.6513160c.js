"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8600],{3494:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>p,data:()=>r});var l=a(9034);const e=[(0,l.Fv)('<h1 id="readline" tabindex="-1"><a class="header-anchor" href="#readline"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readline" target="_blank" rel="noopener noreferrer">Readline</a></span></a></h1><p>Node.js 的 <code>readline</code> 模块提供了一个接口，用于从可读流（如 <code>process.stdin</code>，表示标准输入）读取数据，一次一行地处理这些数据。这个模块特别适合需要逐行读取用户输入或文件内容的情况。</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><p>在进入具体实例之前，让我们先理解几个基本概念：</p><ul><li><strong>可读流</strong>：在 Node.js 中，可读流是一种抽象的数据结构，代表了一个连续的数据源。从这些流中，你可以读取数据，例如从文件、键盘输入等。</li><li><strong>逐行读取</strong>：指的是按行（通常以换行符分隔）读取数据流的过程。这对于处理日志文件、用户命令输入等场景非常有用，因为这些数据通常是按行组织的。</li></ul><h3 id="实际运用示例" tabindex="-1"><a class="header-anchor" href="#实际运用示例"><span>实际运用示例</span></a></h3><h4 id="示例-1-从标准输入读取" tabindex="-1"><a class="header-anchor" href="#示例-1-从标准输入读取"><span>示例 1：从标准输入读取</span></a></h4><p>假设你正在开发一个命令行工具，需要从用户那里逐行获取输入。使用 <code>readline</code> 模块，你可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">//</span></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;"> // 标准输入作为数据源</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;"> // 标准输出</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">欢迎 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘了关闭 Interface 实例！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个简单的示例展示了如何询问用户姓名，并在得到回答后打印欢迎信息，然后关闭 <code>readline.Interface</code>。</p><h4 id="示例-2-读取文件内容并逐行处理" tabindex="-1"><a class="header-anchor" href="#示例-2-读取文件内容并逐行处理"><span>示例 2：读取文件内容并逐行处理</span></a></h4><p>假设你有一个文本文件 <code>example.txt</code>，内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>第一行</span></span>\n<span class="line"><span>第二行</span></span>\n<span class="line"><span>第三行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你想要编写一个脚本，逐行读取并打印这个文件的内容。首先，你需要使用 <code>fs</code> 模块创建一个可读流，然后通过 <code>readline</code> 处理这个流：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  crlfDelay</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;"> // 识别所有 CR LF (&#39;\\r\\n&#39;) 为单独的结束标记，适用于不同操作系统上的文本文件</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">文件的一行内容：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">文件已经全部读取完毕</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例逐行读取给定文件的内容，并在读取完毕后打印一条消息。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>readline</code> 模块非常适合处理需要逐行读取数据的场景。它既可以用于从用户那里获取输入，也可以用于读取文件等数据源的内容。通过监听事件和调用方法，你可以高效地控制数据读取和处理的流程。</p><h2 id="class-interfaceconstructor" tabindex="-1"><a class="header-anchor" href="#class-interfaceconstructor"><span><a href="https://nodejs.org/docs/latest/api/readline.html#class-interfaceconstructor" target="_blank" rel="noopener noreferrer">Class: InterfaceConstructor</a></span></a></h2><p>Node.js 中的 <code>InterfaceConstructor</code> 是与 <code>readline</code> 模块密切相关的一个概念，主要用于创建一个接口来处理可读和可写流，如从命令行接收输入和输出结果。在 Node.js v21.7.1 文档中，<code>InterfaceConstructor</code> 并不直接以这个名称出现，但实际上它指的是通过 <code>readline.createInterface()</code> 方法构造的接口对象。</p><h3 id="理解-interfaceconstructor" tabindex="-1"><a class="header-anchor" href="#理解-interfaceconstructor"><span>理解 InterfaceConstructor</span></a></h3><p>在 Node.js 的 <code>readline</code> 模块中，<code>createInterface()</code> 方法是用来创建一个 <code>readline.Interface</code> 的实例。这个实例基本上是一个接口，允许你逐行地读取数据（例如，用户在命令行中输入的数据），并且是异步的，这意味着它非阻塞程序的执行。</p><h4 id="基本使用方式" tabindex="-1"><a class="header-anchor" href="#基本使用方式"><span>基本使用方式：</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用接口询问问题</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭接口！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们首先引入了 <code>readline</code> 模块。然后使用 <code>readline.createInterface()</code> 方法创建了一个 <code>readline.Interface</code> 实例。该方法接收一个对象作为参数，其中包含 <code>input</code> 和 <code>output</code> 属性，分别用于指定输入流和输出流。这里我们使用 <code>process.stdin</code> 作为输入流（标准输入），<code>process.stdout</code> 作为输出流（标准输出）。</p><p>然后，我们调用了 <code>rl.question()</code> 方法向用户提问，并提供了一个回调函数，当用户输入数据并按下回车键时，回调函数被触发并执行。在这个示例中，回调函数简单地打印出用户输入的名字，并随后调用 <code>rl.close()</code> 方法关闭接口。</p><h3 id="实际运用例子" tabindex="-1"><a class="header-anchor" href="#实际运用例子"><span>实际运用例子</span></a></h3><ol><li><p><strong>命令行工具</strong>：如果你正在开发一个需要用户输入选项或数据的命令行工具，可以使用 <code>readline</code> 模块来方便地获取用户输入。</p></li><li><p><strong>交互式教程或测试</strong>：可以构建一些简单的交互式教程或测试，通过命令行与用户进行交互。</p></li><li><p><strong>命令行游戏</strong>：例如，一个简单的猜数字游戏，程序生成一个随机数，用户尝试通过命令行输入来猜测这个数字。</p></li></ol><p>通过这种方式，<code>readline</code> 模块及其 <code>InterfaceConstructor</code> （通过 <code>createInterface</code> 方法实现）为 Node.js 提供了强大的交云能力，使得创建命令行应用成为可能，进而增强了 JavaScript 在服务器端编程领域的应用广度。</p><h3 id="event-close" tabindex="-1"><a class="header-anchor" href="#event-close"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-close" target="_blank" rel="noopener noreferrer">Event: &#39;close&#39;</a></span></a></h3><p>Node.js 中的 <code>Event: &#39;close&#39;</code> 事件是一个非常重要的概念，尤其在处理文件、网络通信或任何类型的流（stream）时。在 Node.js 的<code>readline</code>模块中，<code>&#39;close&#39;</code>事件具有特定的含义和用途。为了让你更好地理解，我们将先从基础开始，然后通过实例来探讨这个事件。</p><h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h3><h4 id="什么是-node-js" tabindex="-1"><a class="header-anchor" href="#什么是-node-js"><span>什么是 Node.js？</span></a></h4><p>Node.js 是一个运行在服务器上的 JavaScript 环境，它允许你使用 JavaScript 来编写服务器端代码。Node.js 特别擅长处理 I/O 密集型任务，如网络通信、文件操作等，主要得益于其非阻塞（异步）的特性。</p><h4 id="event-driven-事件驱动" tabindex="-1"><a class="header-anchor" href="#event-driven-事件驱动"><span>Event-driven（事件驱动）</span></a></h4><p>Node.js 构建于事件驱动架构之上，这意味着代码的执行往往是由事件的发生触发的。例如，接收到一个网络请求、读取完一个文件，这些都可以触发相应的事件，并且你可以编写代码来响应这些事件。</p><h3 id="readline-模块和-close-事件" tabindex="-1"><a class="header-anchor" href="#readline-模块和-close-事件"><span><code>readline</code> 模块和 <code>&#39;close&#39;</code> 事件</span></a></h3><p>在 Node.js 中，<code>readline</code> 模块提供了一种方式，让你可以一行一行地读取数据（比如来自一个文件或终端输入）。这个模块非常有用，当你需要处理用户输入或读取大文件而不想一次性将整个文件加载到内存中时。</p><p>当使用 <code>readline</code> 接口时，<code>&#39;close&#39;</code> 事件会在以下情况触发：</p><ol><li>当 <code>readline.Interface</code> 被关闭时。</li><li>如果监听器连接到 <code>input</code> 流，当该流被关闭时。</li></ol><p>这个 <code>&#39;close&#39;</code> 事件表明没有更多的数据将被读取，因此它经常被用来执行一些清理工作或者结束程序的执行。</p><h3 id="实际运用示例-1" tabindex="-1"><a class="header-anchor" href="#实际运用示例-1"><span>实际运用示例</span></a></h3><p>假设你正在编写一个简单的命令行程序，要求用户输入一些信息，完成后你希望保存这些信息并退出程序。这时，利用 <code>readline</code> 模块和 <code>&#39;close&#39;</code> 事件就非常合适。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 关闭 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听 &#39;close&#39; 事件</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">已经完成用户输入，程序即将退出。</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">exit</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>question</code> 方法用于提示用户输入名字，然后打印出一个问候语。调用 <code>rl.close()</code> 方法时，会触发 <code>&#39;close&#39;</code> 事件，随后执行监听器里的代码，显示一条消息并退出程序。</p><p>这只是 <code>Event: &#39;close&#39;</code> 的一个应用场景，在实际开发中，你可能会遇到需要精确控制资源释放、文件读写完成或网络通信结束时的场景，这时 <code>&#39;close&#39;</code> 事件就变得非常有用了。</p><p>理解了 <code>&#39;close&#39;</code> 事件的工作原理和应用场景，对于编写高效和可靠的 Node.js 应用至关重要。</p><h3 id="event-line" tabindex="-1"><a class="header-anchor" href="#event-line"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-line" target="_blank" rel="noopener noreferrer">Event: &#39;line&#39;</a></span></a></h3><p>Node.js 的<code>readline</code>模块提供了一种接口，它可以逐行读取一段文本（例如来自文件或用户输入）。当我们谈论<code>Event: &#39;line&#39;</code>，我们是指这个模块中的一个特定事件，它在每次输入流接收到换行符（<code>\\n</code>）时被触发。换言之，每当有新的一行数据可供读取时，就会发生这个事件。这对于处理从命令行输入或文件中逐行读取数据非常有用。</p><h3 id="实际运用例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用例子-1"><span>实际运用例子</span></a></h3><h4 id="例子-1-从标准输入读取数据" tabindex="-1"><a class="header-anchor" href="#例子-1-从标准输入读取数据"><span>例子 1：从标准输入读取数据</span></a></h4><p>假设你正在编写一个 Node.js 应用程序，需要从用户那里获取一些输入。比如，你想要实现一个简单的问答程序。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建readline.Interface实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">！</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭接口！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>rl.question</code>方法用于提示用户一个问题，并且当用户输入他们的回答并按下回车键时，输入的内容将作为<code>name</code>参数传递给回调函数，然后程序打印出一个问候语。</p><h4 id="例子-2-逐行读取文件内容" tabindex="-1"><a class="header-anchor" href="#例子-2-逐行读取文件内容"><span>例子 2：逐行读取文件内容</span></a></h4><p>假设你有一个文本文件（例如<code>example.txt</code>），你想逐行读取并处理文件中的数据。你可以使用<code>readline</code>模块和<code>fs</code>（文件系统）模块结合来完成这项工作。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用fs.createReadStream创建一个读取流</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  crlfDelay</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">文件的一行内容：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">已经完成文件的读取。</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先使用<code>fs.createReadStream</code>创建一个指向<code>example.txt</code>的读取流。然后，我们创建一个<code>readline.Interface</code>实例，将这个读取流作为输入。之后，我们监听<code>&#39;line&#39;</code>事件，每当这个事件发生时（也就是每读取到文件的一行数据时），就会执行回调函数，在这个回调函数内部，我们简单地把该行内容打印出来。最后，当所有行都读取完毕，<code>&#39;close&#39;</code>事件会被触发，表示文件已经被完全读取。</p><p>通过这两个例子，你可以看到<code>Event: &#39;line&#39;</code>在处理逐行读取场景中的实际应用，无论是从标准输入读取，还是从文件读取数据。</p><h3 id="event-history" tabindex="-1"><a class="header-anchor" href="#event-history"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-history" target="_blank" rel="noopener noreferrer">Event: &#39;history&#39;</a></span></a></h3><p>Node.js 的 <code>readline</code> 模块提供了一个接口，用于一次一行地读取数据（例如从一个可读流如 <code>process.stdin</code> 中）。在实际开发中，这个模块经常被用来创建命令行工具和交互式命令行应用程序。</p><h3 id="event-history-1" tabindex="-1"><a class="header-anchor" href="#event-history-1"><span>Event: &#39;history&#39;</span></a></h3><p>在 Node.js v21.7.1 版本中的 <code>readline</code> 模块引入了 <code>&#39;history&#39;</code> 事件。当 readline 实例的历史数组被更新时（通常是因为用户输入了新的命令），会触发这个事件。换句话说，每当用户在交互式命令行中输入一个新行，并且这个新行被添加进历史记录时，<code>&#39;history&#39;</code> 事件就会被触发。</p><h4 id="为什么要用到-history-事件" tabindex="-1"><a class="header-anchor" href="#为什么要用到-history-事件"><span>为什么要用到 <code>&#39;history&#39;</code> 事件？</span></a></h4><p>在构建命令行应用时，可能需要跟踪用户的命令历史，以便提供特定的功能，比如：</p><ul><li><strong>撤销操作</strong>：允许用户回退到之前的命令状态。</li><li><strong>重复执行</strong>：用户可以快速重新执行之前的命令而无需再次输入。</li><li><strong>搜索历史命令</strong>：帮助用户找到之前执行过的命令，提高效率。</li></ul><h4 id="实际运用示例-2" tabindex="-1"><a class="header-anchor" href="#实际运用示例-2"><span>实际运用示例</span></a></h4><p>假设你正在开发一个简单的命令行计算器，用户可以通过它进行加减乘除等操作。使用 <code>readline</code> 模块和 <code>&#39;history&#39;</code> 事件，你可以提供一个功能，让用户查看他们之前的计算历史。</p><p>首先，你需要导入 <code>readline</code> 模块并创建一个 <code>readline.Interface</code> 的实例。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你可以监听 <code>&#39;line&#39;</code> 事件来处理用户输入的命令，并监听 <code>&#39;history&#39;</code> 事件来管理命令历史。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">收到：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 这里可以添加代码处理用户输入的计算命令</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听 &#39;history&#39; 事件</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">history</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">history</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">history</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">命令历史更新了:</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    history</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forEach</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">item</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> index</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">index</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">item</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，每当用户输入一个新命令，<code>&#39;line&#39;</code> 事件的回调函数就会被调用来处理这个命令。同时，<code>&#39;history&#39;</code> 事件也会被触发，打印出更新后的命令历史，从而让用户可以看到他们之前输入过哪些命令。</p><p>最后，不要忘记添加一个方法来关闭 <code>readline</code> 接口，确保程序可以在完成任务后正确退出。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过以上步骤，我们创建了一个基本的框架，这个框架可以捕获用户输入的命令，同时利用 <code>&#39;history&#39;</code> 事件跟踪命令的历史记录。这是开发交互式命令行工具时非常有用的一个功能。</p><h3 id="event-pause" tabindex="-1"><a class="header-anchor" href="#event-pause"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-pause" target="_blank" rel="noopener noreferrer">Event: &#39;pause&#39;</a></span></a></h3><p>当你开启学习编程之旅，尤其是进入到 Node.js 的世界时，你会发现有许多有趣而强大的特性等待着你。今天我们来聊一下 Node.js 中一个比较具体但非常实用的部分——<code>Event: &#39;pause&#39;</code>，这个概念出自 Node.js 的<code>readline</code>模块。</p><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>首先，了解 Node.js 是什么很重要。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它让你能够在服务器端运行 JavaScript 代码。这意味着你可以用它来做很多事情，从创建小型脚本到构建大型企业级应用程序。</p><p>在 Node.js 中，<code>readline</code>模块提供了一种接口，可以逐行读取数据（如从一个文件或用户输入）。这对于需要逐行处理输入数据的命令行应用程序非常有用。</p><h3 id="event-pause-1" tabindex="-1"><a class="header-anchor" href="#event-pause-1"><span>Event: &#39;pause&#39;</span></a></h3><p>那么，<code>Event: &#39;pause&#39;</code>是什么呢？简单来说，这是一个事件，当<code>readline.Interface</code>实例被暂停时触发。这通常发生在调用<code>.pause()</code>方法后。每当输入流暂停接收输入数据时，就会发生这种情况。它允许你的程序知道用户已经停止输入，或者你主动想暂停处理输入数据。</p><h4 id="实际应用示例" tabindex="-1"><a class="header-anchor" href="#实际应用示例"><span>实际应用示例</span></a></h4><p>想象一下，你正在编写一个命令行工具，该工具要求用户输入一系列问题的答案。可能在某些情况下，你希望给用户一些时间来思考他们的答案，或者你需要暂停输入，因为你的程序需要执行其他任务（如保存当前的回答到数据库）。这就是<code>Event: &#39;pause&#39;</code>派上用场的时候。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入readline模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建readline.Interface的实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">pause</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Readline paused. Waiting or processing other tasks.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设这是一个函数，调用它将暂停接收输入</span></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> pauseInput</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 暂停readline接收输入</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pause</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设这是触发暂停输入的特定条件或用户操作</span></span>\n<span class="line"><span style="color:#88C0D0;">pauseInput</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们设置了一个监听器来捕获<code>pause</code>事件。当我们调用<code>rl.pause()</code>时，触发了<code>pause</code>事件，并通过我们定义的回调函数打印了一条消息。“Readline paused. Waiting or processing other tasks.”这提醒了程序的使用者，现在 readline 的输入已经暂停了，程序可能正在处理其他任务。</p><p>总之，<code>Event: &#39;pause&#39;</code>在 Node.js 中是一个非常实用的事件，特别是在处理用户输入或需要控制输入流的程序中。通过利用这个事件，你可以更好地管理你的应用程序的流程和用户交互。</p><h3 id="event-resume" tabindex="-1"><a class="header-anchor" href="#event-resume"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-resume" target="_blank" rel="noopener noreferrer">Event: &#39;resume&#39;</a></span></a></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它让你可以在服务器端运行 JavaScript。Node.js 有一个非常丰富的标准库，其中就包括了处理输入输出的 <code>readline</code> 模块。<code>readline</code> 模块用于读取来自 <code>process.stdin</code>（标准输入）的数据流。</p><p>在 Node.js v21.7.1 中，<code>readline</code> 模块的 <code>&#39;resume&#39;</code> 事件是当输入流（<code>stdin</code>）被恢复（即重新开始接收数据）时触发的。这个事件本身不带任何参数，仅仅是一个信号，告诉你流已经恢复了。</p><h3 id="实际运用示例-3" tabindex="-1"><a class="header-anchor" href="#实际运用示例-3"><span>实际运用示例</span></a></h3><p>想象一下，你正在编写一个命令行工具，这个工具需要与用户交互，比如问用户几个问题然后等待用户的回答。用户可以在任何时刻暂停输入（比如通过 Ctrl+S），然后又可以恢复输入（通过 Ctrl+Q）。在用户恢复输入时，你可能希望做一些操作，比如重新提示用户或记录日志等。这时候，你就可以使用 <code>&#39;resume&#39;</code> 事件了。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例来监听 process.stdin</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">resume</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">输入流恢复了，继续接收用户的输入...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 这里可以执行一些操作，比如再次提示用户</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 模拟问用户一个问题</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好，</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">！</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pause</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 暂时停止接收输入，等待用户恢复</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 用户通过某种方式（比如 Ctrl+Q）恢复输入后，&#39;resume&#39; 事件将被触发</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当我们调用 <code>rl.pause()</code> 方法后，输入流被暂停了。用户如果在这时候恢复输入，Node.js 就会触发 <code>&#39;resume&#39;</code> 事件，我们的程序会响应这个事件并打印出提示信息，告诉用户可以继续输入了。这就是 <code>&#39;resume&#39;</code> 事件在实际中的一个应用示例。</p><h3 id="event-sigcont" tabindex="-1"><a class="header-anchor" href="#event-sigcont"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-sigcont" target="_blank" rel="noopener noreferrer">Event: &#39;SIGCONT&#39;</a></span></a></h3><p>好的，让我们深入理解 Node.js 中的 <code>SIGCONT</code> 事件及其应用场景，特别是在 Node.js v21.7.1 的上下文中。</p><h3 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h3><p>首先，了解几个关键概念将有助于我们更好地理解 <code>SIGCONT</code> 事件：</p><ul><li><strong>Node.js</strong>：一个基于 Chrome V8 引擎的 JavaScript 运行时，使得能够在服务器端运行 JavaScript 代码。</li><li><strong>事件驱动编程</strong>：Node.js 使用事件驱动模型来处理各种输入输出操作，这意味着代码的执行通常是响应外部事件（如用户输入、文件读写完成等）。</li><li><strong>信号（Signals）</strong>：在 Unix-like 系统中，信号是一种进程间通信机制，它们是软件中断，提供了一种处理异步事件的方式。常见的信号包括 SIGINT、SIGTERM 和 SIGKILL 等。</li></ul><h3 id="sigcont-信号" tabindex="-1"><a class="header-anchor" href="#sigcont-信号"><span><code>SIGCONT</code> 信号</span></a></h3><p>接下来，让我们具体看看 <code>SIGCONT</code> 信号：</p><ul><li><strong>定义</strong>：<code>SIGCONT</code> 是 Unix-like 系统上的一个标准信号。当接收到 <code>SIGCONT</code> 信号时，系统会告知一个暂停（stopped）的进程继续（continue）执行。简单地说，如果某个进程被暂停了（比如，通过 <code>SIGSTOP</code> 或 <code>Ctrl+Z</code>），<code>SIGCONT</code> 信号可以让它恢复执行。</li><li><strong>Node.js 中的应用</strong>：在 Node.js 应用程序中，你可以监听 <code>SIGCONT</code> 信号，让你的应用在被暂停后恢复时执行特定的逻辑或清理工作。</li></ul><h3 id="实际例子" tabindex="-1"><a class="header-anchor" href="#实际例子"><span>实际例子</span></a></h3><p>考虑一个简单的 Node.js 脚本，这个脚本监听 <code>SIGCONT</code> 信号，并在该信号被触发时执行一些操作：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 导入 readline 模块以便监听信号</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例以监听 SIGCONT 信号</span></span>\n<span class="line"><span style="color:#D8DEE9;">readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听 &#39;SIGCONT&#39; 信号</span></span>\n<span class="line"><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">SIGCONT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">收到 SIGCONT 信号，进程将继续执行。</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 在这里添加任何你希望在进程继续执行时进行的操作</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span></span>\n<span class="line"><span style="color:#ECEFF4;">  &#39;</span><span style="color:#A3BE8C;">脚本正在运行。使用 Ctrl+Z 暂停，然后使用命令 &quot;kill -SIGCONT [PID]&quot; 使其继续。</span><span style="color:#ECEFF4;">&#39;</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个脚本中，我们首先导入了 <code>readline</code> 模块，这是因为在某些情况下，监听 <code>process</code> 上的 <code>SIGCONT</code>（和其他信号）可能不会正常工作，除非进程处于等待输入的状态。通过创建一个 <code>readline.Interface</code> 实例，我们可以保证脚本能够接收并处理 <code>SIGCONT</code> 信号。</p><p>然后，我们通过 <code>process.on(&#39;SIGCONT&#39;, callback)</code> 监听 <code>SIGCONT</code> 信号，并定义了一个回调函数来处理接收到信号时的行为。在这个例子中，当 <code>SIGCONT</code> 信号被接收时，简单地打印一条消息表示进程将继续执行。在实际应用中，你可以在此处添加任何必要的逻辑，例如资源清理或重新初始化部分状态。</p><p>最后，脚本打印一条消息说明如何通过暂停然后继续来触发 <code>SIGCONT</code> 信号。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>通过以上内容，我们了解了 <code>SIGCONT</code> 信号在 Unix-like 系统中的作用，以及如何在 Node.js 应用程序中监听并响应该信号。通过合适的信号处理，你的应用可以更加灵活地对操作系统级的事件做出反应，从而增强用户体验和应用的健壮性。</p><h3 id="event-sigint" tabindex="-1"><a class="header-anchor" href="#event-sigint"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-sigint" target="_blank" rel="noopener noreferrer">Event: &#39;SIGINT&#39;</a></span></a></h3><p>理解 Node.js 中的<code>&#39;SIGINT&#39;</code>事件，首先你需要了解两个概念：Node.js 和 信号（Signals）。</p><h3 id="node-js-简介" tabindex="-1"><a class="header-anchor" href="#node-js-简介"><span>Node.js 简介</span></a></h3><p>Node.js 是一个让 JavaScript 运行在服务器端的平台。它允许开发者使用 JavaScript 来编写后端代码，这意味着你可以用同一种语言同时开发前端和后端，极大地提高了开发效率。</p><h3 id="信号-signals" tabindex="-1"><a class="header-anchor" href="#信号-signals"><span>信号（Signals）</span></a></h3><p>信号是一种在操作系统中用来通知进程发生特定事件的机制。<code>SIGINT</code>是其中一种信号，通常由用户按下 Ctrl+C 触发，用来请求中断一个程序。不只是 Node.js，绝大多数运行在命令行下的程序都可以通过<code>SIGINT</code>信号来安全地中断执行。</p><h3 id="event-sigint-在-node-js-中的应用" tabindex="-1"><a class="header-anchor" href="#event-sigint-在-node-js-中的应用"><span><code>Event: &#39;SIGINT&#39;</code>在 Node.js 中的应用</span></a></h3><p>在 Node.js 中，<code>readline</code>模块允许你从命令行读取输入。当 Node.js 程序使用<code>readline</code>接口并且正在等待输入时，如果用户按下 Ctrl+C，正常情况下程序会立即退出。但如果你监听了<code>&#39;SIGINT&#39;</code>事件，就可以自定义当这个信号发生时的行为，而不是直接退出程序。这为处理清理工作、询问用户是否真的想退出或其他自定义逻辑提供了可能。</p><h4 id="示例-1-询问用户是否确定要退出" tabindex="-1"><a class="header-anchor" href="#示例-1-询问用户是否确定要退出"><span>示例 1：询问用户是否确定要退出</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建readline接口实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听SIGINT事件</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">SIGINT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">确定要退出吗？(yes/no) </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">match</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">^</span><span style="color:#EBCB8B;">y</span><span style="color:#ECEFF4;">(</span><span style="color:#EBCB8B;">es</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">?$</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">i</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">    else</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">继续操作...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例里，当用户试图通过 Ctrl+C 退出时，我们不会立即结束程序，而是询问用户是否确实希望退出。如果用户回答&quot;yes&quot;，则程序结束；否则，程序不会结束，用户可以继续之前的操作。</p><h4 id="示例-2-进行必要的清理工作后退出" tabindex="-1"><a class="header-anchor" href="#示例-2-进行必要的清理工作后退出"><span>示例 2：进行必要的清理工作后退出</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">SIGINT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">执行清理...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 这里可以放置清理资源的代码，比如关闭文件、数据库连接等</span></span>\n<span class="line"><span style="color:#616E88;">  // 清理完成后退出程序</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">exit</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，当接收到<code>SIGINT</code>信号时，我们打印出“执行清理...”，在这一步你可以加入任何清理资源的代码，比如保存当前状态、关闭打开的文件或数据库连接等，然后手动退出程序。</p><p>通过这样的方式，<code>&#39;SIGINT&#39;</code>事件让 Node.js 程序对用户的中断请求有更细致的控制，提供了优雅退出的可能性，避免了可能的数据丢失或资源泄漏。</p><h3 id="event-sigtstp" tabindex="-1"><a class="header-anchor" href="#event-sigtstp"><span><a href="https://nodejs.org/docs/latest/api/readline.html#event-sigtstp" target="_blank" rel="noopener noreferrer">Event: &#39;SIGTSTP&#39;</a></span></a></h3><p>理解 Node.js 中的<code>Event: &#39;SIGTSTP&#39;</code>之前，我们需要先了解几个概念：Node.js、事件、以及<code>SIGTSTP</code>信号。</p><h3 id="_1-node-js-简介" tabindex="-1"><a class="header-anchor" href="#_1-node-js-简介"><span>1. Node.js 简介</span></a></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。它让你可以在服务器端运行 JavaScript，用于构建各种网络应用。Node.js 非常适合处理高并发的情况，并且拥有丰富的库支持。</p><h3 id="_2-事件驱动模型" tabindex="-1"><a class="header-anchor" href="#_2-事件驱动模型"><span>2. 事件驱动模型</span></a></h3><p>Node.js 采用了事件驱动模型。在这种模式下，监听和响应（触发）事件是非常核心的部分。例如，当一个文件读取完成时，会触发一个事件；当 HTTP 请求到达时，也会触发事件。开发者可以针对这些事件定义相应的处理函数。</p><h3 id="_3-sigtstp-信号" tabindex="-1"><a class="header-anchor" href="#_3-sigtstp-信号"><span>3. SIGTSTP 信号</span></a></h3><p><code>SIGTSTP</code>是一个控制信号，它的作用是暂停进程的执行。在大多数系统中，你可以通过按下<code>Ctrl+Z</code>来发送<code>SIGTSTP</code>信号。这个信号通常用于暂停一个前台进程，并将其放入后台。</p><h3 id="event-sigtstp-在-node-js-中的应用" tabindex="-1"><a class="header-anchor" href="#event-sigtstp-在-node-js-中的应用"><span>Event: &#39;SIGTSTP&#39; 在 Node.js 中的应用</span></a></h3><p>在 Node.js 的<code>readline</code>模块中，<code>Event: &#39;SIGTSTP&#39;</code>是指当<code>SIGTSTP</code>信号被接收时触发的事件。通过监听这个事件，开发者可以在程序收到<code>Ctrl+Z</code>时执行特定的逻辑，比如清理工作或保存状态。</p><h4 id="实际应用例子" tabindex="-1"><a class="header-anchor" href="#实际应用例子"><span>实际应用例子：</span></a></h4><ol><li><strong>命令行工具暂停恢复</strong><br> 假设你正在开发一个 Node.js 命令行工具，用户可能因为某些原因需要暂停工具的执行（比如接听电话），然后再恢复。通过监听<code>SIGTSTP</code>信号，你可以在用户按下<code>Ctrl+Z</code>时暂停操作，并在他们准备好继续时恢复。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建readline.Interface的实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听SIGTSTP事件</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">SIGTSTP</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 当用户按下Ctrl+Z时，执行的逻辑</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">暂停中...按下 Ctrl+C 结束程序，或使用 fg 命令恢复.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 这里可以添加暂停前需要执行的代码，比如资源的释放、状态的保存</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>交互式命令行应用的暂停提示</strong><br> 如果你的 Node.js 应用是一个交互式的命令行应用，当用户想要暂时从应用中&quot;退出&quot;，去做一些别的事情，但又不想完全结束程序时，可以给出友好的提示。</li></ol><p>以上两个例子展示了如何在接收到<code>SIGTSTP</code>信号时给用户反馈或者执行一些清理、保存操作，增强了程序的交互性和用户体验。</p><h3 id="rl-close" tabindex="-1"><a class="header-anchor" href="#rl-close"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlclose" target="_blank" rel="noopener noreferrer">rl.close()</a></span></a></h3><p>Node.js 的 <code>rl.close()</code> 方法是用于关闭 <code>readline.Interface</code> 实例的方法。这个实例主要用于从可读流（如 process.stdin）读取数据，每次一行。当你调用 <code>rl.close()</code> 方法时，它会停止 readline 接口监听输入流，如果配置了监听 <code>&#39;close&#39;</code> 事件的处理函数，则该事件会被触发。</p><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h3><p>在 Node.js 中，<code>readline</code> 模块提供了一个接口用于逐行读取数据流（比如控制台输入）。这对于创建命令行应用来说非常有用，因为你可以提示用户输入，然后按行处理这些输入。但是，当你不再需要更多输入时，你会想要关闭这个接口以避免资源泄露或者让你的程序能够优雅地退出。这就是 <code>rl.close()</code> 发挥作用的地方。</p><h3 id="实际应用示例-1" tabindex="-1"><a class="header-anchor" href="#实际应用示例-1"><span>实际应用示例</span></a></h3><h4 id="示例-1-基本使用" tabindex="-1"><a class="header-anchor" href="#示例-1-基本使用"><span>示例 1：基本使用</span></a></h4><p>假设你正在编写一个简单的命令行程序，要求用户输入他们的名字，然后打印出一个欢迎信息。一旦用户输入他们的名字，你就不需要继续获取输入，因此可以关闭 readline 接口。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提示用户输入名字</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不需要更多输入，关闭 readline 接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-2-监听-close-事件" tabindex="-1"><a class="header-anchor" href="#示例-2-监听-close-事件"><span>示例 2：监听 <code>close</code> 事件</span></a></h4><p>你可能想知道何时 readline 接口被关闭，特别是如果你需要在关闭接口后执行一些清理工作或者显示一条消息。这可以通过监听 <code>close</code> 事件来实现。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Goodbye!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Press any key to exit...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 用户输入后，关闭 readline 接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，当用户输入任何内容后，<code>readline</code> 接口将关闭，随即触发 <code>&#39;close&#39;</code> 事件，并显示 &quot;Goodbye!&quot; 消息。</p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h3><p><code>rl.close()</code> 方法是 <code>readline.Interface</code> 的一个重要部分，它让你能够在适当的时候终止输入监听，这对于管理资源和保证 Node.js 程序的正确退出非常关键。通过实际的示例，我们可以看到它在构建交互式命令行应用中的实用性。</p><h3 id="rl-pause" tabindex="-1"><a class="header-anchor" href="#rl-pause"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlpause" target="_blank" rel="noopener noreferrer">rl.pause()</a></span></a></h3><p>Node.js 中的 <code>rl.pause()</code> 方法是 <code>readline</code> 模块的一部分，用于暂停读取输入流。首先，让我们了解一下它的基本概念和工作原理。</p><h3 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1"><span>基本概念</span></a></h3><p>在 Node.js 中，<code>readline</code> 模块提供了一种接口，可以逐行地（line-by-line）读取数据（比如从用户输入或任何可读流中）。这对于需要从命令行读取用户输入或处理大型文本文件等场景非常有用。</p><h3 id="rl-pause-方法" tabindex="-1"><a class="header-anchor" href="#rl-pause-方法"><span>rl.pause() 方法</span></a></h3><p>当你调用 <code>rl.pause()</code> 方法时，它会立即停止触发 &#39;line&#39; 事件，从而暂停读取新的行，直到再次调用 <code>rl.resume()</code> 方法。简单来说，<code>rl.pause()</code> 让你可以控制何时开始和停止读取数据。</p><h3 id="实际运用示例-4" tabindex="-1"><a class="header-anchor" href="#实际运用示例-4"><span>实际运用示例</span></a></h3><ol><li><p><strong>命令行工具</strong>：假设你正在开发一个命令行应用程序，需要让用户输入一些信息。如果在某个点上，你需要将用户的注意力转移到某些其他输出上（例如显示帮助信息、错误提示等），那么你可以使用 <code>rl.pause()</code> 暂停读取用户输入，待输出完成后，再使用 <code>rl.resume()</code> 继续读取。</p></li><li><p><strong>处理大型文件</strong>：在处理大型文件时（例如日志分析），你可能需要在读取一定量的数据进行处理之后暂停，以避免内存使用过高。此时，你可以在每次处理完一部分数据后调用 <code>rl.pause()</code>，然后在异步操作（如写入数据库）完成之后再调用 <code>rl.resume()</code> 继续读取。</p></li></ol><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><p>下面是一个简单的 Node.js 脚本示例，演示了如何使用 <code>rl.pause()</code> 和 <code>rl.resume()</code> 来控制输入流的读取：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">接收到：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pause</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 暂停读取</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">  setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 假设这里是处理输入的异步操作</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">异步操作完成</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resume</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 完成后继续读取</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span><span style="color:#B48EAD;"> 2000</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入一些文本：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，每当用户输入一行文本，程序都会打印出该文本，并暂停读取更多输入。接着，在模拟的异步操作（这里是一个 <code>setTimeout</code>）完成后，程序会自动恢复读取。</p><p>通过这样的机制，<code>rl.pause()</code> 和 <code>rl.resume()</code> 提供了一个强大的方法来精确控制数据的流动性，特别是在需要根据不同条件动态地开始和停止数据处理的情况下。</p><h3 id="rl-prompt-preservecursor" tabindex="-1"><a class="header-anchor" href="#rl-prompt-preservecursor"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlpromptpreservecursor" target="_blank" rel="noopener noreferrer">rl.prompt([preserveCursor])</a></span></a></h3><p>Node.js 的 <code>readline</code> 模块提供了一种接口，用于从可读流（例如 <code>process.stdin</code>，即标准输入）中逐行地读取数据。这个模块非常适合需要与用户进行交互的命令行程序。</p><p>在 <code>readline</code> 中，<code>rl.prompt([preserveCursor])</code> 是一个非常实用的函数，它向用户显示提示符，并等待用户输入。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><ul><li><code>preserveCursor</code> （可选）: 这是一个布尔值参数，默认为 <code>false</code>。当设置为 <code>true</code>时，它会保持光标在当前位置，而不是将光标移动到下一行的开始位置。</li></ul><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><p>当调用 <code>rl.prompt()</code> 时，它会在终端显示一个提示符，通常是一个字符，比如 &gt; 或 <code>$</code>，来提示用户输入信息。用户输入的文本将被发送到程序以供进一步处理。</p><h3 id="实际运用的例子" tabindex="-1"><a class="header-anchor" href="#实际运用的例子"><span>实际运用的例子</span></a></h3><p>假设我们正在制作一个简单的命令行程序，该程序要求用户输入他们的姓名，然后程序会回应打招呼，如 &quot;Hello, [用户名]!&quot;。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入 readline 模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;"> // 标准输入</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#616E88;"> // 标准输出</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提示用户输入姓名</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭 readline 接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，虽然没有直接使用 <code>rl.prompt()</code>，但 <code>rl.question()</code> 方法展示了如何从用户那里获得输入。如果你希望在循环中不断请求用户输入，而且每次都显示相同或不同的提示符，那么 <code>rl.prompt()</code> 就非常有用：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 设置 prompt 提示符</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setPrompt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入你的名字: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">收到: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 如果用户想退出，可以输入 &#39;exit&#39;</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toLowerCase</span><span style="color:#D8DEE9FF;">() </span><span style="color:#81A1C1;">===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 再次显示提示符，等待下一次输入</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">再见!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">exit</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，每次用户输入后按下回车，程序都会响应用户的输入。如果用户输入 &quot;exit&quot;，则程序会结束。注意到，每次处理完用户的输入后，我们都调用了 <code>rl.prompt()</code> 来重新显示提示符，等待下一次的用户输入。</p><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h3><p><code>rl.prompt([preserveCursor])</code> 是 Node.js <code>readline</code> 模块中一个用于显示提示符和等待用户输入的便捷函数。通过设置 <code>preserveCursor</code> 参数，开发者可以控制光标的行为，使得用户界面更加友好。在开发需要与用户交云的命令行应用程序时，这个功能尤其有用。</p><h3 id="rl-resume" tabindex="-1"><a class="header-anchor" href="#rl-resume"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlresume" target="_blank" rel="noopener noreferrer">rl.resume()</a></span></a></h3><p>理解 <code>rl.resume()</code> 方法之前，我们需要先了解 Node.js 中的 <code>readline</code> 模块。<code>readline</code> 是 Node.js 的一个核心模块，用于逐行读取流（如从命令行输入）。这对构建交互式命令行应用程序非常有用。</p><h3 id="rl-resume-简介" tabindex="-1"><a class="header-anchor" href="#rl-resume-简介"><span><code>rl.resume()</code> 简介</span></a></h3><p>在 Node.js 的 <code>readline</code> 模块中，<code>rl.resume()</code> 方法用来恢复 <code>input</code> 流的接收，即继续监听输入流的数据。这通常在你之前暂停了流（使用 <code>rl.pause()</code>）并且想要再次开始接收数据时使用。</p><h3 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h3><p>想象一下，你正在开发一个命令行工具，该工具需要用户提供一些输入。当用户输入一些信息后，你可能出于某种原因（例如等待某个异步操作完成）需要暂停接收进一步的输入。一旦你准备好再次接受输入，就可以使用 <code>rl.resume()</code> 方法。</p><h4 id="示例-1-简单问答程序" tabindex="-1"><a class="header-anchor" href="#示例-1-简单问答程序"><span>示例 1：简单问答程序</span></a></h4><p>假设你正在创建一个简单的问答程序，用户输入问题，程序暂停接收输入以&quot;思考&quot;（实际上是模拟异步操作，比如网络请求），然后程序准备好接收下一个问题时，再恢复输入。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 接口</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">欢迎 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 暂时不再接收更多问题</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pause</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 假装我们在“思考”</span></span>\n<span class="line"><span style="color:#88C0D0;">  setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">我又回来了，可以继续问问题了！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">    // 准备接收新的输入</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resume</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你的下一个问题是什么？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">question</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">谢谢你的问题：“</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">question</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">”</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">      // 关闭 readline 接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">      rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span><span style="color:#B48EAD;"> 5000</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 5秒后恢复</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-2-控制输入流" tabindex="-1"><a class="header-anchor" href="#示例-2-控制输入流"><span>示例 2：控制输入流</span></a></h4><p>你也可以通过暂停和恢复机制来控制输入流的速度，防止因快速连续输入而错过关键信息。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>通过以上例子，我们看到 <code>rl.resume()</code> 方法在需要重新开始听取用户输入的情形下非常有用。它允许开发者有更细粒度的控制权，特别是在涉及到需要暂时处理其他事务的交互式命令行应用程序中。Node.js 的 <code>readline</code> 模块提供了构建这类应用所需的灵活性和控制能力。</p><h3 id="rl-setprompt-prompt" tabindex="-1"><a class="header-anchor" href="#rl-setprompt-prompt"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlsetpromptprompt" target="_blank" rel="noopener noreferrer">rl.setPrompt(prompt)</a></span></a></h3><p>在 Node.js 中，<code>readline</code>模块提供了一种方式来读取用户在命令行界面（CLI）输入的数据。这是通过逐行读取输入实现的。想象你正在创建一个 CLI 程序，比如一个简单的问答游戏或者一个需要从用户那里获取输入的工具，<code>readline</code>就非常有用。</p><h3 id="rl-setprompt-prompt-1" tabindex="-1"><a class="header-anchor" href="#rl-setprompt-prompt-1"><span><code>rl.setPrompt(prompt)</code></span></a></h3><p>首先，让我们理解一下<code>rl.setPrompt(prompt)</code>方法。这个方法是<code>readline.Interface</code>类的一部分，它允许你设置每当等待用户输入时所显示的提示符。参数<code>prompt</code>就是你希望展示给用户的字符串，引导他们进行下一步的操作。</p><h4 id="参数解释" tabindex="-1"><a class="header-anchor" href="#参数解释"><span>参数解释：</span></a></h4><ul><li><code>prompt</code>：这是一个字符串，表示你想要显示给用户看的指引信息或者问题，提示他们输入数据。</li></ul><h4 id="使用例子" tabindex="-1"><a class="header-anchor" href="#使用例子"><span>使用例子：</span></a></h4><p>假设你正在编写一个 CLI 工具，目的是询问用户他们最喜欢的编程语言，并记录下来。</p><ol><li><p><strong>初始化 readline 和设置提示符</strong></p><p>首先，你需要引入<code>readline</code>模块，并使用<code>readline.createInterface</code>方法创建一个<code>readline.Interface</code>的实例。之后，你可以使用<code>rl.setPrompt(prompt)</code>方法设置你的提示符。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 设置提示符</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setPrompt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你最喜爱的编程语言是什么？ </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>提示用户并处理输入</strong></p><p>接下来，使用<code>rl.prompt()</code>方法显示提示符给用户，并等待他们的输入。当用户输入数据并按下回车键后，可以通过监听<code>&#39;line&#39;</code>事件来处理用户的输入。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">收到：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不要忘记关闭！</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>rl.prompt()</code>会展示：&quot;你最喜爱的编程语言是什么？&quot;，然后用户可以输入答案。用户的输入将被传递给<code>&#39;line&#39;</code>事件的回调函数，并打印出来。</p></li><li><p><strong>结束读取操作</strong></p><p>一旦获取了所需的输入，你应该调用<code>rl.close()</code>来关闭<code>readline.Interface</code>实例。这样做会停止<code>readline</code>从输入流读取更多数据，并且允许程序正常结束。</p></li></ol><h4 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span>总结：</span></a></h4><p>通过使用<code>rl.setPrompt(prompt)</code>，你能够为用户提供明确的指引，告诉他们应该输入什么样的信息。结合<code>rl.prompt()</code>和事件监听器，你可以创建交互式的 CLI 应用，有效地从用户那里获取并处理输入数据。</p><h3 id="rl-getprompt" tabindex="-1"><a class="header-anchor" href="#rl-getprompt"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlgetprompt" target="_blank" rel="noopener noreferrer">rl.getPrompt()</a></span></a></h3><p>Node.js 是一个运行在服务器端的 JavaScript 环境，使得开发者可以用 JavaScript 编写服务器端的代码。在 Node.js 中，有很多内置模块提供丰富的功能，而 <code>readline</code> 就是其中之一。<code>readline</code> 模块主要用于从可读流（如 process.stdin）一行一行地读取数据。这对于创建命令行应用程序非常有用。</p><h3 id="rl-getprompt-1" tabindex="-1"><a class="header-anchor" href="#rl-getprompt-1"><span>rl.getPrompt()</span></a></h3><p>在 Node.js 的 <code>readline</code> 模块中，<code>rl.getPrompt()</code> 是一个方法，其作用是获取当前 readline 实例使用的提示符（prompt）。当你创建一个 readline 接口并设置了提示信息，<code>rl.getPrompt()</code> 允许你获取或查看这个设置的提示信息是什么。</p><p><strong>实际运用例子</strong></p><p>想象一下，你正在创建一个命令行工具，比如一个简单的问答应用。你希望用户输入他们的名字，然后回答几个问题。在这个过程中，你可能会设置不同的提示符来引导用户进行下一步操作。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入 readline 模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 的接口</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 设置和获取提示符的例子</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setPrompt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入您的名字：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 设置提示符为 &quot;请输入您的名字：&quot;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getPrompt</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 打印当前设置的提示符，结果是 &quot;请输入您的名字：&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提问并等待用户回答</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getPrompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 更改提示符并再次提问</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setPrompt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你今年多大了？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getPrompt</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 查看修改后的提示符</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getPrompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">age</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">哦，所以你今年 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">age</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> 岁。</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">    // 关闭 readline 接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例代码中，我们首先引入了 <code>readline</code> 模块并创建了一个 readline 接口。接着，我们通过 <code>rl.setPrompt()</code> 方法设置了一个提示符，并用 <code>rl.getPrompt()</code> 来获取并打印这个提示符，确认它被正确设置。我们使用了 <code>rl.question()</code> 方法来向用户展示这个提示符并等待他们的输入。之后，我们更改了提示符来询问用户另一个问题，并再次使用 <code>rl.getPrompt()</code> 来获取并确认新的提示符。</p><p>通过这种方式，<code>rl.getPrompt()</code> 方法帮助我们管理和确认在命令行界面中给用户的提示信息，确保交互逻辑清晰与用户友好。</p><h3 id="rl-write-data-key" tabindex="-1"><a class="header-anchor" href="#rl-write-data-key"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlwritedata-key" target="_blank" rel="noopener noreferrer">rl.write(data[, key])</a></span></a></h3><p>当我们谈论 Node.js 中的 <code>rl.write(data[, key])</code> 函数，我们实际上是在讨论 readline 模块中的一个特定方法。这个模块主要用于处理从命令行接收的输入。在 Node.js 中，readline 模块提供了一种异步的方式读取数据，比如用户在命令行中的输入。这对于创建命令行界面（CLI）应用程序非常有用。</p><h3 id="rl-write-data-key-1" tabindex="-1"><a class="header-anchor" href="#rl-write-data-key-1"><span>rl.write(data[, key])</span></a></h3><p>在详细解释之前，先了解一下它的基本构成：</p><ul><li><code>data</code> 参数是你想要写入到输出流的字符串或者缓冲（Buffer）。简单来说，就是你想显示在命令行中的内容。</li><li><code>key</code> 参数是一个对象，它模拟终端中的按键输入。这个参数是可选的，允许你指定用户“按下”的特定键，比如 <code>{ ctrl: true, name: &#39;u&#39; }</code> 将会模拟 Ctrl+U 的键盘组合。</li></ul><p><code>rl.write()</code> 方法的通常用途包括但不限于：</p><ol><li><p><strong>预填命令行输入</strong>：如果你想在命令行提示用户输入之前自动填充一些文字，可以使用 <code>rl.write()</code> 来实现。这对于给用户提供默认值或格式模板非常有帮助。</p></li><li><p><strong>控制字符输入</strong>：通过传递 <code>key</code> 对象参数，你可以模拟特殊按键的输入。这可以用于控制文本的编辑，例如删除光标前的字符或导航光标位置。</p></li><li><p><strong>创建更交互性的 CLI 应用</strong>：结合其他 readline 方法，<code>rl.write()</code> 可以帮助你创建一个交互性更强的命令行界面，比如实时搜索过滤、多次输入处理等。</p></li></ol><h3 id="实践例子" tabindex="-1"><a class="header-anchor" href="#实践例子"><span>实践例子</span></a></h3><h4 id="预填命令行输入" tabindex="-1"><a class="header-anchor" href="#预填命令行输入"><span>预填命令行输入</span></a></h4><p>想象一下，你正在创建一个 CLI 工具来询问用户他们的名字。使用 <code>rl.write()</code>，你可以预设一个示例名字，作为填写指导：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 接口实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提示用户输入他们的名字</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Nice to meet you, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 在用户开始键入之前预填 &quot;John Doe&quot;</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">John Doe</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="控制字符输入" tabindex="-1"><a class="header-anchor" href="#控制字符输入"><span>控制字符输入</span></a></h4><p>这个例子模拟用户按下了 Backspace 键，用于删除已有的输入：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Enter a word: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">You entered: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设用户开始键入，但我们想模拟删除操作</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 模拟按下 Backspace，删除最后一个字符</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">null</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> ctrl</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">h</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在实践中，模拟按键（如在第二个例子中的 Backspace）可能需要根据你的环境和目标进行调整，因为不同的系统和命令行工具可能会以不同的方式解释这些按键。</p><p>总之，<code>rl.write()</code> 是一个非常灵活的方法，它能够使你的 Node.js CLI 应用更加动态和用户友好。通过直接向命令行写入数据或模拟按键输入，你可以创建出更加丰富和交互性的用户体验。</p><h3 id="rlsymbol-asynciterator-https-nodejs-org-docs-latest-api-readline-html-rlsymbolasynciterator" tabindex="-1"><a class="header-anchor" href="#rlsymbol-asynciterator-https-nodejs-org-docs-latest-api-readline-html-rlsymbolasynciterator"><span>[rl<a href="">Symbol.asyncIterator</a>](<a href="https://nodejs.org/docs/latest/api/readline.html#rlsymbolasynciterator" target="_blank" rel="noopener noreferrer">https://nodejs.org/docs/latest/api/readline.html#rlsymbolasynciterator</a>)</span></a></h3><p>当然，我很乐意帮你理解 Node.js 中的 <code>rl[Symbol.asyncIterator]()</code>。</p><p>首先，我们需要分别了解几个概念：<code>readline</code>、<code>Symbol.asyncIterator</code> 和如何在 Node.js 中使用它们。</p><h3 id="readline-模块" tabindex="-1"><a class="header-anchor" href="#readline-模块"><span>readline 模块</span></a></h3><p>在 Node.js 中，<code>readline</code> 是一个内置模块，用于逐行读取一个流（比如来自文件或标准输入 <code>stdin</code>）。这在处理大量数据或等待用户输入时非常有用，因为它允许程序一次只处理一行，而不是一次性读取整个文件到内存中。</p><h3 id="symbol-asynciterator" tabindex="-1"><a class="header-anchor" href="#symbol-asynciterator"><span>Symbol.asyncIterator</span></a></h3><p><code>Symbol.asyncIterator</code> 是 JavaScript 的一个特殊值，它定义了对象的默认异步迭代器。如果一个对象实现了这个属性，那么它就可以被 <code>for-await-of</code> 循环异步迭代。简单来说，这允许你以异步的方式遍历（例如从网络请求或文件读取）返回数据的对象，使每次迭代都可以等待异步操作完成。</p><p>结合起来解释 <code>rl[Symbol.asyncIterator]()</code>：</p><p>在 Node.js v21.7.1 版本中，<code>readline.Interface</code> 实例（通常通过调用 <code>readline.createInterface()</code> 创建）提供了一个 <code>[Symbol.asyncIterator]()</code> 方法。这意味着你可以在异步循环中逐行读取输入流，每次循环都会等待下一行变得可用。</p><h3 id="实际应用示例-2" tabindex="-1"><a class="header-anchor" href="#实际应用示例-2"><span>实际应用示例</span></a></h3><p>想象一个场景，你正在编写一个命令行程序，需要用户输入多项数据。使用 <code>rl[Symbol.asyncIterator]()</code> 将非常便利，因为你可以逐行异步地读取用户输入，而不会阻塞程序的其他部分。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> processLineByLine</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 使用 process.stdin 创建接口实例，这里 stdin 作为输入流</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">    output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">请输入一些文本，按回车继续，输入 &quot;exit&quot; 退出：</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> line</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> rl</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#616E88;">    // 这里使用 for-await-of 循环逐行读取</span></span>\n<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#616E88;">      // 如果用户输入 exit，则退出循环</span></span>\n<span class="line"><span style="color:#D8DEE9;">      rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不要忘记关闭 readline 接口</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">您输入了: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 处理用户的输入</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">processLineByLine</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>processLineByLine</code> 函数逐行读取来自 <code>stdin</code> 的输入，并使用 <code>console.log</code> 打印出每一行。用户输入 <code>exit</code> 时结束输入。这是一个简单但实用的模式，适用于需要从用户处连续收集信息的命令行应用。</p><p>总结一下，<code>rl[Symbol.asyncIterator]()</code> 提供了一种优雅的方式来异步逐行处理输入流，非常适合涉及用户交互或逐行处理数据的 Node.js 应用程序。</p><h3 id="rl-line" tabindex="-1"><a class="header-anchor" href="#rl-line"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlline" target="_blank" rel="noopener noreferrer">rl.line</a></span></a></h3><p>Node.js 的<code>readline</code>模块提供了一种接口方法，用于从可读流（如<code>process.stdin</code>）逐行读取数据。这在构建命令行应用程序时非常有用，因为它允许你以交互方式从用户那里获取输入。</p><p>在 Node.js v21.7.1 文档中，<code>rl.line</code>是<code>readline.Interface</code>类的一个属性。这个属性表示当前正在处理的行的内容。当你使用<code>readline</code>模块监听<code>line</code>事件时，每次用户输入一行并按下回车键，<code>line</code>事件就会被触发，而<code>rl.line</code>则包含了这一行的文本内容。</p><h3 id="如何使用-rl-line" tabindex="-1"><a class="header-anchor" href="#如何使用-rl-line"><span>如何使用 <code>rl.line</code></span></a></h3><p>首先，你需要了解如何创建一个<code>readline.Interface</code>实例。这通常涉及到引入<code>readline</code>模块，并调用<code>readline.createInterface()</code>方法，指定输入和输出流。比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你可以通过监听<code>line</code>事件来捕获和处理用户输入的每一行：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">收到: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当用户输入一行文本并按下回车时，将触发<code>line</code>事件，回调函数会被执行，并且变量<code>input</code>包含了用户输入的内容，这与<code>rl.line</code>的值等价。</p><h3 id="实际运用示例-5" tabindex="-1"><a class="header-anchor" href="#实际运用示例-5"><span>实际运用示例：</span></a></h3><ol><li><p><strong>制作一个简单的命令行问答应用</strong></p><p>假设我们想制作一个小程序，询问用户他们最喜欢的编程语言，并打印出来。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你最喜欢的编程语言是什么？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">哦，你的最爱是：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建一个简单的命令行计算器</strong></p><p>下面这个例子展示了如何获取用户输入来进行简单的数学运算。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入数字1：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">num1</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入数字2：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">num2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> sum</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> parseInt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">num1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span><span style="color:#88C0D0;"> parseInt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">num2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">结果是：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">sum</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在这些示例中，<code>rl.line</code>会与在<code>line</code>事件回调函数中接收到的输入（即<code>input</code>参数）相对应。然而，在直接的代码操作中，我们通常不直接访问<code>rl.line</code>，而是通过事件回调来处理用户的输入数据。</p><p>这些例子展示了<code>readline</code>模块在构建命令行工具和应用时的强大功能，尤其是在需要与用户进行交互时。</p><h3 id="rl-cursor" tabindex="-1"><a class="header-anchor" href="#rl-cursor"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlcursor" target="_blank" rel="noopener noreferrer">rl.cursor</a></span></a></h3><p>在 Node.js 中，<code>readline</code>模块提供了一套用于处理可读流（如<code>process.stdin</code>）上的一行输入的工具，其中<code>rl.cursor</code>是<code>readline</code>接口的一个属性，用于获取或设置当前光标在输入行中的位置。</p><p>这里是如何理解<code>rl.cursor</code>的关键点：</p><ol><li><p><strong>位置计数方式</strong>：<code>rl.cursor</code>的值是一个整数，表示光标在当前输入行中的位置。计数从 0 开始，也就是说，如果光标在行的开头，<code>rl.cursor</code>的值为 0。</p></li><li><p><strong>实际应用</strong>：这个属性可以在你编写与命令行交互的程序时，对用户的输入进行更细致的控制和处理。比如，你可能需要根据光标的位置插入文本，或者删除从光标位置到行尾的文本等。</p></li></ol><h3 id="实际运用示例-6" tabindex="-1"><a class="header-anchor" href="#实际运用示例-6"><span>实际运用示例：</span></a></h3><p>假设你正在编写一个命令行工具，需要用户输入一些数据，然后在用户打字时动态地给出建议或自动完成。</p><ol><li><p><strong>动态提示</strong>：你可以监控<code>rl.cursor</code>的值，当用户输入数据时，基于光标的当前位置给出提示。比如，用户输入日期，当他们输入年份并且开始输入月份时，你可以根据已输入的年份和月份的位置给出合适的月份建议。</p></li><li><p><strong>自动完成</strong>：在用户输入命令的过程中，你可以使用<code>rl.cursor</code>来决定何时触发自动完成。例如，当用户输入一个长命令的一部分并停下来时，你可以根据光标的位置来推断他们可能想输入的下一部分，并自动完成它。</p></li><li><p><strong>错误修正</strong>：如果用户在输入一串命令或数据时犯了错误，你可以利用<code>rl.cursor</code>来帮助他们快速定位到错误的位置，并提供修改建议。</p></li></ol><p>总之，<code>rl.cursor</code>在创建交云动态和响应式的命令行应用时非常有用，它让你能够根据用户的输入动态地调整程序的行为，提高用户体验。</p><h3 id="rl-getcursorpos" tabindex="-1"><a class="header-anchor" href="#rl-getcursorpos"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlgetcursorpos" target="_blank" rel="noopener noreferrer">rl.getCursorPos()</a></span></a></h3><p>当你开始使用 Node.js，一个常见的场景是处理用户输入，这时候<code>readline</code>模块就派上了用场。它能够帮你从命令行接收用户输入，并以适合的方式进行处理。今天，我们要谈论的是<code>rl.getCursorPos()</code>这个特定的方法。</p><h3 id="基本解释" tabindex="-1"><a class="header-anchor" href="#基本解释"><span>基本解释</span></a></h3><p>首先，让我们明白什么是光标位置。假设你正在使用文本编辑器编写代码或文档，你在屏幕上看到的闪烁的小线（通常是竖线），指示你现在可以输入或删除字符的位置，那个就是光标。光标位置通常由两个坐标表示：一是行数（垂直位置），二是列数（水平位置）。</p><p>在 Node.js 的<code>readline</code>模块中，<code>rl.getCursorPos()</code>方法正是用来获取当前光标在命令行界面中的位置。这对于创建更复杂、交互式的命令行应用程序非常有用，比如需要根据光标位置动态修改内容的情况。</p><h3 id="实际用法" tabindex="-1"><a class="header-anchor" href="#实际用法"><span>实际用法</span></a></h3><p>举几个实际运用的例子：</p><ol><li><p><strong>创建动态表单</strong>：<br> 假设你正在开发一个命令行工具，需要用户填写表单。用户可以在不同的输入字段间自由跳转（使用方向键）。在这种情况下，知道光标的当前位置很重要，因为它决定了用户输入应该填入哪个字段。</p></li><li><p><strong>实现文本编辑器</strong>：<br> 如果你想在命令行中开发一个简单的文本编辑器，那么追踪光标的位置是基础功能之一。你需要知道用户在什么位置添加或删除字符，还可能需要在用户按下特定快捷键时移动光标。</p></li><li><p><strong>游戏开发</strong>：<br> 在开发简单的命令行游戏，比如老式的文字冒险游戏时，光标位置可以被用来在特定位置显示游戏状态信息，或者更新已经打印到命令行界面上的文本。</p></li></ol><h3 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1"><span>示例代码</span></a></h3><p>虽然 Node.js v21.7.1 的文档提供了关于 API 的定义，但没有直接的例子，让我来给你构造一个简单的例子来演示<code>rl.getCursorPos()</code>的用法。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设我们要提示用户输入一些文本</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请随便输入一些文本，然后按Enter：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 当用户输入文本并按下回车键后，我们获取并显示光标的位置</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> cursorPos</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getCursorPos</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span></span>\n<span class="line"><span style="color:#ECEFF4;">    `</span><span style="color:#A3BE8C;">Your cursor was at line: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">cursorPos</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">rows</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">, column: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">cursorPos</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">cols</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  )</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不要忘记关闭！</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码首先设置了一个<code>readline</code>接口，等待用户输入。当用户输入文本并按下回车键时，事件监听器会触发，并使用<code>rl.getCursorPos()</code>获取当前光标的位置，然后将其打印出来。注意：由于<code>readline</code>模块的设计和终端行为的差异，“行”和“列”值可能与预期不完全相符，特别是在处理多行输入或特殊字符时。</p><p>希望这有助于你理解<code>rl.getCursorPos()</code>的作用及其潜在的应用场景！</p><h2 id="promises-api" tabindex="-1"><a class="header-anchor" href="#promises-api"><span><a href="https://nodejs.org/docs/latest/api/readline.html#promises-api" target="_blank" rel="noopener noreferrer">Promises API</a></span></a></h2><p>Node.js 是一个非常强大的 JavaScript 运行环境，它允许你使用 JavaScript 来编写服务器端代码。在 Node.js 中，有一个模块叫做 <code>readline</code>，它主要用于从可读流（比如 <code>process.stdin</code>，也就是标准输入）读取数据，并按行(line-by-line)处理这些数据。这在创建命令行工具时非常有用。</p><p>从 Node.js v17.0.0 开始，<code>readline</code> 模块提供了基于 Promise 的 API，即 <code>readline/promises</code>。这意味着你现在可以使用异步函数（async function）和等待（await）来以更直观、更易于管理的方式处理输入输出操作，而不再需要依赖回调函数。</p><h3 id="为什么使用-promises-api" tabindex="-1"><a class="header-anchor" href="#为什么使用-promises-api"><span>为什么使用 Promises API？</span></a></h3><ul><li><strong>代码更简洁、更易读：</strong> 使用 Promises 和 async/await 可以使你的代码更加简洁，减少回调地狱（callback hell）的问题。</li><li><strong>错误处理更加容易：</strong> 使用 async/await，你可以像处理同步代码一样来处理异步代码中的错误。</li><li><strong>更好的控制流程：</strong> Promises 提供了更灵活的方式来控制异步任务的执行顺序。</li></ul><h3 id="如何使用-readline-的-promises-api" tabindex="-1"><a class="header-anchor" href="#如何使用-readline-的-promises-api"><span>如何使用 readline 的 Promises API</span></a></h3><p>以下是使用 <code>readline/promises</code> API 的一个简单示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 导入 readline/promises 模块和 process 标准输入输出对象</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#8FBCBB;"> readline</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">readline/promises</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> stdin</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> stdout</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">process</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> main</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 使用 question 方法提示用户输入并等待用户的回答</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">//Tamakkuvik Ying Chao Tea-mit. Atorunnginnaviuk tunisassiornernut.</span></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭 readline.Interface 实例！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">main</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先导入了所需的模块。然后，我们创建了一个 <code>readline.Interface</code> 实例，这个实例可以读取来自 <code>stdin</code> 的数据并将输出写入 <code>stdout</code>。通过 <code>rl.question</code> 方法我们提示用户输入名字，该方法返回一个 Promise，这意味着我们可以在其前面使用 <code>await</code> 来等待用户的响应。最后，获取到用户的输入后我们输出一条欢迎消息，并且记得关闭 <code>readline.Interface</code> 实例。</p><h3 id="实际应用场景-1" tabindex="-1"><a class="header-anchor" href="#实际应用场景-1"><span>实际应用场景</span></a></h3><ol><li><p><strong>创建命令行工具：</strong> 如果你正在开发 CLI（Command-Line Interface 命令行界面）应用，比如一个脚本来管理项目任务或者自动化构建过程，那么 <code>readline</code> 模块将非常有用。</p></li><li><p><strong>简单的交互式应用：</strong> 例如制作一个小游戏、问卷调查或是任何需要用户输入信息的程序。</p></li><li><p><strong>接受用户的配置信息：</strong> 在启动服务之前，可能需要向用户询问一些配置选项，例如数据库连接信息、应用首选项等。</p></li></ol><p>总的来说，<code>readline/promises</code> API 为处理 Node.js 中的行读取提供了一个更现代、更易于理解和维护的方法。希望这能帮助你更好地理解和利用这个功能！</p><h3 id="class-readlinepromises-interface" tabindex="-1"><a class="header-anchor" href="#class-readlinepromises-interface"><span><a href="https://nodejs.org/docs/latest/api/readline.html#class-readlinepromisesinterface" target="_blank" rel="noopener noreferrer">Class: readlinePromises.Interface</a></span></a></h3><p>Node.js v21.7.1 中提到的 <code>readlinePromises.Interface</code> 是 Node.js 的一个非常有用的模块，尤其适合于需要读取用户输入的脚本。在了解它之前，我们先简单回顾一下 Node.js 和 readline 模块。</p><p>Node.js 是一个基于 Chrome V8 JavaScript 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。一个常见的应用场景是创建 Web 服务器或者处理文件。</p><p>Readline 模块则是 Node.js 中用于读取来自命令行（终端/控制台）的输入的模块。它可以按行读取输入，并且提供了一系列便利的接口。在 Node.js v21.7.1 版本中，<code>readlinePromises</code> 是 readline 模块内的一个子模块，它主要通过 Promise API 来简化异步编程。</p><h3 id="如何使用-readlinepromises-interface" tabindex="-1"><a class="header-anchor" href="#如何使用-readlinepromises-interface"><span>如何使用 <code>readlinePromises.Interface</code></span></a></h3><p>首先，你需要在你的 Node.js 应用程序中引入 <code>readline/promises</code> 模块和 <code>process</code> 标准库：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> createInterface</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">node:readline/promises</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> stdin</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> stdout</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">node:process</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，你可以创建一个 <code>readlinePromises.Interface</code> 的实例，这个实例将会用来处理你的输入和输出流：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在，你可以使用这个实例来读取用户输入，并通过 Promises 来管理异步操作。例如，询问用户姓名并打印出来：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> askName</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">askName</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实际运用的例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-1"><span>实际运用的例子</span></a></h3><h4 id="_1-创建一个简单的命令行问答应用" tabindex="-1"><a class="header-anchor" href="#_1-创建一个简单的命令行问答应用"><span>1. 创建一个简单的命令行问答应用</span></a></h4><p>假设你想创建一个小程序来收集用户的一些基本信息，比如姓名、年龄和爱好。使用 <code>readlinePromises.Interface</code> ，你可以这么做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> createInterface</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">node:readline/promises</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> stdin</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> stdout</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">node:process</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> collectUserInfo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> age</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">How old are you? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> hobby</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your hobby? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span></span>\n<span class="line"><span style="color:#ECEFF4;">    `</span><span style="color:#A3BE8C;">Thank you! Here is what you entered: Name: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">, Age: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">age</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">, Hobby: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">hobby</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  )</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">collectUserInfo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-创建一个简易的命令行计算器" tabindex="-1"><a class="header-anchor" href="#_2-创建一个简易的命令行计算器"><span>2. 创建一个简易的命令行计算器</span></a></h4><p>另一个例子是，你可以使用 <code>readlinePromises.Interface</code> 来创建一个简单的命令行计算器，用户可以输入两个数字然后选择他们希望进行的运算类型（加法、减法等）：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> simpleCalculator</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> num1</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> Number</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Enter the first number: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> num2</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> Number</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Enter the second number: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> operation</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Choose the operation (+, -, *, /): </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  switch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">operation</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;">    case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">+</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">      result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> num1</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> num2</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">      break;</span></span>\n<span class="line"><span style="color:#81A1C1;">    case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">-</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">      result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> num1</span><span style="color:#81A1C1;"> -</span><span style="color:#D8DEE9;"> num2</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">      break;</span></span>\n<span class="line"><span style="color:#81A1C1;">    case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">*</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">      result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> num1</span><span style="color:#81A1C1;"> *</span><span style="color:#D8DEE9;"> num2</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">      break;</span></span>\n<span class="line"><span style="color:#81A1C1;">    case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">      result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> num1</span><span style="color:#81A1C1;"> /</span><span style="color:#D8DEE9;"> num2</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">      break;</span></span>\n<span class="line"><span style="color:#81A1C1;">    default</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Invalid operation!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">      return;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Result: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">result</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">simpleCalculator</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个例子展示了如何使用 <code>readlinePromises.Interface</code> 来从用户那里以友好的方式获取输入，并处理这些输入。通过 async-await 语法，我们能够以更直观、更易于理解的方式编写异步代码，而不必深入回调函数的复杂性。</p><h4 id="rl-question-query-options" tabindex="-1"><a class="header-anchor" href="#rl-question-query-options"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlquestionquery-options" target="_blank" rel="noopener noreferrer">rl.question(query[, options])</a></span></a></h4><p>Node.js 中的 <code>rl.question(query[, options])</code> 方法是在 <code>readline</code> 模块中用于提出一个问题，并等待用户输入答案。这个功能在命令行应用程序中特别有用，它允许你与用户进行交互，获取用户的输入数据。下面我们来详细说明并通过例子理解它的工作原理。</p><h3 id="基础解释" tabindex="-1"><a class="header-anchor" href="#基础解释"><span>基础解释</span></a></h3><ul><li><strong><code>readline</code>模块</strong>：这是 Node.js 提供的一个内置模块，主要用于处理命令行输入和输出。你可以通过它读取输入流（比如<code>process.stdin</code>）中的数据，并逐行输出到输出流（比如<code>process.stdout</code>）。</li><li><strong><code>rl.question(query[, options])</code>方法</strong>：这个方法显示一个提示信息给用户（通常是提问），然后等待用户输入回答。用户输入的答案在输入后会被传递给一个回调函数。</li></ul><h3 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数</span></a></h3><ul><li><strong><code>query</code></strong>: 字符串类型，表示要显示给用户的问题或提示信息。</li><li><strong><code>options</code></strong>: （可选）对象类型，提供了一个可配置的选项，例如设置超时时间或信号以监听用户输入的中断。</li><li><strong>回调函数</strong>: 用户输入答案后执行的函数。该函数接收用户输入的字符串作为参数。</li></ul><h3 id="实际运用例子-2" tabindex="-1"><a class="header-anchor" href="#实际运用例子-2"><span>实际运用例子</span></a></h3><h4 id="例-1-简单的问答程序" tabindex="-1"><a class="header-anchor" href="#例-1-简单的问答程序"><span>例 1：简单的问答程序</span></a></h4><p>假设你在创建一个命令行程序，需要询问用户他们的名字，并根据用户的输入打印一条问候语：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 首先，导入readline模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建readline.Interface实例来监听process.stdin和process.stdout</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用rl.question()提出问题</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？ </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">欢迎 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭Interface实例！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例-2-使用选项参数进行超时设置" tabindex="-1"><a class="header-anchor" href="#例-2-使用选项参数进行超时设置"><span>例 2：使用选项参数进行超时设置</span></a></h4><p>Node.js v17.7.0 引入了对 <code>options</code> 参数的支持，使得 <code>rl.question()</code> 方法能够接受一个包含超时设置的选项对象。这样你就可以设置一个超时时间，如果用户在指定时间内没有响应，那么程序可以自动执行后续操作：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 导入readline模块和events模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> once</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">events</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> askQuestion</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">query</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">    output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 使用Promise以及once从events模块来等待用户输入或超时</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">query</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">感谢您的回答！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#88C0D0;"> once</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 等待用户输入</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">askQuestion</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你最喜欢的编程语言是什么？ </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：以上代码并未直接展示如何使用超时选项，因为在 Node.js 的最新稳定版本中（截至本文撰写之时），<code>rl.question()</code> 的 <code>options</code> 参数并不直接支持超时。但你可以通过其他方式结合使用事件或 Promise 来实现类似功能。</p><h3 id="总结-5" tabindex="-1"><a class="header-anchor" href="#总结-5"><span>总结</span></a></h3><p>通过 <code>rl.question()</code> 方法，你可以在 Node.js 中的命令行应用程序里很方便地与用户进行交互。无论是简单地收集用户信息，还是做更复杂的命令行向导，<code>readline</code> 模块都是一个非常有用的工具。</p><h3 id="class-readlinepromises-readline" tabindex="-1"><a class="header-anchor" href="#class-readlinepromises-readline"><span><a href="https://nodejs.org/docs/latest/api/readline.html#class-readlinepromisesreadline" target="_blank" rel="noopener noreferrer">Class: readlinePromises.Readline</a></span></a></h3><p>在 Node.js 中，<code>readlinePromises.Readline</code> 是一个类，属于 <code>readline</code> 模块的一部分。这个模块主要用于读取输入流（比如用户在终端中的输入）。不同于传统 <code>readline</code> 接口，<code>readlinePromises.Readline</code> 提供了基于 Promise 的接口，使得你可以以更现代和异步的方式来处理输入输出操作。</p><p>首先，让我们简单了解一下什么是 Promise。Promise 是 JavaScript 中的一个对象，代表了某个异步操作的最终完成（或失败）及其结果值。使用 Promise 可以让异步代码更加清晰易懂，避免了所谓“回调地狱”的出现。</p><p>现在，假设你需要编写一个 Node.js 程序，该程序需要从命令行接收用户输入，并对输入进行处理。使用 <code>readlinePromises.Readline</code> 类可以让这个过程变得简单而优雅。</p><h3 id="实践步骤" tabindex="-1"><a class="header-anchor" href="#实践步骤"><span>实践步骤</span></a></h3><ol><li><p><strong>引入模块</strong>：首先，你需要在你的 Node.js 代码中引入 <code>readline/promises</code> 模块和 <code>process</code> 标准输入输出流。</p></li><li><p><strong>创建实例</strong>：使用 <code>readline.createInterface</code> 方法创建一个 readline 接口的实例。这个接口将会处理标准输入输出流。</p></li><li><p><strong>读取输入</strong>：然后，你可以使用 <code>.question()</code> 方法提示用户输入，并等待用户的输入。因为这是基于 Promise 的，你可以使用 <code>await</code> 关键字等待用户的响应。</p></li></ol><h3 id="示例代码-2" tabindex="-1"><a class="header-anchor" href="#示例代码-2"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入 readline/promises 模块 和 process 模块中的 stdin 和 stdout</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> createInterface</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">readline/promises</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> stdin</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> stdout</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">process</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> main</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 创建 readline interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> stdin</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> stdout</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 使用 question 方法请求用户输入</span></span>\n<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">    // 在这里，你可以继续请求更多信息，处理逻辑等</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> finally</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 不论发生什么，确保 interface 被关闭</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">main</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li><strong>命令行工具</strong>：如果你正在创建一个需要用户输入数据的命令行工具，使用 <code>readlinePromises.Readline</code> 可以方便地获取用户输入。</li><li><strong>交互式应用</strong>：任何需要与用户进行交互，如问答游戏、调查问卷等应用，都可以利用这个特性来简化代码。</li><li><strong>简单表单输入</strong>：在没有图形界面的环境下收集用户数据（如配置信息等）。</li></ul><p>总之，通过使用 <code>readlinePromises.Readline</code>，Node.js 开发者可以更简洁、更有效地编写处理输入流的代码。尤其是在需要构建快速且互动性强的 CLI 应用时，这个类提供的 Promise-based API 显得格外有用。</p><h4 id="new-readlinepromises-readline-stream-options" tabindex="-1"><a class="header-anchor" href="#new-readlinepromises-readline-stream-options"><span><a href="https://nodejs.org/docs/latest/api/readline.html#new-readlinepromisesreadlinestream-options" target="_blank" rel="noopener noreferrer">new readlinePromises.Readline(stream[, options])</a></span></a></h4><p>理解 Node.js 中的<code>readlinePromises.Readline</code>之前，我们首先要明白它所解决的问题和它的用途。<code>readline</code>模块在 Node.js 中是用来读取数据流（stream），比如从命令行输入读取文本。而<code>readlinePromises</code>是<code>readline</code>模块的 Promise 版，这意味着它支持 Promise API，使得异步操作更为简便和直观。</p><h3 id="基础概念-1" tabindex="-1"><a class="header-anchor" href="#基础概念-1"><span>基础概念</span></a></h3><ul><li><strong>Stream（流）</strong>: 在 Node.js 中，流是一系列数据的集合，就像水流一样连续传输数据。例如，当你在命令行中输入内容时，这些内容就通过一个流传输到程序中。</li><li><strong>Promise</strong>: 是异步编程的一种解决方案。比起传统的回调函数，Promise 提供了更好的代码管理方式和错误处理机制。</li></ul><h3 id="new-readlinepromises-readline-stream-options-解释" tabindex="-1"><a class="header-anchor" href="#new-readlinepromises-readline-stream-options-解释"><span><code>new readlinePromises.Readline(stream[, options])</code> 解释</span></a></h3><p><code>readlinePromises.Readline</code>是创建一个新的<code>readline</code>接口实例，用于从某个给定的<code>stream</code>（比如标准输入<code>process.stdin</code>）读取数据。由于使用了 Promise 版本，这意味着你可以用<code>.then()</code>、<code>.catch()</code>、<code>async/await</code>等方式来处理异步读取行为，让代码更加清晰和简单。</p><h4 id="参数解释-1" tabindex="-1"><a class="header-anchor" href="#参数解释-1"><span>参数解释：</span></a></h4><ul><li><code>stream</code>: 这是你想要从中读取数据的流。通常情况下，如果你想读取用户在命令行中输入的内容，就会使用<code>process.stdin</code>作为流。</li><li><code>options</code>: 是一个可选参数，允许你配置<code>readline</code>的行为。比如，你可以设置一个特殊的字符作为每行的结束符。</li></ul><h3 id="实际运用示例-7" tabindex="-1"><a class="header-anchor" href="#实际运用示例-7"><span>实际运用示例</span></a></h3><p>假设我们想开发一个简单的命令行程序，询问用户的名字和年龄，并打印出来。使用<code>readlinePromises.Readline</code>可以这么做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 首先，引入fs模块和readline/promises模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline/promises</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用process.stdin作为输入流，process.stdout作为输出流</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> askQuestions</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 询问用户名并等待用户输入</span></span>\n<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">    // 询问年龄并等待用户输入</span></span>\n<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> age</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">How old are you? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">You are </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">age</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> years old.</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">    // 最后关闭readline接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">error</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">An error occurred: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">error</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 调用函数执行</span></span>\n<span class="line"><span style="color:#88C0D0;">askQuestions</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用<code>readline/promises</code>模块创建了一个<code>readline</code>接口。通过<code>async/await</code>，我们可以顺序地询问用户问题，并等待他们的回答，然后处理这些输入或捕捉可能出现的错误。使用<code>rl.question</code>方法可以提示用户输入，并且返回一个 Promise，这让我们能够以同步写法处理异步流程。</p><h4 id="rl-clearline-dir" tabindex="-1"><a class="header-anchor" href="#rl-clearline-dir"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlclearlinedir" target="_blank" rel="noopener noreferrer">rl.clearLine(dir)</a></span></a></h4><p>Node.js 中的 <code>readline</code> 模块提供了一个接口，用于从可读流（如 <code>process.stdin</code>，即标准输入）一行一行地读取数据。这对于创建命令行应用尤其有用，因为它允许你交互式地与用户通信。</p><p>在这个模块中，<code>rl.clearLine(dir)</code> 是一个重要的方法，用于清除当前文本行上的内容。具体来说：</p><ul><li><code>dir</code> 参数决定了清除方向： <ul><li><code>dir = -1</code>：从光标位置到行的开头清除。</li><li><code>dir = 1</code>：从光标位置到行的末尾清除。</li><li><code>dir = 0</code>：清除整行，不论光标在哪里。</li></ul></li></ul><h3 id="实际运用例子-3" tabindex="-1"><a class="header-anchor" href="#实际运用例子-3"><span>实际运用例子</span></a></h3><ol><li><p><strong>命令行进度条</strong>：</p><p>假设你正在编写一个命令行程序，比如文件下载器。在下载过程中，你想更新显示的进度条，而不是每次都新打印一行。<code>rl.clearLine(dir)</code>可以帮助你实现这一点：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 接口</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> percentage</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 模拟文件下载进度</span></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> updateProgress</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearLine</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 清除当前行</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 将光标移动到行首</span></span>\n<span class="line"><span style="color:#D8DEE9;">  percentage</span><span style="color:#81A1C1;"> +=</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">下载进度：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">percentage</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">%</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">percentage</span><span style="color:#81A1C1;"> &gt;=</span><span style="color:#B48EAD;"> 100</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    clearInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">interval</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> interval</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> setInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">updateProgress</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1000</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>交互式问答应用</strong>：</p><p>如果你正在创建一个需要用户输入数据的命令行应用，而用户输入了错误的信息，你可能希望能清除错误的部分并让他们重新输入。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 接口</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入你的名字：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">name</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#616E88;">    // 用户没有输入名称，清除当前行并提示用户重新输入</span></span>\n<span class="line"><span style="color:#D8DEE9;">    readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearLine</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">未检测到输入，请重新输入您的名字：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在这些例子中，我们可以看到 <code>rl.clearLine(dir)</code> 的作用非常直观——当你需要在同一行内更新或者清除已有的输出时，这个方法显得非常有用。无论是进度条的连续更新，还是交互式问答回答中的错误处理，都可以通过这个方法来优化用户体验。</p><h4 id="rl-clearscreendown" tabindex="-1"><a class="header-anchor" href="#rl-clearscreendown"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlclearscreendown" target="_blank" rel="noopener noreferrer">rl.clearScreenDown()</a></span></a></h4><p>Node.js 中的 <code>rl.clearScreenDown()</code> 方法是一个用于清除从光标位置到屏幕底部的内容的功能。这个方法属于 <code>readline</code> 模块，该模块主要用于处理在命令行中的输入输出。现在，让我们一步步地了解它。</p><h3 id="理解-readline-模块" tabindex="-1"><a class="header-anchor" href="#理解-readline-模块"><span>理解 Readline 模块</span></a></h3><p>首先，Node.js 的 <code>readline</code> 模块提供了一个接口，用于从可读流（如 <code>process.stdin</code>）读取数据，每次一行地进行。这对于创建命令行工具和交互式命令行应用程序非常有用。</p><h3 id="什么是-rl-clearscreendown" tabindex="-1"><a class="header-anchor" href="#什么是-rl-clearscreendown"><span>什么是 rl.clearScreenDown()？</span></a></h3><p>当你在终端或命令行界面中运行一个交云脚本时，可能会需要在某个时刻清除屏幕上的部分或全部信息。<code>rl.clearScreenDown()</code> 正是为此设计的。它会从当前光标的位置开始，删除直到屏幕的最底部的所有内容。如果你的光标位于屏幕中间，那么该方法将会清除从光标位置到屏幕底部的所有内容。</p><h3 id="如何使用-rl-clearscreendown" tabindex="-1"><a class="header-anchor" href="#如何使用-rl-clearscreendown"><span>如何使用 rl.clearScreenDown()</span></a></h3><p>首先，你需要引入 <code>readline</code> 模块并创建一个 <code>readline.Interface</code> 实例。这个实例通常是通过连接 <code>input</code> 流（如 <code>process.stdin</code>）和 <code>output</code> 流（如 <code>process.stdout</code>）来创建的。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用 rl.clearScreenDown()</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请问你的名字是？ </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好，</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 清除从光标位置到屏幕底部的内容</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearScreenDown</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">屏幕下半部分已清除</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上例子中，程序询问用户的名字，并在用户输入后打印一条问候语。随后，它调用 <code>rl.clearScreenDown()</code> 来清除从当前光标位置（即问候语之后）到屏幕底部的所有内容。</p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ol><li><strong>命令行游戏</strong>：在开发命令行游戏时，可能需要在游戏进度更新时清除部分屏幕内容。</li><li><strong>命令行工具</strong>：创建如日志监控、实时数据分析等工具时，可能需要定期清理过时的数据展示。</li><li><strong>交互式命令行应用</strong>：在进行多步骤操作时，可以清除上一步的输出，以避免混淆。</li></ol><p>总结，<code>rl.clearScreenDown()</code> 是 Node.js <code>readline</code> 模块中一个实用的方法，特别适合在需要管理命令行界面输出时使用。通过这种方式，你可以创建更加动态且用户友好的命令行应用。</p><h4 id="rl-commit" tabindex="-1"><a class="header-anchor" href="#rl-commit"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlcommit" target="_blank" rel="noopener noreferrer">rl.commit()</a></span></a></h4><p>好的，让我们一步步深入了解 <code>rl.commit()</code> 在 Node.js 中的作用。这个方法是 Readline 模块的一部分，主要应用于命令行界面（CLI）程序的交互。</p><h3 id="基本概念-2" tabindex="-1"><a class="header-anchor" href="#基本概念-2"><span>基本概念</span></a></h3><p>首先，Node.js 是一个基于 Chrome 的 V8 JavaScript 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。这意味着你可以使用 JavaScript 来编写后端逻辑，而不仅限于前端浏览器环境。</p><p>接下来，了解 Readline 模块。Readline 是 Node.js 标准库的一部分，提供了一种方式，用于从可读流（如 <code>process.stdin</code>）一次读取一行数据。它被广泛用于创建 CLI 程序，因为它可以处理用户的输入，例如命令行工具或文本菜单。</p><h3 id="rl-commit-1" tabindex="-1"><a class="header-anchor" href="#rl-commit-1"><span>rl.commit()</span></a></h3><p>到了 Node.js v21.7.1，<code>rl.commit()</code> 并不是 Readline API 文档中直接提及的方法。实际上，在撰写此回答时（以 2023 年的知识为限），在官方文档中并没有直接提及 <code>rl.commit()</code> 方法。这可能意味着该方法是内部使用的，或者是一个非常新引入的特性，还未被广泛记录和讨论。</p><p>但是，根据你对 <code>rl.commit()</code> 的询问，我会假设你想了解的是一个类似功能的方法，即如何将用户通过命令行输入的信息提交并处理。在 Readline 模块中，处理用户输入通常涉及监听 <code>&#39;line&#39;</code> 事件，这个事件在用户输入一行并按下回车键时触发。</p><h3 id="实际应用示例-3" tabindex="-1"><a class="header-anchor" href="#实际应用示例-3"><span>实际应用示例</span></a></h3><p>虽然我们不能直接展示 <code>rl.commit()</code> 的例子，让我们通过一个简单的 Readline 示例来理解其潜在的用法，即如何读取用户输入并对其进行处理：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 接口实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 询问用户姓名</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不是直接调用 rl.commit()，但是这里演示如何&quot;提交&quot;用户输入</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 关闭 readline 接口</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当用户回答问题后，我们通过打印欢迎信息来“处理”用户输入，并随后关闭 Readline 接口，这可以视为一种提交动作。</p><h3 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h3><p>由于 <code>rl.commit()</code> 在官方文档中未被明确提及，我建议查看最新的 Node.js 文档或源代码以获取最准确的信息。同时，熟悉 Readline 模块的基本用法，如上述示例所示，将有助于你创建交云用户友好的 CLI 应用。</p><h4 id="rl-cursorto-x-y" tabindex="-1"><a class="header-anchor" href="#rl-cursorto-x-y"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlcursortox-y" target="_blank" rel="noopener noreferrer">rl.cursorTo(x[, y])</a></span></a></h4><p>Node.js 中的 <code>rl.cursorTo(x[, y])</code> 方法是用于移动终端（命令行界面）中光标的位置。这个方法属于 <code>readline</code> 模块，一个用于处理可读流（如 process.stdin）的实用工具，尤其在构建命令行应用时非常有用。</p><h3 id="参数解释-2" tabindex="-1"><a class="header-anchor" href="#参数解释-2"><span>参数解释</span></a></h3><ul><li><code>x</code>: 表示要将光标移动到的水平位置（列），从左边开始计数。</li><li><code>y</code>: 可选参数，表示要将光标移动到的垂直位置（行），从上方开始计数。</li></ul><p>如果只指定 <code>x</code>，光标会在当前行移动到指定的水平位置。如果同时指定了 <code>x</code> 和 <code>y</code>，则光标会移动到指定的行和列。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><p>为了使用 <code>readline</code> 模块的这个方法，首先需要引入 <code>readline</code> 模块并创建一个 <code>readline.Interface</code> 实例。下面是一个简单的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 接口实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 移动光标到第10列、第5行</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 当你运行这段代码，你不会直观地看到效果，除非你在移动光标后进行输出或作其他操作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实际运用例子-4" tabindex="-1"><a class="header-anchor" href="#实际运用例子-4"><span>实际运用例子</span></a></h3><h4 id="_1-简单的进度条" tabindex="-1"><a class="header-anchor" href="#_1-简单的进度条"><span>1. 简单的进度条</span></a></h4><p>想象一下，你正在编写一个命令行工具，需要显示一个加载中或进度的指示器。使用 <code>rl.cursorTo()</code> 可以帮助你不断更新同一行内的内容，制作出简单的进度条效果。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> percent</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> updateProgress</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 将光标移动到行首</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Loading... [</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">percent</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">%]</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 更新进度信息</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">percent</span><span style="color:#81A1C1;"> &gt;=</span><span style="color:#B48EAD;"> 100</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    clearInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">interval</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 完成后关闭接口</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">Done!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#D8DEE9;">  percent</span><span style="color:#81A1C1;"> +=</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 每秒更新一次进度</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> interval</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> setInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">updateProgress</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1000</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-交互式问答程序" tabindex="-1"><a class="header-anchor" href="#_2-交互式问答程序"><span>2. 交互式问答程序</span></a></h4><p>当设计一个需要用户输入的命令行工具时，你可能想清理之前的问题，使得每个新问题都出现在控制台的相同位置。这可以通过 <code>cursorTo</code> 达到。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> askQuestion</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">query</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span></span>\n<span class="line"><span style="color:#81A1C1;">  new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">query</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> resolve</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> start</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> async</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#88C0D0;"> askQuestion</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What&#39;s your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 将光标移回开头</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clear</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // （可选）清空整个控制台</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> hobby</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> askQuestion</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What&#39;s your hobby? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Your hobby is </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">hobby</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们可以在用户输入每个答案之后，清理控制台，保持界面的整洁。</p><h3 id="总结-6" tabindex="-1"><a class="header-anchor" href="#总结-6"><span>总结</span></a></h3><p><code>rl.cursorTo(x[, y])</code> 在 Node.js 应用中主要用来控制和优化命令行界面的显示效果，特别是在需要精确控制输出位置时。通过合理利用这一功能，我们可以提升命令行应用的用户体验，例如实现动态的进度显示、美化输出格式等。</p><h4 id="rl-movecursor-dx-dy" tabindex="-1"><a class="header-anchor" href="#rl-movecursor-dx-dy"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlmovecursordx-dy" target="_blank" rel="noopener noreferrer">rl.moveCursor(dx, dy)</a></span></a></h4><p>Node.js 中的<code>readline</code>模块提供了一种方式来读取数据（例如用户输入）从一个可读流（如<code>process.stdin</code>，在此上下文中，可以理解为命令行界面），一行接一行地读。这就是我们称之为“逐行读取”的由来。</p><p>在 Node.js v21.7.1 版本中的<code>rl.moveCursor(dx, dy)</code>是<code>readline</code>模块的一个功能，它允许你在终端中移动光标到一个新位置。这里的<code>dx</code>和<code>dy</code>参数用来指定要移动的行数（dy）和列数（dx）。<code>dx</code>是水平方向上的移动：如果值为正，则光标向右移动；如果值为负，则向左移动。<code>dy</code>则是垂直方向上的移动：正值意味着向下移动，负值意味着向上移动。</p><h3 id="实际运用例子-5" tabindex="-1"><a class="header-anchor" href="#实际运用例子-5"><span>实际运用例子</span></a></h3><h4 id="_1-创建一个简单的进度条" tabindex="-1"><a class="header-anchor" href="#_1-创建一个简单的进度条"><span>1. 创建一个简单的进度条</span></a></h4><p>假设你正在编写一个脚本，需要处理一些耗时的任务，并且希望有一个进度条来显示当前的进度。使用<code>rl.moveCursor(dx, dy)</code>，你可以在同一行不断更新进度信息。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建readline.Interface实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> progress</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 初始化进度为0%</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 模拟任务进度更新</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> intervalId</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> setInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearLine</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 清除当前行</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 将光标移回行首</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">当前进度：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">progress</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">%</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出当前进度</span></span>\n<span class="line"><span style="color:#D8DEE9;">  progress</span><span style="color:#81A1C1;"> +=</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 增加10%的进度</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">progress</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#B48EAD;"> 100</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    clearInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">intervalId</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 当进度超过100%时停止更新</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 关闭readline.Interface实例</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">},</span><span style="color:#B48EAD;"> 1000</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 每秒更新一次</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-实现命令行问答游戏" tabindex="-1"><a class="header-anchor" href="#_2-实现命令行问答游戏"><span>2. 实现命令行问答游戏</span></a></h4><p>假设你想制作一个简单的命令行问答游戏，用户输入答案后，程序可以在上一行显示正确或错误的提示信息。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Node.js是用什么语言编写的？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">trim</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toLowerCase</span><span style="color:#D8DEE9FF;">() </span><span style="color:#81A1C1;">===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">javascript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">回答正确！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">错误，正确答案是JavaScript。</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们没有直接使用<code>rl.moveCursor(dx, dy)</code>方法，但你可以通过类似的逻辑，在用户输入答案前清除问题行，然后重新输出问题与提示信息，从而创造出更动态的交互效果。</p><h3 id="结论-1" tabindex="-1"><a class="header-anchor" href="#结论-1"><span>结论</span></a></h3><p>虽然在这些特定例子中我们没有直接调用<code>rl.moveCursor(dx, dy)</code>，但通过结合使用<code>readline</code>模块的其他方法，我们展示了如何控制终端中的文本输出和光标位置，以创造更丰富的用户交互体验。<code>rl.moveCursor(dx, dy)</code>为开发人员提供了更细粒度的控制能力，特别是在需要精确光标控制的场景中格外有用。</p><h4 id="rl-rollback" tabindex="-1"><a class="header-anchor" href="#rl-rollback"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlrollback" target="_blank" rel="noopener noreferrer">rl.rollback()</a></span></a></h4><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它让我们能够在服务器端运行 JavaScript 代码。在 Node.js 的世界里，有很多模块和函数可以帮助开发者更高效地完成工作。其中，<code>readline</code> 模块是一个用于处理标准输入输出流（stdin 和 stdout）的接口，特别适合需要与用户交互、读取命令行输入的程序。</p><p>在 Node.js 的某些版本中，例如你提到的 v21.7.1 中，<code>readline</code> 模块提供了一个函数 <code>rl.rollback()</code>，这个函数的目的是帮助开发人员在使用 readline 接口时更好地控制命令行的行为。不过，要注意的是，截至我最后更新的知识库（2023 年 4 月），官方文档中并没有直接提及 <code>rl.rollback()</code> 方法。因此，在解释其功能时，我会基于类似功能的方法进行推测和说明。</p><p>通常情况下，当我们谈论类似“回滚”（rollback）这样的功能时，我们指的是撤销或回到某个先前的状态。在命令行应用或交互式界面中，这可能意味着恢复到上一次的输入前的状态，或者清除当前正在输入但尚未提交的文本。</p><p><strong>实际应用例子</strong>：</p><p>想象一下，你正在编写一个 Node.js 程序，该程序通过命令行与用户交互，收集用户的一系列输入来完成某个任务。在这个过程中，如果用户犯了一个错误（比如拼写错误）并希望撤销他们的最后一次输入，而不是重新开始输入所有内容，这时 <code>rl.rollback()</code> （或类似功能的方法）就变得非常有用。</p><h3 id="示例代码-3" tabindex="-1"><a class="header-anchor" href="#示例代码-3"><span>示例代码：</span></a></h3><p>假设我们没有 <code>rl.rollback()</code> 方法，但想达到类似效果，我们可以通过监听特定的按键事件来手动实现一个简单的“回滚”功能。以下示例展示了如何监听 &#39;backspace&#39; 来删除已经输入的字符，模拟回滚操作：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline 接口</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提示用户输入</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入您的名字：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">您输入的名字是：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听输入事件，以检测是否有回滚（删除）操作</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">收到：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 注意：以上代码并没有直接使用 rl.rollback()，因为这不是官方文档提及的方法。</span></span>\n<span class="line"><span style="color:#616E88;">// 这只是为了演示如果有类似需求，可以如何处理用户的输入。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，由于 <code>rl.rollback()</code> 并非 Node.js 官方文档中明确定义的方法，上述解释和代码例子旨在帮助理解可能的用途和实现方法。在实际编程实践中，建议参考最新的官方文档和 API 来获取关于 <code>readline</code> 模块的准确信息和功能。</p><h3 id="readlinepromises-createinterface-options" tabindex="-1"><a class="header-anchor" href="#readlinepromises-createinterface-options"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readlinepromisescreateinterfaceoptions" target="_blank" rel="noopener noreferrer">readlinePromises.createInterface(options)</a></span></a></h3><p>Node.js 的 <code>readlinePromises.createInterface(options)</code> 方法是用于创建一个接口（interface），通过这个接口，你可以逐行读取输入流（比如从命令行）。这一功能在 Node.js v17.14.0 引入，并在随后的版本中进行了改进和迭代。它是 <code>readline</code> 模块的一部分，但提供了基于 Promise 的 API，使得与之交互更加符合现代异步编程模式。</p><h3 id="基本概念-3" tabindex="-1"><a class="header-anchor" href="#基本概念-3"><span>基本概念</span></a></h3><p>首先，了解几个基本概念：</p><ul><li><strong>readline 模块</strong>：Node.js 标准库的一部分，用于处理逐行读取数据。</li><li><strong>Promise</strong>：JavaScript 中的一个对象，代表了某个异步操作的最终完成（或失败）及其结果值。</li></ul><h3 id="使用-readlinepromises-createinterface-options" tabindex="-1"><a class="header-anchor" href="#使用-readlinepromises-createinterface-options"><span>使用 <code>readlinePromises.createInterface(options)</code></span></a></h3><p>要使用 <code>readlinePromises.createInterface(options)</code>，你需要首先理解它的参数：</p><ul><li><strong>options</strong>：这是一个对象，用于配置 interface。主要属性包括 <code>input</code> 和 <code>output</code>，分别用于设定输入和输出的流。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><p>假设你想制作一个简单的命令行应用程序，询问用户的名字并打印出来，你可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 首先，引入 readline/promises 模块和 process 标准全局对象</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#8FBCBB;"> readline</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">readline/promises</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> stdin</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> stdout</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">process</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用 createInterface 创建一个新的 readline 接口</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9;"> input</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> output</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> askName</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 询问用户的名字</span></span>\n<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">An error occurred: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">err</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> finally</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不要忘记关闭接口！</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">askName</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先导入了所需的模块和库。然后，使用 <code>readlinePromises.createInterface()</code> 创建了一个新的 readline 接口，指定了标准输入输出流作为其 <code>input</code> 和 <code>output</code>。接着，定义了一个异步函数 <code>askName</code>，在这个函数里，我们使用了 <code>await</code> 关键字等待用户的输入（这里调用了 <code>rl.question()</code> 方法，并传递了一个字符串提示）。当用户输入内容后，程序会继续执行，打印出欢迎信息，并最终关闭 readline 接口。</p><h3 id="总结-7" tabindex="-1"><a class="header-anchor" href="#总结-7"><span>总结</span></a></h3><p><code>readlinePromises.createInterface(options)</code> 提供了一个基于 Promise 的方式来处理逐行读取的需求，使得编写涉及读取用户输入的 Node.js 应用变得更加直观和简洁。这对于制作命令行工具、交互式应用程序或任何需要从用户那里收集输入的场景都非常有用。</p><h4 id="use-of-the-completer-function" tabindex="-1"><a class="header-anchor" href="#use-of-the-completer-function"><span><a href="https://nodejs.org/docs/latest/api/readline.html#use-of-the-completer-function" target="_blank" rel="noopener noreferrer">Use of the completer function</a></span></a></h4><p>在 Node.js 中，<code>readline</code>模块提供了一种方式来读取输入流，如从命令行接收用户输入。这对于创建交互式命令行应用程序非常有用。版本 21.7.1 中的<code>completer</code>函数是<code>readline</code>模块功能之一，它允许开发者定义如何自动补全用户的输入。</p><h3 id="completer-函数概念" tabindex="-1"><a class="header-anchor" href="#completer-函数概念"><span><code>completer</code> 函数概念</span></a></h3><p>简而言之，<code>completer</code>函数是一个你提供给<code>readline.createInterface</code>的选项，用来决定当用户在命令行中输入并按下 tab 键时，应该展现哪些自动补全的选项。</p><p>当用户输入某些字符并按下 Tab 键请求自动补全时，<code>completer</code>函数被触发执行。根据用户已经输入的部分，此函数返回一个两元素数组，第一个元素是匹配用户输入的候选项数组，第二元素是用户当前的输入。基于这个返回值，<code>readline</code>模块将向用户展示可能的补全选项。</p><h3 id="completer-函数实例" tabindex="-1"><a class="header-anchor" href="#completer-函数实例"><span><code>completer</code> 函数实例</span></a></h3><p>假设我们正在开发一个命令行工具，需要用户输入星期几，但我们想通过自动补全功能帮助用户快速完成输入。</p><p>首先，我们需要引入<code>readline</code>模块，并定义一个<code>completer</code>函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 定义一个简单的 completer 函数</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> completer</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> completions</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">周一 周二 周三 周四 周五 周六 周日</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">split</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> hits</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> completions</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">filter</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">startsWith</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">line</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 显示所有匹配项或者原始输入</span></span>\n<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">hits</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">?</span><span style="color:#D8DEE9;"> hits</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> completions</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> line</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  completer</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> completer</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>completer</code>函数定义了一个包含星期几名称的数组。当函数被调用时，它会检查用户输入（<code>line</code>参数）与哪些星期名称开始相同（即，以用户输入为前缀），然后返回这些匹配的名称数组。如果没有找到匹配项，则显示全部星期名称作为提示。</p><p>接着，通过配置<code>readline.createInterface()</code>方法，我们实际上启动了一个命令行界面，用户可以在其中输入内容，并且可以利用我们刚才定义的自动补全功能。</p><h3 id="总结-8" tabindex="-1"><a class="header-anchor" href="#总结-8"><span>总结</span></a></h3><p><code>completer</code>功能在 Node.js 中对于提升命令行应用的用户体验极其重要，尤其是在需要用户输入的情况下。它不仅能够减少用户的输入负担，还可以减少因拼写错误导致的问题，使得命令行工具更加友好和容易使用。</p><h2 id="callback-api" tabindex="-1"><a class="header-anchor" href="#callback-api"><span><a href="https://nodejs.org/docs/latest/api/readline.html#callback-api" target="_blank" rel="noopener noreferrer">Callback API</a></span></a></h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它允许你在服务器端运行 JavaScript 代码。Node.js 非常适合开发需要高并发、I/O 密集型的网络应用程序。</p><p><strong>Callback API</strong></p><p>在 Node.js 中，回调（Callback）是一种广泛使用的处理异步操作的方式。简单来说，一个回调函数就是一个在某个异步操作完成后被调用的函数。这使得 JavaScript 代码即使在等待异步操作（比如读取文件、网络请求等）的过程中也可以继续执行，不会造成阻塞。</p><p>以<code>readline</code>模块为例，这是 Node.js 标准库的一部分，用于从可读流（如 process.stdin，即标准输入）按行读取数据。它在处理读取控制台输入、文件行等场景时非常有用。</p><h3 id="实际应用案例" tabindex="-1"><a class="header-anchor" href="#实际应用案例"><span>实际应用案例</span></a></h3><p>考虑这样一个场景：你正在编写一个脚本，需要从用户那里获取输入然后进行一些处理。使用<code>readline</code>模块和回调 API 就可以实现这个需求。</p><h4 id="例-1-简单的命令行问答" tabindex="-1"><a class="header-anchor" href="#例-1-简单的命令行问答"><span>例 1：简单的命令行问答</span></a></h4><p>这个例子演示了如何使用<code>readline</code>创建一个简单的命令行问答应用。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例来监听 process.stdin 和 process.stdout</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提问，并在用户回答后打印出来</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">哦，你的名字是 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不要忘记关闭！</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先导入<code>readline</code>模块，并用它创建一个<code>readline.Interface</code>实例。<code>question</code>方法用于向用户提问，并指定一个回调函数，该回调函数将在用户输入答案后执行，输出用户的答案，并最终关闭<code>readline</code>接口。</p><h4 id="例-2-循环输入直到特定条件满足" tabindex="-1"><a class="header-anchor" href="#例-2-循环输入直到特定条件满足"><span>例 2：循环输入直到特定条件满足</span></a></h4><p>假设你想要用户反复输入，直到他们输入“退出”为止。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> askQuestion</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">请输入内容，或者输入&quot;退出&quot;来结束程序：</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">退出</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">程序结束</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">      return</span><span style="color:#D8DEE9;"> rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你输入的内容是: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#88C0D0;">    askQuestion</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 重新提问</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">askQuestion</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 初始调用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个<code>askQuestion</code>函数，它会提示用户输入。如果用户输入“退出”，则程序结束并关闭<code>readline</code>接口；否则，输出用户输入并再次调用<code>askQuestion</code>进行询问，形成循环。</p><p>通过上述例子，你应该对 Node.js 中的回调 API 有了基本的理解，以及如何在实际应用中使用它来处理异步操作。</p><h3 id="class-readline-interface" tabindex="-1"><a class="header-anchor" href="#class-readline-interface"><span><a href="https://nodejs.org/docs/latest/api/readline.html#class-readlineinterface" target="_blank" rel="noopener noreferrer">Class: readline.Interface</a></span></a></h3><p>Node.js 的 <code>readline</code> 模块提供了一个接口，用于从可读流（如 <code>process.stdin</code>，即标准输入流）读取数据一行一行地进行处理。这对于制作需要与用户交互的命令行应用程序非常有用。</p><h3 id="基础概念-2" tabindex="-1"><a class="header-anchor" href="#基础概念-2"><span>基础概念</span></a></h3><p>首先，理解 <code>readline.Interface</code> 类是很重要的。这个类的实例化对象主要用于逐行读取数据。你可以通过调用 <code>readline.createInterface()</code> 方法并传入一个包含 <code>input</code> 和 <code>output</code> 流的对象来创建这样的实例。</p><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h3><ol><li><p><strong>创建 readline 实例</strong></p><p>为了创建 <code>readline.Interface</code> 的实例，你通常会这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码创建了一个 <code>readline.Interface</code> 的实例，允许你从标准输入读取数据，并将输出写入标准输出。</p></li><li><p><strong>逐行读取输入</strong></p><p>一旦你有了一个 <code>readline.Interface</code> 的实例，就可以使用它来逐行读取输入了。例如，如果你想要询问用户的名字，可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不要忘记关闭！</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>rl.question</code> 方法用于向用户展示一个问题，并等待用户的输入。用户输入的内容通过回调函数的参数 (<code>answer</code>) 传递给你。</p></li><li><p><strong>关闭接口</strong></p><p>当你完成了 <code>readline.Interface</code> 的使用后，应该调用 <code>rl.close()</code> 方法来关闭它。这样可以确保程序不会挂起等待更多的输入。</p></li></ol><h3 id="实际运用案例" tabindex="-1"><a class="header-anchor" href="#实际运用案例"><span>实际运用案例</span></a></h3><h4 id="命令行问答应用" tabindex="-1"><a class="header-anchor" href="#命令行问答应用"><span>命令行问答应用</span></a></h4><p>让我们通过一个简单的例子来进一步说明如何使用 <code>readline</code> 模块——一个简单的命令行问答应用。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">How do you like Node.js? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Your answer: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，程序询问用户“你觉得 Node.js 如何？”然后等待用户的输入。用户输入他们的答案后，程序会输出用户的答案，并结束。</p><h4 id="逐行读取文件内容" tabindex="-1"><a class="header-anchor" href="#逐行读取文件内容"><span>逐行读取文件内容</span></a></h4><p>虽然 <code>readline.Interface</code> 主要用于处理标准输入和输出，但它也可以用于逐行读取文件。这对于处理大文件特别有用，因为它不会一次性将整个文件内容加载到内存中。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  terminal</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">File line: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子展示了如何创建一个 <code>readline.Interface</code> 实例来逐行读取一个文件 (<code>example.txt</code>) 的内容，并将每行的内容输出到控制台。</p><p>总结来说，<code>readline.Interface</code> 是 Node.js 中一个非常强大而且灵活的类，它支持从各种输入流逐行读取数据，使得构建命令行应用或处理逐行数据变得简单而直接。</p><h4 id="rl-question-query-options-callback" tabindex="-1"><a class="header-anchor" href="#rl-question-query-options-callback"><span><a href="https://nodejs.org/docs/latest/api/readline.html#rlquestionquery-options-callback" target="_blank" rel="noopener noreferrer">rl.question(query[, options], callback)</a></span></a></h4><p>Node.js 中的 <code>rl.question()</code> 方法是在 <code>readline</code> 模块中定义的，它用于从命令行提示用户输入信息，并读取用户的输入。这个方法非常有用，尤其是当你需要与用户进行简单交互时，比如请求用户名、密码或任何其他需要用户输入的数据。</p><h3 id="参数解释-3" tabindex="-1"><a class="header-anchor" href="#参数解释-3"><span>参数解释：</span></a></h3><ul><li><strong>query</strong>: 一个字符串，表示向用户显示的提示或问题。</li><li><strong>options</strong>: （可选参数）一个对象，包含一些配置选项。</li><li><strong>callback</strong>: 当用户输入完毕并按下回车键后执行的函数。该回调函数接收用户输入的内容作为参数。</li></ul><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h3><p>假设你正在制作一个简单的命令行程序，需要询问用户他们的名字和年龄，然后将这些信息打印出来。以下是如何使用 <code>rl.question()</code> 实现这一功能的步骤：</p><h4 id="步骤-1-导入-readline-模块并创建-readline-interface" tabindex="-1"><a class="header-anchor" href="#步骤-1-导入-readline-模块并创建-readline-interface"><span>步骤 1: 导入 <code>readline</code> 模块并创建 <code>readline.Interface</code></span></a></h4><p>首先，你需要导入 Node.js 的 <code>readline</code> 模块，并使用它创建一个 <code>readline.Interface</code> 实例。这个实例会处理标准输入输出流，让你能够读取用户输入并向用户显示信息。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤-2-使用-rl-question-提问" tabindex="-1"><a class="header-anchor" href="#步骤-2-使用-rl-question-提问"><span>步骤 2: 使用 <code>rl.question()</code> 提问</span></a></h4><p>接下来，你可以使用 <code>rl.question()</code> 函数来提出问题。这个函数接受两个参数：一个字符串作为问题提示，和一个回调函数，这个回调函数会在用户输入答案后被调用。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">How old are you? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">age</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">You are </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">age</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> years old.</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">    // 当完成所有交互后，不要忘记关闭 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#D8DEE9;">    rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程:</span></a></h3><ol><li>程序启动并且显示了 &quot;What is your name? &quot; 提示。</li><li>用户输入他们的名字，然后按回车。</li><li>程序使用用户提供的名字，显示 &quot;Hello, [用户的名字]!&quot;，然后提示 &quot;How old are you? &quot;。</li><li>用户输入他们的年龄，然后按回车。</li><li>程序最后显示 &quot;You are [用户的年龄] years old.&quot; 并结束。</li></ol><p>通过上述步骤，你可以看到 <code>rl.question()</code> 如何在实践中应用，以及如何使得与用户的命令行交互变得简单直接。这只是 <code>readline</code> 模块功能的冰山一角，但足以展示 Node.js 在构建命令行工具时的强大能力。</p><h3 id="readline-clearline-stream-dir-callback" tabindex="-1"><a class="header-anchor" href="#readline-clearline-stream-dir-callback"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readlineclearlinestream-dir-callback" target="_blank" rel="noopener noreferrer">readline.clearLine(stream, dir[, callback])</a></span></a></h3><p>当然，让我们详细解释一下 <code>readline.clearLine(stream, dir[, callback])</code> 在 Node.js 中的作用，以及如何使用它。</p><h3 id="基本概念-4" tabindex="-1"><a class="header-anchor" href="#基本概念-4"><span>基本概念</span></a></h3><p>首先，<code>readline</code> 是 Node.js 的一个内置模块，它提供了一系列方法来处理从 <code>stream</code>（流）读取数据。流是 Node.js 中用来处理输入（input）和输出（output）的抽象概念，比如从文件读取数据或向控制台（terminal/console）写入数据。</p><p><code>readline.clearLine()</code> 方法是用来清除当前行的文本的。这个方法主要用于命令行界面（CLI）应用程序中，可以帮助你管理控制台上的输出。</p><h3 id="参数详解" tabindex="-1"><a class="header-anchor" href="#参数详解"><span>参数详解</span></a></h3><ul><li><code>stream</code>: 这是一个指定的输出流对象，通常是 <code>process.stdout</code>（标准输出）或 <code>process.stderr</code>（标准错误输出）。</li><li><code>dir</code>: 这个参数指定清除行的方向。 <ul><li>如果设置为 <code>-1</code>，它会从光标的当前位置清除到行的开头。</li><li>如果设置为 <code>1</code>，它会从光标的当前位置清除到行的末尾。</li><li>如果设置为 <code>0</code>，它会清除整行，不管光标在哪里。</li></ul></li><li><code>callback</code>: 这是一个可选参数。当操作完成时，会调用这个回调函数。</li></ul><h3 id="实际运用的例子-2" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-2"><span>实际运用的例子</span></a></h3><h4 id="例子-1-动态进度条" tabindex="-1"><a class="header-anchor" href="#例子-1-动态进度条"><span>例子 1：动态进度条</span></a></h4><p>假设你正在编写一个下载文件的 CLI 工具，想要显示一个简单的进度条来告诉用户下载进度。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设这是你更新进度条的函数</span></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> updateProgressBar</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">progress</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearLine</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span></span>\n<span class="line"><span style="color:#ECEFF4;">    `</span><span style="color:#A3BE8C;">下载进度：[</span><span style="color:#81A1C1;">${</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">progress</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">}${</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">50</span><span style="color:#81A1C1;"> -</span><span style="color:#D8DEE9;"> progress</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">]</span><span style="color:#ECEFF4;">`</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  )</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 模拟下载进程</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> progress</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> interval</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> setInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  progress</span><span style="color:#81A1C1;"> +=</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#88C0D0;">  updateProgressBar</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">progress</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">progress</span><span style="color:#81A1C1;"> &gt;=</span><span style="color:#B48EAD;"> 50</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    clearInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">interval</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">下载完成！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">},</span><span style="color:#B48EAD;"> 100</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，每次更新进度时，我们首先使用 <code>readline.clearLine(process.stdout, 0)</code> 清除当前行，然后使用 <code>readline.cursorTo(process.stdout, 0)</code> 将光标移动到行首，并重新打印进度条。这样就能在同一行动态更新进度条了。</p><h4 id="例子-2-交互式问答游戏" tabindex="-1"><a class="header-anchor" href="#例子-2-交互式问答游戏"><span>例子 2：交互式问答游戏</span></a></h4><p>假设你正在编写一个简单的问答游戏，玩家给出错误答案时，你想立即清除他们的输入并提示他们再次尝试。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">谁是世界上最快的动物？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">豹</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">恭喜你，答对了！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearLine</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">不正确，请再试一次！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，如果用户回答错误，我们首先使用 <code>readline.clearLine(process.stdout, 0)</code> 来清除他们的答案，然后提示他们再次尝试，从而提供一个更加友好的用户体验。</p><p>通过这些例子，希望你能更好地理解 <code>readline.clearLine(stream, dir[, callback])</code> 方法在 Node.js 应用程序中的实践应用。</p><h3 id="readline-clearscreendown-stream-callback" tabindex="-1"><a class="header-anchor" href="#readline-clearscreendown-stream-callback"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readlineclearscreendownstream-callback" target="_blank" rel="noopener noreferrer">readline.clearScreenDown(stream[, callback])</a></span></a></h3><p>理解<code>readline.clearScreenDown(stream[, callback])</code>之前，我们首先需要搞清楚几个关键的概念：</p><ol><li><strong>Node.js</strong>: 一个基于 Chrome V8 引擎运行的 JavaScript 环境，可以让你在服务器端运行 JavaScript 代码。</li><li><strong>Readline 模块</strong>: Node.js 内置模块之一，提供了一种方法来读取数据（如用户输入）逐行（line by line）。</li><li><strong>Stream（流）</strong>: 在 Node.js 中，流是用来处理读写数据的抽象接口。比如，当你从文件读取数据或者向文件写入数据时，你就是在操作流。</li></ol><p>现在，让我们深入了解<code>readline.clearScreenDown(stream[, callback])</code>这个函数：</p><ul><li><strong>功能</strong>：这个函数用于清除从光标当前位置直到屏幕底部的所有内容。如果光标已经在屏幕最底部，那么这个函数将不会有任何效果。</li><li><strong>参数</strong>： <ul><li><code>stream</code>：它是一个指定输出流的参数，通常是<code>process.stdout</code>（标准输出流）。简单来说，它定义了哪里需要被清除内容 —— 在大多数应用场景下，这里是你的控制台或终端窗口。</li><li><code>callback</code>：这是一个可选参数，一个当清除操作完成时被调用的回调函数。如果你需要知道何时清除操作完成，这非常有用。</li></ul></li></ul><h3 id="实际运用的例子-3" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-3"><span>实际运用的例子：</span></a></h3><ol><li><strong>创建交互式命令行工具</strong>：假设你正在编写一个命令行工具，该工具不停地请求用户输入，并根据输入提供反馈。在每次用户完成一个任务后，可能希望清除屏幕上的所有旧数据，以便新的交互能够从干净的状态开始。这时候，<code>readline.clearScreenDown(stream)</code>就显得特别有用。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建readline接口实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 清除光标下方的内容</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入您的名字：</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">欢迎 </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 假设这里完成某些任务后需要清屏</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearScreenDown</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">屏幕已清除，可以进行下一步操作</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>数据展示更新</strong>：想象一个情境，在一个数据库管理系统中，管理员可以看到持续更新的查询统计信息。为了避免旧统计数据和新统计数据混淆，每次更新数据前，可以使用<code>readline.clearScreenDown(stream)</code>来保持显示区域的整洁。</li></ol><p>以上例子说明了<code>readline.clearScreenDown(stream[, callback])</code>在实践中是如何被使用来增强用户体验和界面清晰度的。这只是 Node.js 中众多有用功能之一，展示了 Node.js 在处理命令行工具和交互式应用方面的灵活性和强大功能。</p><h3 id="readline-createinterface-options" tabindex="-1"><a class="header-anchor" href="#readline-createinterface-options"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readlinecreateinterfaceoptions" target="_blank" rel="noopener noreferrer">readline.createInterface(options)</a></span></a></h3><p>理解 <code>readline.createInterface(options)</code> 函数，首先我们需要知道 Node.js 里的 <code>readline</code> 模块是干嘛用的。简单来说，<code>readline</code> 是一个用于读取数据流（如标准输入流 stdin）一行接一行数据的工具。这在很多情况下都非常有用，比如你想从命令行逐行获取用户输入。</p><p>接下来，让我们详细了解一下 <code>readline.createInterface(options)</code>：</p><h3 id="基本概念-5" tabindex="-1"><a class="header-anchor" href="#基本概念-5"><span>基本概念</span></a></h3><ul><li><strong><code>readline.createInterface(options)</code></strong> 是一个方法，它用来创建 <code>readline.Interface</code> 的实例。这个实例基本上就是一个接口，可以用来读取数据（输入）和输出数据到某些目标。</li><li>输入通常来自于 <code>process.stdin</code>（标准输入流），而输出通常是 <code>process.stdout</code>（标准输出流）。</li><li><code>options</code> 参数是一个对象，用来详细定义接口的行为。例如，你可以设定 input 和 output 流，或者是否应该把输入流视作 TTY 设备等。</li></ul><h3 id="常见选项" tabindex="-1"><a class="header-anchor" href="#常见选项"><span>常见选项</span></a></h3><p>在 <code>options</code> 对象中，最重要的两个属性可能是：</p><ul><li><code>input</code>: 指定输入流。通常是 <code>process.stdin</code>。</li><li><code>output</code>: 指定输出流。通常是 <code>process.stdout</code>。</li></ul><h3 id="实际应用举例" tabindex="-1"><a class="header-anchor" href="#实际应用举例"><span>实际应用举例</span></a></h3><ol><li><strong>简单命令行工具</strong>：假设我们要创建一个简单的命令行程序，询问用户姓名并打招呼。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入 readline 模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提问用户，并使用回调函数处理响应</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你叫什么名字？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你好, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭 Interface 实例！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>逐行读取文件内容</strong>：虽然这不是 <code>readline.createInterface(options)</code> 最直接的用途，但借助于 Node.js 文件系统（fs）模块，我们可以逐行读取文件内容。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用 fs.createReadStream 打开文件流</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听 &#39;line&#39; 事件来处理文件的每一行</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">line</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 文件读取完毕时的操作</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">文件读取完成。</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的例子，你可以看到 <code>readline.createInterface(options)</code> 在实际编程中是如何被用来创建交互式命令行程序以及逐行处理文件内容的。希望这些信息对你有所帮助！</p><h4 id="use-of-the-completer-function-1" tabindex="-1"><a class="header-anchor" href="#use-of-the-completer-function-1"><span><a href="https://nodejs.org/docs/latest/api/readline.html#use-of-the-completer-function_1" target="_blank" rel="noopener noreferrer">Use of the completer function</a></span></a></h4><p>Node.js 中的<code>readline</code>模块提供了一个接口，用于从可读流（如<code>process.stdin</code>）中一行一行地读取数据。这非常有用，比如在创建一个命令行界面（CLI）时让用户输入命令或数据。在 Node.js v21.7.1 版本中，<code>readline</code>模块允许开发者使用一个叫做<code>completer</code>的函数来进行自动补全功能。</p><h3 id="completer-函数是什么" tabindex="-1"><a class="header-anchor" href="#completer-函数是什么"><span>completer 函数是什么？</span></a></h3><p><code>completer</code>函数是一个你定义的，用于补全用户输入的函数。当用户在命令行中输入并按下 Tab 键时，Node.js 会调用这个函数，基于当前的用户输入来提供建议列表。</p><p>这个函数可以有两种形式：</p><ol><li><p>同步形式，直接返回一个二元组：<code>[completions, line]</code>。</p><ul><li><code>completions</code> 是一个字符串数组，包含所有可能的补全建议。</li><li><code>line</code> 是当前输入的行，可以用它来决定如何补全。</li></ul></li><li><p>异步形式，接受一个回调函数作为第二个参数。</p><ul><li>这个回调函数也需要传入二元组：<code>[completions, line]</code>。</li></ul></li></ol><h3 id="实际运用示例-8" tabindex="-1"><a class="header-anchor" href="#实际运用示例-8"><span>实际运用示例</span></a></h3><p>假设我们正在编写一个简单的 CLI 工具，希望能够根据用户的输入来推荐命令。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  completer</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> completerFunction</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> completerFunction</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> commands</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">add</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">commit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">push</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> hits</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> commands</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">filter</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">startsWith</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">line</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 如果有匹配项，则显示它们；否则，不显示任何东西。</span></span>\n<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">hits</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">?</span><span style="color:#D8DEE9;"> hits</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> line</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Enter a git command: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Your command was: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个<code>completerFunction</code>，它会检查用户输入是否与预定义的命令数组<code>commands</code>中的某个命令匹配。如果用户输入的是&quot;ad&quot;然后按 Tab 键，<code>completerFunction</code>将会返回[&quot;add&quot;]，因为&quot;add&quot;是以&quot;ad&quot;开头的唯一命令。随后，终端会自动填充剩余的部分，使得用户的输入变成&quot;add&quot;。</p><p>通过这种方式，<code>completer</code>函数可以极大地提升用户在使用命令行工具时的体验，尤其是对于那些有很多命令选项的复杂工具来说。</p><h3 id="readline-cursorto-stream-x-y-callback" tabindex="-1"><a class="header-anchor" href="#readline-cursorto-stream-x-y-callback"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readlinecursortostream-x-y-callback" target="_blank" rel="noopener noreferrer">readline.cursorTo(stream, x[, y][, callback])</a></span></a></h3><p>理解 <code>readline.cursorTo(stream, x[, y][, callback])</code> 这个方法之前，我们先简单了解一下几个关键概念。</p><ol><li><strong>Node.js</strong>: 一个基于 Chrome V8 引擎的 JavaScript 运行环境，允许在服务器端执行 JavaScript 代码。</li><li><strong>readline 模块</strong>: Node.js 中的一个核心模块，用于读取数据流（stream）中的一行。它常用于读取用户在命令行界面（CLI）输入的内容。</li><li><strong>stream</strong>: 在 Node.js 中，stream 是处理流式数据的抽象接口。比如，读写文件、网络通信等都可以被看做是数据的流动。</li></ol><p><code>readline.cursorTo(stream, x[, y][, callback])</code> 方法用于在终端（terminal）或命令行界面中移动光标到指定位置。这里的<code>stream</code>参数通常是指标准输出流（process.stdout），<code>x</code>和<code>y</code>分别代表目标位置的横坐标（列）和纵坐标（行）。如果不指定<code>y</code>，光标只会在当前行移动。<code>callback</code>是一个可选参数，如果提供，它将在光标移动完成后被调用。</p><h3 id="实际运用例子-6" tabindex="-1"><a class="header-anchor" href="#实际运用例子-6"><span>实际运用例子</span></a></h3><h4 id="例子-1-移动光标" tabindex="-1"><a class="header-anchor" href="#例子-1-移动光标"><span>例子 1：移动光标</span></a></h4><p>想象一下你正在编写一个命令行程序，需要在用户的屏幕上显示一个动态更新的进度条。你可以使用<code>readline.cursorTo()</code>来帮助实现这个功能。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 移动光标到第0列，第0行</span></span>\n<span class="line"><span style="color:#D8DEE9;">readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 输出文本</span></span>\n<span class="line"><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">正在加载...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设过了一段时间，进度更新了</span></span>\n<span class="line"><span style="color:#88C0D0;">setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 再次移动光标到开始位置</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 更新显示的文本</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">正在加载...完成</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">},</span><span style="color:#B48EAD;"> 2000</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先使用<code>readline.cursorTo()</code>将光标移动到左上角（第 0 列，第 0 行），然后输出“正在加载...”字符串。2 秒后，我们再次将光标移到左上角并输出更新后的字符串“正在加载...完成”。</p><h4 id="例子-2-创建一个简单的输入框" tabindex="-1"><a class="header-anchor" href="#例子-2-创建一个简单的输入框"><span>例子 2：创建一个简单的输入框</span></a></h4><p>假设你想要在命令行界面实现一个简单的输入框效果，你可以使用<code>readline.cursorTo()</code>结合其他<code>readline</code>模块的方法达成这个目的。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 的实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 提示用户输入某些信息</span></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">请输入你的名字: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 将光标移动到新的行的开始</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">cursorTo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">你的名字是: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 关闭readline.Interface实例</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个简易的输入框例子中，我们先提示用户输入姓名，待用户输入完毕按下回车键后，我们会通过<code>readline.cursorTo()</code>将光标移动到新的一行的起始位置，并输出用户输入的信息。</p><h4 id="总结-9" tabindex="-1"><a class="header-anchor" href="#总结-9"><span>总结</span></a></h4><p><code>readline.cursorTo(stream, x[, y][, callback])</code>是 Node.js 中一个非常有用的方法，尤其当涉及到创建交云动式命令行应用时。通过控制光标的位置，你可以实现更丰富的用户界面和用户体验。</p><h3 id="readline-movecursor-stream-dx-dy-callback" tabindex="-1"><a class="header-anchor" href="#readline-movecursor-stream-dx-dy-callback"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readlinemovecursorstream-dx-dy-callback" target="_blank" rel="noopener noreferrer">readline.moveCursor(stream, dx, dy[, callback])</a></span></a></h3><p>当你在使用计算机时，光标（那个闪烁的小东西，显示你目前正在屏幕上哪里输入文本）的移动对于提供用户交互体验非常重要。特别是在创建命令行应用程序时，能够控制光标位置可以让你做出更复杂和互动性更强的界面。在 Node.js 中，<code>readline</code>模块就包括了这样一些功能，其中<code>readline.moveCursor(stream, dx, dy[, callback])</code>函数就是用来在终端中移动光标的工具。</p><h3 id="基本概念-6" tabindex="-1"><a class="header-anchor" href="#基本概念-6"><span>基本概念</span></a></h3><p>首先，我们需要理解几个基本概念：</p><ul><li><strong>Node.js</strong>：一个基于 Chrome V8 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。</li><li><strong><code>readline</code>模块</strong>：Node.js 的一个核心模块，提供了一系列方法来处理可读流（如 process.stdin）上的输入，使得我们可以逐行读取数据（例如用户在命令行中的输入）。</li><li><strong>光标移动</strong>：通过改变光标的位置来更新屏幕上的信息，而不是仅仅向命令行输出新内容。</li></ul><h3 id="readline-movecursor-stream-dx-dy-callback-详解" tabindex="-1"><a class="header-anchor" href="#readline-movecursor-stream-dx-dy-callback-详解"><span><code>readline.moveCursor(stream, dx, dy[, callback])</code>详解</span></a></h3><ul><li><strong><code>stream</code></strong>：这是指一个 Stream 实例，通常是<code>process.stdout</code>或<code>process.stderr</code>。它代表了一个输出流，可以是终端（命令行窗口）。</li><li><strong><code>dx</code></strong>：表示水平方向上移动光标的单位数。正值向右移动，负值向左移动。</li><li><strong><code>dy</code></strong>：表示垂直方向上移动光标的单位数。正值向下移动，负值向上移动。</li><li><strong><code>callback</code></strong>（可选）：一个在移动完成后被调用的函数，如果你需要在光标移动之后立即执行某些操作，这非常有用。</li></ul><h3 id="实际运用示例-9" tabindex="-1"><a class="header-anchor" href="#实际运用示例-9"><span>实际运用示例</span></a></h3><ol><li><p><strong>简单的文本编辑器</strong>：<br> 假设你正在创建一个命令行文本编辑器，用户可以使用键盘箭头来移动光标并编辑文本。在这种情况下，每当用户按下箭头键时，你可以相应地调用<code>readline.moveCursor()</code>来移动光标。</p></li><li><p><strong>交互式命令行工具</strong>：<br> 如果你正在开发一个需求收集用户输入的交互式 CLI 工具，可能需要在用户回答问题的过程中动态更新某些信息。例如，在选择菜单项时，通过移动光标来高亮用户当前选中的选项。</p></li><li><p><strong>进度条</strong>：<br> 在一些长时间运行的任务中，显示一个进度条可以给用户更好的反馈。你可以使用<code>readline.moveCursor()</code>将光标移动到进度条开始的位置，并根据任务完成的百分比更新进度条的长度。</p></li></ol><h3 id="示例代码-4" tabindex="-1"><a class="header-anchor" href="#示例代码-4"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 移动光标来清除一行文字</span></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> clearLineAndWriteNewText</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">moveCursor</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">9999</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 尽量向左移动光标，确保光标在行首</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\x1b</span><span style="color:#A3BE8C;">[2K</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 清除当前行</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 写入新的文本</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">clearLineAndWriteNewText</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello, Node.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 清除当前行并打印&quot;Hello, Node.js&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们首先尝试将光标尽可能多地向左移动（-9999 只是一个足够大的数值，以确保光标移到了行首），然后使用 ANSI 转义码<code>\\x1b[2K</code>来清除整行文字，最后打印新的消息。这样的技术可以用在需要频繁更新同一行信息的场合，比如动态显示下载进度、执行状态等。</p><p>希望这能帮助你更好地理解<code>readline.moveCursor()</code>方法及其在 Node.js 应用中的应用场景！</p><h2 id="readline-emitkeypressevents-stream-interface" tabindex="-1"><a class="header-anchor" href="#readline-emitkeypressevents-stream-interface"><span><a href="https://nodejs.org/docs/latest/api/readline.html#readlineemitkeypresseventsstream-interface" target="_blank" rel="noopener noreferrer">readline.emitKeypressEvents(stream[, interface])</a></span></a></h2><p>Node.js 的 <code>readline.emitKeypressEvents(stream[, interface])</code> 功能是一个很有用的工具，特别是在创建命令行接口（CLI）应用程序时。让我们一步一步来理解它。</p><h3 id="基本概念-7" tabindex="-1"><a class="header-anchor" href="#基本概念-7"><span>基本概念</span></a></h3><p>首先，<code>readline</code> 是 Node.js 的一个内置模块，提供了一系列用于处理可读流（如 process.stdin）上的输入的便利 API。其中，<code>emitKeypressEvents</code> 函数用于监听这些流上的按键事件。</p><h3 id="参数解释-4" tabindex="-1"><a class="header-anchor" href="#参数解释-4"><span>参数解释</span></a></h3><ul><li><strong>stream</strong>: 这通常是指代一个输入流，比如 <code>process.stdin</code>，也就是标准输入。</li><li><strong>interface</strong>: （可选参数）如果你已经创建了 readline.Interface 实例并且想要绑定到特定的流，可以传入这个实例。如果不传，则函数会为你创建一个新的。</li></ul><h3 id="如何工作" tabindex="-1"><a class="header-anchor" href="#如何工作"><span>如何工作</span></a></h3><p>当你激活了 <code>stream</code> 上的按键事件监听（使用 <code>readline.emitKeypressEvents(stream)</code>），每当用户在命令行中敲击键盘时，Node.js 就会触发 &#39;keypress&#39; 事件，并提供有关所按键的详细信息，比如哪个键被按下、是否同时按下了控制键（如 Shift、Ctrl 等）。</p><h3 id="实际运用例子-7" tabindex="-1"><a class="header-anchor" href="#实际运用例子-7"><span>实际运用例子</span></a></h3><p>假设我们正在创建一个简单的 CLI 游戏或者工具，需要根据用户的键盘输入做出相应：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 激活 process.stdin 流的按键事件监听</span></span>\n<span class="line"><span style="color:#D8DEE9;">readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">emitKeypressEvents</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setRawMode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 确保程序能够逐字地接收按键事件</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">keypress</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">str</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> key</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">You pressed the &quot;</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">str</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">&quot; key</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">key</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">key</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ctrl</span><span style="color:#81A1C1;"> &amp;&amp;</span><span style="color:#D8DEE9;"> key</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">c</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    process</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">exit</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 如果同时按下 Ctrl + C，退出程序</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 根据按下的键进行操作，例如：</span></span>\n<span class="line"><span style="color:#81A1C1;">    switch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">key</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;">      case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">up</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">        console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Moving up!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">        break;</span></span>\n<span class="line"><span style="color:#81A1C1;">      case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">down</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">        console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Moving down!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">        break;</span></span>\n<span class="line"><span style="color:#616E88;">      // 添加更多按键处理逻辑</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Press any key...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中：</p><ol><li>我们通过调用 <code>readline.emitKeypressEvents(process.stdin)</code> 来开始监听键盘按键事件。</li><li>设置 <code>process.stdin.setRawMode(true)</code>，这样我们就可以直接监听到每次按键而非等待回车后才读取。</li><li>监听 <code>process.stdin</code> 上的 <code>&#39;keypress&#39;</code> 事件，每次按键都会触发这个事件，并执行我们定义的回调函数。</li><li>在回调函数里，我们可以获取到按下的键 (<code>str</code>) 和相关的信息 (<code>key</code>)，比如是否按下了控制键、按键的名称等，并据此执行相应操作。</li><li>特别地，我们还处理了 <code>Ctrl + C</code> 的组合键，使其能够安全退出程序。</li></ol><p>通过以上的解释和示例，希望你对 <code>readline.emitKeypressEvents(stream[, interface])</code> 有了更深入的理解。这个功能可以为你的 CLI 应用增添丰富的交互性和灵活性。</p><h2 id="example-tiny-cli" tabindex="-1"><a class="header-anchor" href="#example-tiny-cli"><span><a href="https://nodejs.org/docs/latest/api/readline.html#example-tiny-cli" target="_blank" rel="noopener noreferrer">Example: Tiny CLI</a></span></a></h2><p>要理解 Node.js 中提到的“Tiny CLI”示例，首先我们需要了解几个概念。</p><h3 id="_1-node-js" tabindex="-1"><a class="header-anchor" href="#_1-node-js"><span>1. Node.js</span></a></h3><p>Node.js 是一个允许你使用 JavaScript 编写服务器端代码的平台。它是建立在 Chrome 的 V8 JavaScript 引擎上的，使得 JavaScript 可以脱离浏览器运行。</p><h3 id="_2-cli-命令行界面" tabindex="-1"><a class="header-anchor" href="#_2-cli-命令行界面"><span>2. CLI (命令行界面)</span></a></h3><p>CLI 即命令行界面，是一种允许用户通过文本命令与计算机进行交互的方式。许多服务器和开发工具都提供 CLI 以方便操作。</p><h3 id="_3-readline模块" tabindex="-1"><a class="header-anchor" href="#_3-readline模块"><span>3. <code>readline</code>模块</span></a></h3><p>Node.js 的<code>readline</code>模块提供了一个接口，用于从可读流（如<code>process.stdin</code>，即标准输入）逐行读取数据。这对于创建 CLI 工具特别有用，因为它允许程序动态地与用户交互。</p><h3 id="实际运用的例子-制作一个简单的问答-cli" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-制作一个简单的问答-cli"><span>实际运用的例子：制作一个简单的问答 CLI</span></a></h3><p>接下来，我会根据 Node.js v21.7.1 的文档，展示如何利用<code>readline</code>模块创建一个简单的命令行界面（CLI），该界面将问用户一系列问题，并收集用户的回答。</p><h4 id="步骤-1-导入必要的模块" tabindex="-1"><a class="header-anchor" href="#步骤-1-导入必要的模块"><span>步骤 1: 导入必要的模块</span></a></h4><p>首先，我们需要导入 Node.js 中的<code>readline</code>模块。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="步骤-2-创建readline-interface" tabindex="-1"><a class="header-anchor" href="#步骤-2-创建readline-interface"><span>步骤 2: 创建<code>readline.Interface</code></span></a></h4><p>然后，我们需要创建一个<code>readline.Interface</code>实例。这个实例负责处理标准输入输出流。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤-3-提问并获取回答" tabindex="-1"><a class="header-anchor" href="#步骤-3-提问并获取回答"><span>步骤 3: 提问并获取回答</span></a></h4><p>现在，我们可以使用<code>rl.question</code>方法向用户提出问题并获取他们的回答。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Nice to meet you, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭Interface！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的程序如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">What is your name? </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Nice to meet you, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你运行这个脚本时，它会在终端中等待用户输入名字。用户输入并按下 Enter 键后，程序会打印欢迎信息，并结束运行。</p><h3 id="实际应用场景-2" tabindex="-1"><a class="header-anchor" href="#实际应用场景-2"><span>实际应用场景</span></a></h3><ul><li><strong>CLI 工具</strong>: 许多开发者工具，比如代码格式化、构建工具等，都提供 CLI 以方便开发者使用。</li><li><strong>交互式脚本</strong>: 可以创建交互式脚本，例如设置向导或安装程序，通过一系列问题引导用户完成特定任务。</li></ul><p>这只是<code>readline</code>模块功能的冰山一角。随着你对 Node.js 的深入学习，你会发现更多强大而有趣的用例。</p><h2 id="example-read-file-stream-line-by-line" tabindex="-1"><a class="header-anchor" href="#example-read-file-stream-line-by-line"><span><a href="https://nodejs.org/docs/latest/api/readline.html#example-read-file-stream-line-by-line" target="_blank" rel="noopener noreferrer">Example: Read file stream line-by-Line</a></span></a></h2><p>当然，我们可以一步一步来理解如何在 Node.js v21.7.1 中按行读取文件流。首先，让我带你了解几个关键概念和组件。</p><h3 id="关键概念和组件" tabindex="-1"><a class="header-anchor" href="#关键概念和组件"><span>关键概念和组件</span></a></h3><ol><li><strong>Node.js</strong>: 一个能让 JavaScript 运行在服务器端的平台。</li><li><strong>文件流(File Stream)</strong>: 在 Node.js 中处理大文件时非常有用，避免将整个文件一次性载入内存，而是分批次进行处理。</li><li><strong>readline 模块</strong>: Node.js 内置模块，用于逐行读取可读流（如文件内容）。</li></ol><h3 id="使用场景举例" tabindex="-1"><a class="header-anchor" href="#使用场景举例"><span>使用场景举例</span></a></h3><p>假设你正在处理日志文件，这些文件可能非常巨大，不便于一次性全文阅读或处理。你可能想要逐行分析它们，比如统计某种特定格式的日志行出现的次数，或者只提取出符合特定条件的行。</p><h3 id="步骤详解" tabindex="-1"><a class="header-anchor" href="#步骤详解"><span>步骤详解</span></a></h3><p>下面，我们将通过具体代码演示如何使用 Node.js 的<code>readline</code>模块按行读取文件：</p><ol><li><p><strong>引入必要的模块</strong>: 我们需要引入 Node.js 的<code>fs</code>(文件系统)模块来获取文件流，以及<code>readline</code>模块来逐行读取数据。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建读取流</strong>: 使用<code>fs.createReadStream</code>方法打开文件流。比如，有一个名为<code>log.txt</code>的日志文件我们想要读取。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">log.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>使用 readline 逐行读取</strong>: 接下来，利用<code>readline</code>模块和刚刚创建的读取流，我们可以逐行处理文件内容。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> fileStream</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  crlfDelay</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>crlfDelay</code>是一个配置项，代表应对输入中的 CR(回车)和 LF(换行)符号。设置为<code>Infinity</code>意味着不管返回行的间隔有多长都可以处理，这使得能处理各种各样的换行格式。</p></li><li><p><strong>逐行读取并处理</strong>: 现在，每当我们从文件中读取到一行数据，就会触发一个事件。我们可以编写函数来响应这个事件，并对每一行数据进行处理。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Line from file: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会对文件中的每一行调用一次回调函数，将该行输出到控制台。这是处理文件数据的地方，你可以添加更复杂的逻辑，比如正则表达式匹配、数据计数等。</p></li><li><p><strong>关闭和清理</strong>: 当文件读取完成，<code>readline</code>接口会触发<code>&#39;close&#39;</code>事件。如果需要，可以在这个事件中执行一些清理工作。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">File has been processed.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="实际例子-1" tabindex="-1"><a class="header-anchor" href="#实际例子-1"><span>实际例子</span></a></h3><p>考虑到你是编程新手，让我们通过一个简单的实际例子来加深理解：假设有一个<code>log.txt</code>文件，记录了网站的访问日志。你想要统计其中包含关键字&quot;ERROR&quot;的日志行数量。</p><p>你可以修改上述逐行读取并处理的部分，增加一个计数器变量，来实现这个目标：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> errorCount</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">includes</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ERROR</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    errorCount</span><span style="color:#81A1C1;"> +=</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">close</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Found </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">errorCount</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> ERROR lines.</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当所有行都被读取后，你就能知道文件中包含&quot;ERROR&quot;的行数了。以上就是 Node.js 中使用<code>readline</code>模块按行读取文件流的一个基本介绍和实例。希望这对你有所帮助！</p><h2 id="tty-keybindings" tabindex="-1"><a class="header-anchor" href="#tty-keybindings"><span><a href="https://nodejs.org/docs/latest/api/readline.html#tty-keybindings" target="_blank" rel="noopener noreferrer">TTY keybindings</a></span></a></h2><p>Node.js 中的 TTY keybindings 涉及到了 <code>readline</code> 模块，这对于理解如何在 Node.js 应用中处理终端（Terminal）输入非常有用。</p><h2 id="什么是-tty" tabindex="-1"><a class="header-anchor" href="#什么是-tty"><span>什么是 TTY？</span></a></h2><p>首先，让我们搞清楚 TTY 是什么。TTY 是 Teletypewriter（电传打字机）的缩写，历史上指的是一种可以发送和接收打印信息的设备。在现代计算中，它指的是终端（Terminal），一个用户可以通过键盘输入命令和接收输出的接口。</p><h2 id="readline-模块-1" tabindex="-1"><a class="header-anchor" href="#readline-模块-1"><span><code>readline</code> 模块</span></a></h2><p><code>readline</code> 模块提供了一个接口，用于从可读流（如 <code>process.stdin</code>，即标准输入）读取数据，一行一行地进行。这对于制作交互式命令行工具特别有用，因为它允许开发者逐行处理用户输入，并根据需要给出响应。</p><h2 id="tty-keybindings-1" tabindex="-1"><a class="header-anchor" href="#tty-keybindings-1"><span>TTY Keybindings</span></a></h2><p>当谈到 TTY keybindings，我们指的是特定的键盘快捷方式或键组合，这些在用户与终端交互时被触发。在 Node.js 的 <code>readline</code> 模块中，你可以自定义这些键绑定来增强用户体验。</p><p>例如，在一个命令行程序中，你可能希望允许用户使用箭头键来在输入历史中前后移动，或者使用 Ctrl+C 来取消当前操作。</p><h2 id="实际例子-2" tabindex="-1"><a class="header-anchor" href="#实际例子-2"><span>实际例子</span></a></h2><p>假设我们正在编写一个简单的命令行界面（CLI）程序，该程序询问用户他们最喜欢的编程语言，并根据用户的输入给出不同的回应。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readline</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">readline</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建 readline.Interface 的实例来读写输入输出</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> rl</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> readline</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createInterface</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdin</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  output</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你最喜欢的编程语言是什么？</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">哇！</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">answer</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> 是一个很棒的选择！</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 不要忘记关闭！</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个简单的例子中，我们并没有直接处理 TTY keybindings，但是 <code>readline</code> 模块会处理像上下箭头这样的基本键绑定，以便在输入历史中导航。想要自定义更多的键绑定，比如捕捉 Ctrl+C 或其他组合键，你可能需要监听特定的键盘事件并编写额外的逻辑代码。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">SIGINT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">question</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">确定要退出吗？(yes/no) </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">answer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">match</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">^</span><span style="color:#EBCB8B;">y</span><span style="color:#ECEFF4;">(</span><span style="color:#EBCB8B;">es</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">?$</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">i</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#D8DEE9;">rl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pause</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展示了如何捕获 Ctrl+C（通常会引发 SIGINT 信号）并给用户一个退出确认提示。</p><h2 id="结论-2" tabindex="-1"><a class="header-anchor" href="#结论-2"><span>结论</span></a></h2><p>通过理解和使用 Node.js 的 TTY keybindings 和 <code>readline</code> 模块，你可以构建出既强大又用户友好的命令行应用程序。这就是为什么了解这些概念对开发该类型应用至关重要的原因。</p>',649)],o={},p=(0,a(8538).A)(o,[["render",function(s,n){return(0,l.uX)(),(0,l.CE)("div",null,e)}]]),r=JSON.parse('{"path":"/document/node-doc/Readline.html","title":"Readline","lang":"zh-CN","frontmatter":{"article":false,"description":"Readline Node.js 的 readline 模块提供了一个接口，用于从可读流（如 process.stdin，表示标准输入）读取数据，一次一行地处理这些数据。这个模块特别适合需要逐行读取用户输入或文件内容的情况。 基本概念 在进入具体实例之前，让我们先理解几个基本概念： 可读流：在 Node.js 中，可读流是一种抽象的数据结构，代表了一个...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/document/node-doc/Readline.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"Readline"}],["meta",{"property":"og:description","content":"Readline Node.js 的 readline 模块提供了一个接口，用于从可读流（如 process.stdin，表示标准输入）读取数据，一次一行地处理这些数据。这个模块特别适合需要逐行读取用户输入或文件内容的情况。 基本概念 在进入具体实例之前，让我们先理解几个基本概念： 可读流：在 Node.js 中，可读流是一种抽象的数据结构，代表了一个..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:46:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:46:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Readline\\",\\"description\\":\\"Readline Node.js 的 readline 模块提供了一个接口，用于从可读流（如 process.stdin，表示标准输入）读取数据，一次一行地处理这些数据。这个模块特别适合需要逐行读取用户输入或文件内容的情况。 基本概念 在进入具体实例之前，让我们先理解几个基本概念： 可读流：在 Node.js 中，可读流是一种抽象的数据结构，代表了一个...\\"}"]]},"headers":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例","link":"#实际运用示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"Class: InterfaceConstructor","slug":"class-interfaceconstructor","link":"#class-interfaceconstructor","children":[{"level":3,"title":"理解 InterfaceConstructor","slug":"理解-interfaceconstructor","link":"#理解-interfaceconstructor","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子","link":"#实际运用例子","children":[]},{"level":3,"title":"Event: \'close\'","slug":"event-close","link":"#event-close","children":[]},{"level":3,"title":"基础","slug":"基础","link":"#基础","children":[]},{"level":3,"title":"readline 模块和 \'close\' 事件","slug":"readline-模块和-close-事件","link":"#readline-模块和-close-事件","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-1","link":"#实际运用示例-1","children":[]},{"level":3,"title":"Event: \'line\'","slug":"event-line","link":"#event-line","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-1","link":"#实际运用例子-1","children":[]},{"level":3,"title":"Event: \'history\'","slug":"event-history","link":"#event-history","children":[]},{"level":3,"title":"Event: \'history\'","slug":"event-history-1","link":"#event-history-1","children":[]},{"level":3,"title":"Event: \'pause\'","slug":"event-pause","link":"#event-pause","children":[]},{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"Event: \'pause\'","slug":"event-pause-1","link":"#event-pause-1","children":[]},{"level":3,"title":"Event: \'resume\'","slug":"event-resume","link":"#event-resume","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-3","link":"#实际运用示例-3","children":[]},{"level":3,"title":"Event: \'SIGCONT\'","slug":"event-sigcont","link":"#event-sigcont","children":[]},{"level":3,"title":"基础概念","slug":"基础概念","link":"#基础概念","children":[]},{"level":3,"title":"SIGCONT 信号","slug":"sigcont-信号","link":"#sigcont-信号","children":[]},{"level":3,"title":"实际例子","slug":"实际例子","link":"#实际例子","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":3,"title":"Event: \'SIGINT\'","slug":"event-sigint","link":"#event-sigint","children":[]},{"level":3,"title":"Node.js 简介","slug":"node-js-简介","link":"#node-js-简介","children":[]},{"level":3,"title":"信号（Signals）","slug":"信号-signals","link":"#信号-signals","children":[]},{"level":3,"title":"Event: \'SIGINT\'在 Node.js 中的应用","slug":"event-sigint-在-node-js-中的应用","link":"#event-sigint-在-node-js-中的应用","children":[]},{"level":3,"title":"Event: \'SIGTSTP\'","slug":"event-sigtstp","link":"#event-sigtstp","children":[]},{"level":3,"title":"1. Node.js 简介","slug":"_1-node-js-简介","link":"#_1-node-js-简介","children":[]},{"level":3,"title":"2. 事件驱动模型","slug":"_2-事件驱动模型","link":"#_2-事件驱动模型","children":[]},{"level":3,"title":"3. SIGTSTP 信号","slug":"_3-sigtstp-信号","link":"#_3-sigtstp-信号","children":[]},{"level":3,"title":"Event: \'SIGTSTP\' 在 Node.js 中的应用","slug":"event-sigtstp-在-node-js-中的应用","link":"#event-sigtstp-在-node-js-中的应用","children":[]},{"level":3,"title":"rl.close()","slug":"rl-close","link":"#rl-close","children":[]},{"level":3,"title":"解释","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"实际应用示例","slug":"实际应用示例-1","link":"#实际应用示例-1","children":[]},{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":3,"title":"rl.pause()","slug":"rl-pause","link":"#rl-pause","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-1","link":"#基本概念-1","children":[]},{"level":3,"title":"rl.pause() 方法","slug":"rl-pause-方法","link":"#rl-pause-方法","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-4","link":"#实际运用示例-4","children":[]},{"level":3,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":3,"title":"rl.prompt([preserveCursor])","slug":"rl-prompt-preservecursor","link":"#rl-prompt-preservecursor","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子","link":"#实际运用的例子","children":[]},{"level":3,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]},{"level":3,"title":"rl.resume()","slug":"rl-resume","link":"#rl-resume","children":[]},{"level":3,"title":"rl.resume() 简介","slug":"rl-resume-简介","link":"#rl-resume-简介","children":[]},{"level":3,"title":"实际应用场景","slug":"实际应用场景","link":"#实际应用场景","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":3,"title":"rl.setPrompt(prompt)","slug":"rl-setprompt-prompt","link":"#rl-setprompt-prompt","children":[]},{"level":3,"title":"rl.setPrompt(prompt)","slug":"rl-setprompt-prompt-1","link":"#rl-setprompt-prompt-1","children":[]},{"level":3,"title":"rl.getPrompt()","slug":"rl-getprompt","link":"#rl-getprompt","children":[]},{"level":3,"title":"rl.getPrompt()","slug":"rl-getprompt-1","link":"#rl-getprompt-1","children":[]},{"level":3,"title":"rl.write(data[, key])","slug":"rl-write-data-key","link":"#rl-write-data-key","children":[]},{"level":3,"title":"rl.write(data[, key])","slug":"rl-write-data-key-1","link":"#rl-write-data-key-1","children":[]},{"level":3,"title":"实践例子","slug":"实践例子","link":"#实践例子","children":[]},{"level":3,"title":"[rlSymbol.asyncIterator](https://nodejs.org/docs/latest/api/readline.html#rlsymbolasynciterator)","slug":"rlsymbol-asynciterator-https-nodejs-org-docs-latest-api-readline-html-rlsymbolasynciterator","link":"#rlsymbol-asynciterator-https-nodejs-org-docs-latest-api-readline-html-rlsymbolasynciterator","children":[]},{"level":3,"title":"readline 模块","slug":"readline-模块","link":"#readline-模块","children":[]},{"level":3,"title":"Symbol.asyncIterator","slug":"symbol-asynciterator","link":"#symbol-asynciterator","children":[]},{"level":3,"title":"实际应用示例","slug":"实际应用示例-2","link":"#实际应用示例-2","children":[]},{"level":3,"title":"rl.line","slug":"rl-line","link":"#rl-line","children":[]},{"level":3,"title":"如何使用 rl.line","slug":"如何使用-rl-line","link":"#如何使用-rl-line","children":[]},{"level":3,"title":"实际运用示例：","slug":"实际运用示例-5","link":"#实际运用示例-5","children":[]},{"level":3,"title":"rl.cursor","slug":"rl-cursor","link":"#rl-cursor","children":[]},{"level":3,"title":"实际运用示例：","slug":"实际运用示例-6","link":"#实际运用示例-6","children":[]},{"level":3,"title":"rl.getCursorPos()","slug":"rl-getcursorpos","link":"#rl-getcursorpos","children":[]},{"level":3,"title":"基本解释","slug":"基本解释","link":"#基本解释","children":[]},{"level":3,"title":"实际用法","slug":"实际用法","link":"#实际用法","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-1","link":"#示例代码-1","children":[]}]},{"level":2,"title":"Promises API","slug":"promises-api","link":"#promises-api","children":[{"level":3,"title":"为什么使用 Promises API？","slug":"为什么使用-promises-api","link":"#为什么使用-promises-api","children":[]},{"level":3,"title":"如何使用 readline 的 Promises API","slug":"如何使用-readline-的-promises-api","link":"#如何使用-readline-的-promises-api","children":[]},{"level":3,"title":"实际应用场景","slug":"实际应用场景-1","link":"#实际应用场景-1","children":[]},{"level":3,"title":"Class: readlinePromises.Interface","slug":"class-readlinepromises-interface","link":"#class-readlinepromises-interface","children":[]},{"level":3,"title":"如何使用 readlinePromises.Interface","slug":"如何使用-readlinepromises-interface","link":"#如何使用-readlinepromises-interface","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子-1","link":"#实际运用的例子-1","children":[]},{"level":3,"title":"基础解释","slug":"基础解释","link":"#基础解释","children":[]},{"level":3,"title":"参数","slug":"参数-1","link":"#参数-1","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-2","link":"#实际运用例子-2","children":[]},{"level":3,"title":"总结","slug":"总结-5","link":"#总结-5","children":[]},{"level":3,"title":"Class: readlinePromises.Readline","slug":"class-readlinepromises-readline","link":"#class-readlinepromises-readline","children":[]},{"level":3,"title":"实践步骤","slug":"实践步骤","link":"#实践步骤","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-2","link":"#示例代码-2","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"基础概念","slug":"基础概念-1","link":"#基础概念-1","children":[]},{"level":3,"title":"new readlinePromises.Readline(stream[, options]) 解释","slug":"new-readlinepromises-readline-stream-options-解释","link":"#new-readlinepromises-readline-stream-options-解释","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-7","link":"#实际运用示例-7","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-3","link":"#实际运用例子-3","children":[]},{"level":3,"title":"理解 Readline 模块","slug":"理解-readline-模块","link":"#理解-readline-模块","children":[]},{"level":3,"title":"什么是 rl.clearScreenDown()？","slug":"什么是-rl-clearscreendown","link":"#什么是-rl-clearscreendown","children":[]},{"level":3,"title":"如何使用 rl.clearScreenDown()","slug":"如何使用-rl-clearscreendown","link":"#如何使用-rl-clearscreendown","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-2","link":"#基本概念-2","children":[]},{"level":3,"title":"rl.commit()","slug":"rl-commit-1","link":"#rl-commit-1","children":[]},{"level":3,"title":"实际应用示例","slug":"实际应用示例-3","link":"#实际应用示例-3","children":[]},{"level":3,"title":"结语","slug":"结语","link":"#结语","children":[]},{"level":3,"title":"参数解释","slug":"参数解释-2","link":"#参数解释-2","children":[]},{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-4","link":"#实际运用例子-4","children":[]},{"level":3,"title":"总结","slug":"总结-6","link":"#总结-6","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-5","link":"#实际运用例子-5","children":[]},{"level":3,"title":"结论","slug":"结论-1","link":"#结论-1","children":[]},{"level":3,"title":"示例代码：","slug":"示例代码-3","link":"#示例代码-3","children":[]},{"level":3,"title":"readlinePromises.createInterface(options)","slug":"readlinepromises-createinterface-options","link":"#readlinepromises-createinterface-options","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-3","link":"#基本概念-3","children":[]},{"level":3,"title":"使用 readlinePromises.createInterface(options)","slug":"使用-readlinepromises-createinterface-options","link":"#使用-readlinepromises-createinterface-options","children":[]},{"level":3,"title":"总结","slug":"总结-7","link":"#总结-7","children":[]},{"level":3,"title":"completer 函数概念","slug":"completer-函数概念","link":"#completer-函数概念","children":[]},{"level":3,"title":"completer 函数实例","slug":"completer-函数实例","link":"#completer-函数实例","children":[]},{"level":3,"title":"总结","slug":"总结-8","link":"#总结-8","children":[]}]},{"level":2,"title":"Callback API","slug":"callback-api","link":"#callback-api","children":[{"level":3,"title":"实际应用案例","slug":"实际应用案例","link":"#实际应用案例","children":[]},{"level":3,"title":"Class: readline.Interface","slug":"class-readline-interface","link":"#class-readline-interface","children":[]},{"level":3,"title":"基础概念","slug":"基础概念-2","link":"#基础概念-2","children":[]},{"level":3,"title":"如何使用","slug":"如何使用","link":"#如何使用","children":[]},{"level":3,"title":"实际运用案例","slug":"实际运用案例","link":"#实际运用案例","children":[]},{"level":3,"title":"参数解释：","slug":"参数解释-3","link":"#参数解释-3","children":[]},{"level":3,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":3,"title":"工作流程:","slug":"工作流程","link":"#工作流程","children":[]},{"level":3,"title":"readline.clearLine(stream, dir[, callback])","slug":"readline-clearline-stream-dir-callback","link":"#readline-clearline-stream-dir-callback","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-4","link":"#基本概念-4","children":[]},{"level":3,"title":"参数详解","slug":"参数详解","link":"#参数详解","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子-2","link":"#实际运用的例子-2","children":[]},{"level":3,"title":"readline.clearScreenDown(stream[, callback])","slug":"readline-clearscreendown-stream-callback","link":"#readline-clearscreendown-stream-callback","children":[]},{"level":3,"title":"实际运用的例子：","slug":"实际运用的例子-3","link":"#实际运用的例子-3","children":[]},{"level":3,"title":"readline.createInterface(options)","slug":"readline-createinterface-options","link":"#readline-createinterface-options","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-5","link":"#基本概念-5","children":[]},{"level":3,"title":"常见选项","slug":"常见选项","link":"#常见选项","children":[]},{"level":3,"title":"实际应用举例","slug":"实际应用举例","link":"#实际应用举例","children":[]},{"level":3,"title":"completer 函数是什么？","slug":"completer-函数是什么","link":"#completer-函数是什么","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-8","link":"#实际运用示例-8","children":[]},{"level":3,"title":"readline.cursorTo(stream, x[, y][, callback])","slug":"readline-cursorto-stream-x-y-callback","link":"#readline-cursorto-stream-x-y-callback","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-6","link":"#实际运用例子-6","children":[]},{"level":3,"title":"readline.moveCursor(stream, dx, dy[, callback])","slug":"readline-movecursor-stream-dx-dy-callback","link":"#readline-movecursor-stream-dx-dy-callback","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-6","link":"#基本概念-6","children":[]},{"level":3,"title":"readline.moveCursor(stream, dx, dy[, callback])详解","slug":"readline-movecursor-stream-dx-dy-callback-详解","link":"#readline-movecursor-stream-dx-dy-callback-详解","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-9","link":"#实际运用示例-9","children":[]},{"level":3,"title":"示例代码","slug":"示例代码-4","link":"#示例代码-4","children":[]}]},{"level":2,"title":"readline.emitKeypressEvents(stream[, interface])","slug":"readline-emitkeypressevents-stream-interface","link":"#readline-emitkeypressevents-stream-interface","children":[{"level":3,"title":"基本概念","slug":"基本概念-7","link":"#基本概念-7","children":[]},{"level":3,"title":"参数解释","slug":"参数解释-4","link":"#参数解释-4","children":[]},{"level":3,"title":"如何工作","slug":"如何工作","link":"#如何工作","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-7","link":"#实际运用例子-7","children":[]}]},{"level":2,"title":"Example: Tiny CLI","slug":"example-tiny-cli","link":"#example-tiny-cli","children":[{"level":3,"title":"1. Node.js","slug":"_1-node-js","link":"#_1-node-js","children":[]},{"level":3,"title":"2. CLI (命令行界面)","slug":"_2-cli-命令行界面","link":"#_2-cli-命令行界面","children":[]},{"level":3,"title":"3. readline模块","slug":"_3-readline模块","link":"#_3-readline模块","children":[]},{"level":3,"title":"实际运用的例子：制作一个简单的问答 CLI","slug":"实际运用的例子-制作一个简单的问答-cli","link":"#实际运用的例子-制作一个简单的问答-cli","children":[]},{"level":3,"title":"实际应用场景","slug":"实际应用场景-2","link":"#实际应用场景-2","children":[]}]},{"level":2,"title":"Example: Read file stream line-by-Line","slug":"example-read-file-stream-line-by-line","link":"#example-read-file-stream-line-by-line","children":[{"level":3,"title":"关键概念和组件","slug":"关键概念和组件","link":"#关键概念和组件","children":[]},{"level":3,"title":"使用场景举例","slug":"使用场景举例","link":"#使用场景举例","children":[]},{"level":3,"title":"步骤详解","slug":"步骤详解","link":"#步骤详解","children":[]},{"level":3,"title":"实际例子","slug":"实际例子-1","link":"#实际例子-1","children":[]}]},{"level":2,"title":"TTY keybindings","slug":"tty-keybindings","link":"#tty-keybindings","children":[]},{"level":2,"title":"什么是 TTY？","slug":"什么是-tty","link":"#什么是-tty","children":[]},{"level":2,"title":"readline 模块","slug":"readline-模块-1","link":"#readline-模块-1","children":[]},{"level":2,"title":"TTY Keybindings","slug":"tty-keybindings-1","link":"#tty-keybindings-1","children":[]},{"level":2,"title":"实际例子","slug":"实际例子-2","link":"#实际例子-2","children":[]},{"level":2,"title":"结论","slug":"结论-2","link":"#结论-2","children":[]}],"git":{"createdTime":1718963177000,"updatedTime":1718963177000,"contributors":[{"name":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":1}]},"readingTime":{"minutes":101.43,"words":30430},"filePathRelative":"document/node-doc/Readline.md","localizedDate":"2024年6月21日","excerpt":"\\n<p>Node.js 的 <code>readline</code> 模块提供了一个接口，用于从可读流（如 <code>process.stdin</code>，表示标准输入）读取数据，一次一行地处理这些数据。这个模块特别适合需要逐行读取用户输入或文件内容的情况。</p>\\n<h3>基本概念</h3>\\n<p>在进入具体实例之前，让我们先理解几个基本概念：</p>\\n<ul>\\n<li><strong>可读流</strong>：在 Node.js 中，可读流是一种抽象的数据结构，代表了一个连续的数据源。从这些流中，你可以读取数据，例如从文件、键盘输入等。</li>\\n<li><strong>逐行读取</strong>：指的是按行（通常以换行符分隔）读取数据流的过程。这对于处理日志文件、用户命令输入等场景非常有用，因为这些数据通常是按行组织的。</li>\\n</ul>","autoDesc":true}')},8538:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,l]of n)a[s]=l;return a}}}]);