"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[1607],{4613:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>p,data:()=>r});var l=a(9034);const e=[(0,l.Fv)('<h1 id="string-decoder" tabindex="-1"><a class="header-anchor" href="#string-decoder"><span><a href="https://nodejs.org/docs/latest/api/string_decoder.html#string-decoder" target="_blank" rel="noopener noreferrer">String decoder</a></span></a></h1><p>Node.js 的 String Decoder 模块是用于处理字节流转换成字符串的一个工具。这听起来可能有点抽象，所以我们将通过一些简单的例子来解释它的作用和如何使用它。</p><h3 id="为什么需要-string-decoder" tabindex="-1"><a class="header-anchor" href="#为什么需要-string-decoder"><span>为什么需要 String Decoder？</span></a></h3><p>在计算机中，文本实际上是以字节的形式存储的。当你处理文本数据（特别是从文件、网络等来源接收的数据）时，这些字节必须被正确地转换成字符，以便程序可以理解和操作这些文本。不同的编码方式（如 UTF-8, UTF-16 等）有着不同的规则来表示字符。错误的解码可能会导致乱码，因此正确地处理字节到字符串的转换非常重要。</p><h3 id="string-decoder-的作用" tabindex="-1"><a class="header-anchor" href="#string-decoder-的作用"><span>String Decoder 的作用</span></a></h3><p>String Decoder 模块提供了一个方法，使得这种转换变得更加容易和准确。它特别擅长处理那些可能被分割并跨越多个缓冲区传输的多字节字符。如果直接使用 Buffer.toString()方法在每个接收到的片段上，可能会导致一个字符被拆分，从而产生乱码。String Decoder 通过保留这些零散片段的最后几个字节，直到接收到足够的信息来正确解码字符，解决了这个问题。</p><h3 id="实际运用例子" tabindex="-1"><a class="header-anchor" href="#实际运用例子"><span>实际运用例子</span></a></h3><p>假设你正在编写一个 Node.js 应用程序，需要从外部源（如文件或网络）读取数据，并且这些数据是通过 UTF-8 编码的。你可能会遇到一个情况：数据是分批次接收的，而某个批次的数据结束恰好在一个字符的中间。使用 String Decoder 可以帮助你处理这种情况。</p><h4 id="示例-1-读取数据" tabindex="-1"><a class="header-anchor" href="#示例-1-读取数据"><span>示例 1：读取数据</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入required的模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设receivedData是从某处接收到的Buffer数据</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> receivedData</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">0xe2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0x82</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0xac</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;€&#39;的UTF-8编码</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 直接解码</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> text</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">receivedData</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: €</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 如果数据是分开接收的</span></span>\n<span class="line"><span style="color:#D8DEE9;">receivedData</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">0xe2</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">text</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">receivedData</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 此时，并不输出，因为没有足够的信息来解码字符</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">receivedData</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">0x82</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0xac</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">text</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">receivedData</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 最终输出: €，即使数据是分开接收的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-2-处理接收到的分批数据" tabindex="-1"><a class="header-anchor" href="#示例-2-处理接收到的分批数据"><span>示例 2：处理接收到的分批数据</span></a></h4><p>假设你有一个大型的数据流，比如视频文件或大量的文本数据，你需要逐步地处理这些数据：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 代码逻辑类似于示例1，关键在于利用循环或事件监听器来逐批处理数据</span></span>\n<span class="line"><span style="color:#616E88;">// 每当接收到数据时：</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> partialData</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getPartialDataSomehow</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获取部分数据的函数</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> textPart</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">partialData</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#88C0D0;">processTextPart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">textPart</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 自定义的处理文本的函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中，<code>getPartialDataSomehow()</code>是一个假设的函数，用来表示某种方式接收到的数据，而<code>processTextPart()</code>则是你需要根据具体需求实现的用于处理解码后文本的函数。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>String Decoder 模块是 Node.js 中处理文本编码的有力工具，尤其是在面对流式数据和需要正确处理多字节字符的场景下。通过例子，我们看到了如何使用它来确保字符能够被完整无误地解码，即使这些字符是分批次接受的。</p><h2 id="class-stringdecoder" tabindex="-1"><a class="header-anchor" href="#class-stringdecoder"><span><a href="https://nodejs.org/docs/latest/api/string_decoder.html#class-stringdecoder" target="_blank" rel="noopener noreferrer">Class: StringDecoder</a></span></a></h2><p>在 Node.js 中，<code>StringDecoder</code> 是一个非常实用的工具，它属于 <code>string_decoder</code> 模块。这个模块的主要作用是处理二进制数据流并将其转换成字符串。在处理网络通信或文件读写时，数据经常以二进制形式出现，直接阅读或处理这些二进制数据很不方便。这就是 <code>StringDecoder</code> 发挥作用的地方。</p><h3 id="如何使用-stringdecoder" tabindex="-1"><a class="header-anchor" href="#如何使用-stringdecoder"><span>如何使用 <code>StringDecoder</code></span></a></h3><p>首先，你需要在你的 Node.js 应用中导入 <code>string_decoder</code> 模块，并创建一个 <code>StringDecoder</code> 的实例。下面是基本的步骤：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 导入 string_decoder 模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 创建一个 StringDecoder 的实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个 <code>StringDecoder</code> 的实例，指定了字符编码为 &#39;utf8&#39;（这是最常用的字符编码之一）。</p><h3 id="实际运用" tabindex="-1"><a class="header-anchor" href="#实际运用"><span>实际运用</span></a></h3><h4 id="例子-1-处理分割的-utf-8-字符" tabindex="-1"><a class="header-anchor" href="#例子-1-处理分割的-utf-8-字符"><span>例子 1：处理分割的 UTF-8 字符</span></a></h4><p>假设你正在从某个源（比如文件或网络请求）读取文本数据，但数据是分批到达的。如果使用 <code>Buffer.toString()</code> 方法直接转换，可能会遇到字符被错误分割的情况，尤其是对于多字节字符（比如中文、表情符号等），这样就会产生乱码。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 假设这是分批到达的数据</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> bytes</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">0xe2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0x82</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0xac</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0xe2</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 其中 0xE2 0x82 0xAC 是欧元符号 € 的 UTF-8 编码</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> buffer1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">([</span><span style="color:#D8DEE9;">bytes</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bytes</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bytes</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">]])</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> buffer2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">([</span><span style="color:#D8DEE9;">bytes</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">]])</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">buffer1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: &#39;€&#39;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">buffer2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: �，这是因为 0xE2 单独构不成有效的 UTF-8 字符</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用 StringDecoder 来正确处理</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> output1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">buffer1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> output2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">buffer2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // decoder 内部处理了半个字符的情况</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">output1</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> output2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 正确输出: &#39;€&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子-2-逐行读取数据" tabindex="-1"><a class="header-anchor" href="#例子-2-逐行读取数据"><span>例子 2：逐行读取数据</span></a></h4><p>当你通过流（stream）读取大型文件时，可以使用 <code>StringDecoder</code> 来确保每次读取的末尾不会切断一个完整的字符。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> remaining</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">readStream</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">chunk</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  remaining</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">chunk</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> index</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  while</span><span style="color:#D8DEE9FF;"> ((</span><span style="color:#D8DEE9;">index</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> remaining</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">indexOf</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\n</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> line</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> remaining</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">slice</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> index</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">line</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    remaining</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> remaining</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">slice</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">index</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">//이 문서는 잉차오 차(Ying Chao Tea)에서 온 것입니다. 상업적으로 사용하지 마십시오.</span></span>\n<span class="line"><span style="color:#D8DEE9;">readStream</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">end</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> finalOutput</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> remaining</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">finalOutput</span><span style="color:#D8DEE9FF;">) </span><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">finalOutput</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们读取一个文本文件，可能包含任意长度的行。通过逐行处理和输出，我们可以高效地处理大量数据而不担心字符断裂问题。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p><code>StringDecoder</code> 是处理文本数据的强大工具，特别是在涉及多字节字符和数据流分段的场景中。通过上述例子，我们看到它如何帮助我们安全有效地处理和转换二进制数据到字符串，避免了潜在的编码问题和数据损坏风险。</p><h3 id="new-stringdecoder-encoding" tabindex="-1"><a class="header-anchor" href="#new-stringdecoder-encoding"><span><a href="https://nodejs.org/docs/latest/api/string_decoder.html#new-stringdecoderencoding" target="_blank" rel="noopener noreferrer">new StringDecoder([encoding])</a></span></a></h3><p>Node.js 中的<code>StringDecoder</code>是一个用于处理字节流解码为字符串的工具，它属于<code>string_decoder</code>模块。当你从一个来源（如文件、网络请求等）接收数据时，这些数据通常以字节流（byte stream）的形式存在。直接读取这样的字节流可能不会得到人类可读的格式，特别是当这些数据包含多字节字符（如 UTF-8 中的中文或特殊符号）时。这就是<code>StringDecoder</code>派上用场的地方。</p><h3 id="创建stringdecoder" tabindex="-1"><a class="header-anchor" href="#创建stringdecoder"><span>创建<code>StringDecoder</code></span></a></h3><p>在 Node.js v21.7.1 中，你可以通过以下方式创建一个<code>StringDecoder</code>的实例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们首先导入了<code>string_decoder</code>模块，并使用其中的<code>StringDecoder</code>类来创建一个新的解码器实例。<code>new StringDecoder([encoding])</code>构造函数接受一个可选的编码类型参数，表示要用于解码的字符编码，默认为<code>&#39;utf8&#39;</code>。</p><h3 id="使用场景举例" tabindex="-1"><a class="header-anchor" href="#使用场景举例"><span>使用场景举例</span></a></h3><p><strong>场景一：读取文件</strong></p><p>假设你正在读取一个包含 UTF-8 编码字符的文本文件。由于 Node.js 的文件系统(<code>fs</code>)操作默认返回数据的 Buffer 对象（一种存储二进制数据的方式），直接将这个 Buffer 转换为字符串可能会遇到问题，尤其是当读取操作被分成多个部分完成时（例如，通过流）。如果一个多字节字符恰好被分割在两个 Chunk 之间，直接转换可能会导致乱码。使用<code>StringDecoder</code>可以避免这个问题，如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> readStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">./example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">readStream</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">chunk</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  data</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">chunk</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">readStream</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">end</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 此时data是完整无误的字符串数据</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>场景二：网络请求</strong></p><p>当你从网络请求中接收数据时，数据同样是以字节流的形式到达。如果预期的响应是 UTF-8 编码的文本，使用<code>StringDecoder</code>能确保即便数据在传输过程中被分割，最终拼接的字符串也不会出现乱码。//来源：<a href="http://doc.cherrychat.org" target="_blank" rel="noopener noreferrer">doc.cherrychat.org</a> 请勿商用</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> http</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">http</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http://example.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">resp</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  resp</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">chunk</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    data</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">chunk</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">  resp</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">end</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 完整的、未损坏的字符串内容</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h3><p><code>StringDecoder</code>用于正确处理多字节字符，在处理如文件读取、网络请求等需要对字节流进行解码的场景下尤其有用。它帮助保证即使数据被分割传输，最终组合起来的字符串仍然是完整并且没有乱码的。</p><h3 id="stringdecoder-end-buffer" tabindex="-1"><a class="header-anchor" href="#stringdecoder-end-buffer"><span><a href="https://nodejs.org/docs/latest/api/string_decoder.html#stringdecoderendbuffer" target="_blank" rel="noopener noreferrer">stringDecoder.end([buffer])</a></span></a></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，让你可以用 JavaScript 编写服务器端的代码。在 Node.js 中有很多内置模块，其中一个就是 <code>StringDecoder</code> 模块，它主要用于处理二进制数据流中的字符串解码。</p><p>在讲解 <code>stringDecoder.end([buffer])</code> 方法之前，让我们先了解下背景知识：</p><h3 id="字符编码和解码" tabindex="-1"><a class="header-anchor" href="#字符编码和解码"><span>字符编码和解码</span></a></h3><p>计算机里所有的信息最终都是以二进制形式存储的。当我们处理文本数据时，这些文本（无论是 ASCII、UTF-8 还是其他编码格式）最终都需要被编码成二进制数据进行传输或存储，接收方再将其解码回原始文本格式。</p><h3 id="为什么需要-stringdecoder" tabindex="-1"><a class="header-anchor" href="#为什么需要-stringdecoder"><span>为什么需要 StringDecoder</span></a></h3><p>在处理流式数据时（如从网络接收数据），数据会被分割成小片段（chunks）进行传输。如果直接用 Buffer 对象转换这些数据片段为字符串，可能会导致字符断裂。字符断裂意味着一个完整的字符可能会跨越两个数据片段边界而被错误地拆分开来，这会导致解码错误。比如 UTF-8 编码中，一个字符可能由多个字节组成，如果一个字符的一部分在当前数据片段的末尾，另一部分在下一个片段的开始，直接转换就会出错。</p><h3 id="stringdecoder-end-buffer-1" tabindex="-1"><a class="header-anchor" href="#stringdecoder-end-buffer-1"><span>stringDecoder.end([buffer])</span></a></h3><p><code>stringDecoder.end([buffer])</code> 方法是 <code>StringDecoder</code> 类的一个方法，它用于在结束解码操作时被调用。这个方法的作用是处理那些可能因为流结束而留在 decoder 内部缓冲区中的任何剩余输入。</p><p>如果传递了 <code>buffer</code> 参数，该方法首先会对提供的 buffer 进行解码。然后，如果有任何未完成的字符残留在内部缓冲区中（也就是说，在最后一个 buffer 的处理过程中，有字符因为数据片断而被截断了），<code>stringDecoder.end()</code> 将尝试使用默认字符或者特定策略来处理这些不完整的字符，并返回结果字符串。如果没有提供 <code>buffer</code> 参数，这个方法只会返回留在内部缓冲区中的任何剩余的解码字符串。</p><h4 id="实际运用示例" tabindex="-1"><a class="header-anchor" href="#实际运用示例"><span>实际运用示例</span></a></h4><p>假设你正在编写一个应用程序，该程序需要从网络上读取数据，数据以 UTF-8 编码发送。你可能会使用 <code>StringDecoder</code> 来确保接收到的数据不会因为多字节字符的断裂而出现乱码问题。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设data1和data2是从网络接收到的数据片段</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> data1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">0xe2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0x82</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> data2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">0xac</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 直接解码可能会导致字符断裂</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出乱码</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出€</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用StringDecoder避免字符断裂</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data1</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出空字符串，因为字符未完成</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data2</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出€，字符现在完整了</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 结束解码操作，处理任何剩余的输入</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 如果有未完成的字符，尝试解码并输出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先创建了一个 <code>StringDecoder</code> 实例，指定使用 &#39;utf8&#39; 编码。然后模拟从网络接收到两个数据片段 <code>data1</code> 和 <code>data2</code>。如果直接使用 <code>Buffer.toString()</code> 方法转换这两个片段，第一个片段会因为字符断裂造成乱码，第二个片段虽然能正确显示字符，但这不是我们想要的结果。通过使用 <code>StringDecoder</code>，我们能够正确处理多字节字符，即使它们被拆分到不同的数据片段中。最后，调用 <code>decoder.end()</code> 来处理并返回任何剩余的解码字符串，确保解码操作正确完成。</p><h3 id="stringdecoder-write-buffer" tabindex="-1"><a class="header-anchor" href="#stringdecoder-write-buffer"><span><a href="https://nodejs.org/docs/latest/api/string_decoder.html#stringdecoderwritebuffer" target="_blank" rel="noopener noreferrer">stringDecoder.write(buffer)</a></span></a></h3><p>让我们以简单易懂的方式来解释一下 Node.js 中的 <code>stringDecoder.write(buffer)</code> 方法。</p><h3 id="什么是-stringdecoder" tabindex="-1"><a class="header-anchor" href="#什么是-stringdecoder"><span>什么是 StringDecoder？</span></a></h3><p>在 Node.js 中，<code>StringDecoder</code> 是一个特别的模块，用于处理二进制数据到字符串的解码。你可以把它想象成一个翻译器，它能够将计算机看得懂的二进制数据（比如从文件读取的数据或网络接收的数据）转换为我们人类能理解的文本。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><p>假设你正在编写一个 Node.js 应用程序，这个程序需要从一个文件中读取内容，或者从互联网上下载内容。通常这些内容是以二进制形式存储的。直接查看或使用这些二进制数据对大多数人来说没有太大意义。这时候，<code>StringDecoder</code> 模块就派上了用场，它可以帮助你把这些二进制数据转换成字符串，让内容变得可读和可用。</p><h3 id="stringdecoder-write-buffer-1" tabindex="-1"><a class="header-anchor" href="#stringdecoder-write-buffer-1"><span>stringDecoder.write(buffer)</span></a></h3><p>在 <code>StringDecoder</code> 中，<code>.write(buffer)</code> 方法是最常用的方法之一。这个方法接受一个 Buffer（Node.js 中用于处理二进制数据的一个类型）作为参数，并返回一个已解码的字符串。</p><ul><li><strong>参数</strong>: <code>buffer</code> - 这是你想要解码成字符串的二进制数据。</li><li><strong>返回值</strong>: 解码后的字符串。</li></ul><h3 id="实际运用示例-1" tabindex="-1"><a class="header-anchor" href="#实际运用示例-1"><span>实际运用示例</span></a></h3><h4 id="示例-1-读取文件内容" tabindex="-1"><a class="header-anchor" href="#示例-1-读取文件内容"><span>示例 1: 读取文件内容</span></a></h4><p>假设你有一个包含文本的文件，这个文件使用了 UTF-8 编码（一种非常常见的文本编码格式），但是当你读取这个文件的内容时，得到的是二进制数据。这时，你可以使用 <code>StringDecoder</code> 来解码这些数据：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设有一个叫做 &#39;example.txt&#39; 的文件，里面存储了文本内容</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> buffer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFileSync</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> text</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">buffer</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 这会打印出文件内容，以字符串形式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-2-处理网络请求数据" tabindex="-1"><a class="header-anchor" href="#示例-2-处理网络请求数据"><span>示例 2: 处理网络请求数据</span></a></h4><p>当你的 Node.js 应用接收到来自客户端的数据时，这些数据通常也是以二进制形式接收的。如果这些数据代表了文本（比如 JSON 数据），你可能想要将其转换为字符串以便处理：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> http</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> StringDecoder</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">string_decoder</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> StringDecoder</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> server</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> http</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createServer</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">req</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 当接收到数据时，使用 StringDecoder 解码</span></span>\n<span class="line"><span style="color:#D8DEE9;">  req</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">chunk</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    data</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> decoder</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">chunk</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 当所有数据接收完毕时</span></span>\n<span class="line"><span style="color:#D8DEE9;">  req</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">end</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 现在 &#39;data&#39; 是一个字符串，表示接收到的数据</span></span>\n<span class="line"><span style="color:#D8DEE9;">    res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">数据接收完毕</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">server</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">listen</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3000</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">服务器在 3000 端口监听</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个简单的 HTTP 服务器，它接收客户端发送的数据，然后使用 <code>StringDecoder</code> 将这些二进制数据转换成字符串。这使得处理接收到的数据（比如解析 JSON）变得更加容易。</p><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h3><p><code>StringDecoder</code> 的 <code>.write(buffer)</code> 方法使得从二进制数据到字符串的转换变得简单。无论是处理文件、网络请求还是其他来源的二进制数据，<code>StringDecoder</code> 都是一个非常有用的工具。通过上述示例，你可以看到它在实际应用中是如何发挥作用的。</p>',80)],o={},p=(0,a(8538).A)(o,[["render",function(s,n){return(0,l.uX)(),(0,l.CE)("div",null,e)}]]),r=JSON.parse('{"path":"/document/node-doc/String%20decoder.html","title":"String decoder","lang":"zh-CN","frontmatter":{"article":false,"description":"String decoder Node.js 的 String Decoder 模块是用于处理字节流转换成字符串的一个工具。这听起来可能有点抽象，所以我们将通过一些简单的例子来解释它的作用和如何使用它。 为什么需要 String Decoder？ 在计算机中，文本实际上是以字节的形式存储的。当你处理文本数据（特别是从文件、网络等来源接收的数据）时，这些...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/document/node-doc/String%20decoder.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"String decoder"}],["meta",{"property":"og:description","content":"String decoder Node.js 的 String Decoder 模块是用于处理字节流转换成字符串的一个工具。这听起来可能有点抽象，所以我们将通过一些简单的例子来解释它的作用和如何使用它。 为什么需要 String Decoder？ 在计算机中，文本实际上是以字节的形式存储的。当你处理文本数据（特别是从文件、网络等来源接收的数据）时，这些..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:46:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:46:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"String decoder\\",\\"description\\":\\"String decoder Node.js 的 String Decoder 模块是用于处理字节流转换成字符串的一个工具。这听起来可能有点抽象，所以我们将通过一些简单的例子来解释它的作用和如何使用它。 为什么需要 String Decoder？ 在计算机中，文本实际上是以字节的形式存储的。当你处理文本数据（特别是从文件、网络等来源接收的数据）时，这些...\\"}"]]},"headers":[{"level":3,"title":"为什么需要 String Decoder？","slug":"为什么需要-string-decoder","link":"#为什么需要-string-decoder","children":[]},{"level":3,"title":"String Decoder 的作用","slug":"string-decoder-的作用","link":"#string-decoder-的作用","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子","link":"#实际运用例子","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"Class: StringDecoder","slug":"class-stringdecoder","link":"#class-stringdecoder","children":[{"level":3,"title":"如何使用 StringDecoder","slug":"如何使用-stringdecoder","link":"#如何使用-stringdecoder","children":[]},{"level":3,"title":"实际运用","slug":"实际运用","link":"#实际运用","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":3,"title":"new StringDecoder([encoding])","slug":"new-stringdecoder-encoding","link":"#new-stringdecoder-encoding","children":[]},{"level":3,"title":"创建StringDecoder","slug":"创建stringdecoder","link":"#创建stringdecoder","children":[]},{"level":3,"title":"使用场景举例","slug":"使用场景举例","link":"#使用场景举例","children":[]},{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":3,"title":"stringDecoder.end([buffer])","slug":"stringdecoder-end-buffer","link":"#stringdecoder-end-buffer","children":[]},{"level":3,"title":"字符编码和解码","slug":"字符编码和解码","link":"#字符编码和解码","children":[]},{"level":3,"title":"为什么需要 StringDecoder","slug":"为什么需要-stringdecoder","link":"#为什么需要-stringdecoder","children":[]},{"level":3,"title":"stringDecoder.end([buffer])","slug":"stringdecoder-end-buffer-1","link":"#stringdecoder-end-buffer-1","children":[]},{"level":3,"title":"stringDecoder.write(buffer)","slug":"stringdecoder-write-buffer","link":"#stringdecoder-write-buffer","children":[]},{"level":3,"title":"什么是 StringDecoder？","slug":"什么是-stringdecoder","link":"#什么是-stringdecoder","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"stringDecoder.write(buffer)","slug":"stringdecoder-write-buffer-1","link":"#stringdecoder-write-buffer-1","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-1","link":"#实际运用示例-1","children":[]},{"level":3,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]}]}],"git":{"createdTime":1718963177000,"updatedTime":1718963177000,"contributors":[{"name":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":1}]},"readingTime":{"minutes":13.18,"words":3954},"filePathRelative":"document/node-doc/String decoder.md","localizedDate":"2024年6月21日","excerpt":"\\n<p>Node.js 的 String Decoder 模块是用于处理字节流转换成字符串的一个工具。这听起来可能有点抽象，所以我们将通过一些简单的例子来解释它的作用和如何使用它。</p>\\n<h3>为什么需要 String Decoder？</h3>\\n<p>在计算机中，文本实际上是以字节的形式存储的。当你处理文本数据（特别是从文件、网络等来源接收的数据）时，这些字节必须被正确地转换成字符，以便程序可以理解和操作这些文本。不同的编码方式（如 UTF-8, UTF-16 等）有着不同的规则来表示字符。错误的解码可能会导致乱码，因此正确地处理字节到字符串的转换非常重要。</p>\\n<h3>String Decoder 的作用</h3>","autoDesc":true}')},8538:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,l]of n)a[s]=l;return a}}}]);