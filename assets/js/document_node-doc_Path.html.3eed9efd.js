"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[9605],{3226:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>p,data:()=>t});var l=n(9034);const e=[(0,l.Fv)('<h1 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span><a href="https://nodejs.org/docs/latest/api/path.html#path" target="_blank" rel="noopener noreferrer">Path</a></span></a></h1><p>Node.js 中的 <code>path</code> 模块是一个用于处理文件和目录路径的实用工具集。这个模块提供了一系列非常有用的功能，使得操作路径变得简单而高效。下面我会通过几个基本概念和示例来解释它。</p><h3 id="_1-为什么需要-path-模块" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要-path-模块"><span>1. 为什么需要 <code>path</code> 模块？</span></a></h3><p>在不同的操作系统中，文件路径的表示方式可能会有所不同。比如，在 Windows 系统中，路径通常使用反斜杠（<code>\\</code>）作为分隔符，如 <code>C:\\user\\docs\\Letter.txt</code>；而在 UNIX 或 Linux 系统中，路径则使用正斜杠（<code>/</code>）作为分隔符，如 <code>/user/docs/Letter.txt</code>。<code>path</code> 模块帮助开发者抽象这些差异，通过提供统一的接口来处理路径问题，从而编写出可在不同平台之间移植的代码。</p><h3 id="_2-常用函数" tabindex="-1"><a class="header-anchor" href="#_2-常用函数"><span>2. 常用函数</span></a></h3><h4 id="path-join-paths" tabindex="-1"><a class="header-anchor" href="#path-join-paths"><span>path.join([...paths])</span></a></h4><p>合并给定的路径片段，创建一个跨平台的单一路径。非常适合创建系统路径，因为它会自动处理各种平台上的路径分隔符差异。</p><p><strong>示例</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> completePath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/users</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">mike</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">docs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">completePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 在 UNIX 系统: &#39;/users/mike/docs/letter.txt&#39;</span></span>\n<span class="line"><span style="color:#616E88;">// 在 Windows 系统: &#39;\\users\\mike\\docs\\letter.txt&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="path-resolve-paths" tabindex="-1"><a class="header-anchor" href="#path-resolve-paths"><span>path.resolve([...paths])</span></a></h4><p>将路径或路径片段的序列解析为绝对路径。给定的路径序列从右向左被处理，直到构造出绝对路径为止。如果在处理完所有给定的路径片段后，还没有生成一个绝对路径，则会使用当前工作目录。</p><p><strong>示例</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> absolutePath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">users</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">mike</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">docs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">absolutePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 假设当前工作目录是 &#39;/home&#39;，</span></span>\n<span class="line"><span style="color:#616E88;">// 打印出：&#39;/home/users/mike/docs/letter.txt&#39; (在 UNIX 系统)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="path-basename-path-ext" tabindex="-1"><a class="header-anchor" href="#path-basename-path-ext"><span>path.basename(path[, ext])</span></a></h4><p>返回路径的最后一部分。很有用的函数，特别是当你需要从一个文件路径中提取文件名时。</p><p><strong>示例</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> filename</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">basename</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/users/mike/docs/letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filename</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;letter.txt&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="path-dirname-path" tabindex="-1"><a class="header-anchor" href="#path-dirname-path"><span>path.dirname(path)</span></a></h4><p>返回路径中目录的部分，基本上是路径除最后一部分之外的所有内容。</p><p><strong>示例</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> dir</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/users/mike/docs/letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">dir</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;/users/mike/docs&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="path-extname-path" tabindex="-1"><a class="header-anchor" href="#path-extname-path"><span>path.extname(path)</span></a></h4><p>返回路径中文件的扩展名，即从路径的最后一部分中最后一个<code>.</code>到字符串结束的部分。</p><p><strong>示例</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> ext</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">index.html</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ext</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;.html&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实际应用举例" tabindex="-1"><a class="header-anchor" href="#实际应用举例"><span>实际应用举例</span></a></h3><ul><li><strong>Web 应用静态文件服务</strong>: 当你需要根据请求的 URL 路径在服务器的文件系统中找到相应的文件时，<code>path</code> 模块可以帮助你构建正确的文件路径。</li><li><strong>构建工具</strong>: 在使用 Webpack、Gulp 等构建工具时，经常需要指定项目中文件的路径，<code>path</code> 模块能够帮助开发者轻松地配置和管理这些路径。</li><li><strong>命令行工具</strong>: 开发 CLI（命令行界面）工具时，可能需要访问或创建文件、目录。<code>path</code> 模块提供的工具函数使得这类操作更加直接和便捷。</li></ul><p>通过以上介绍和示例，你应该对 Node.js 的<code>path</code>模块有了一个初步的了解。这个模块极大地简化了路径相关的操作，是 Node.js 编程中不可或缺的一个部分。</p><h2 id="windows-vs-posix" tabindex="-1"><a class="header-anchor" href="#windows-vs-posix"><span><a href="https://nodejs.org/docs/latest/api/path.html#windows-vs-posix" target="_blank" rel="noopener noreferrer">Windows vs. POSIX</a></span></a></h2><p>好的，让我们来探讨一下 Node.js 中的 Windows 和 POSIX 路径处理的区别，并且举一些实际的例子。</p><p>首先，要了解 Windows 和 POSIX 这两个概念。Windows 是微软开发的操作系统，而 POSIX（Portable Operating System Interface，可移植操作系统接口）是 IEEE 为了使 Unix 操作系统兼容其他操作系统所定义的一系列 API 标准。Linux 和 macOS 等操作系统大多数遵循这种标准。</p><p>在处理文件路径时，Windows 和 POSIX 之间有一个主要的区别：路径分隔符。Windows 使用反斜杠（<code>\\</code>）作为路径分隔符，而 POSIX 兼容系统（如 Linux 和 macOS）使用正斜杠（<code>/</code>）。比如，访问同一个文件，在 Windows 上路径可能是 <code>C:\\Users\\Username\\file.txt</code>，而在 Linux 或 macOS 上路径则是 <code>/Users/Username/file.txt</code>。</p><p>Node.js 通过<code>path</code>模块提供了一系列工具，用于处理这种差异，确保代码可以跨平台运行。<code>path</code>模块有两个主要的子模块：<code>path.win32</code> 和 <code>path.posix</code>，分别用于处理 Windows 路径和 POSIX 路径。默认情况下，<code>path</code>模块的行为会根据你的操作系统自动调整。但是，你也可以显式地使用<code>path.win32</code>或<code>path.posix</code>去处理特定风格的路径，无论你的程序在哪种操作系统上运行。</p><h3 id="实际例子" tabindex="-1"><a class="header-anchor" href="#实际例子"><span>实际例子</span></a></h3><ol><li><strong>跨平台拼接路径</strong></li></ol><p>假设你正在编写一个 Node.js 应用，需要生成一个指向用户目录下某个文件的路径。你希望应用能同时在 Windows 和 POSIX 兼容系统上运行。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 跨平台方式拼接路径</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/Users</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Username</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在 POSIX 兼容系统上运行以上代码，它将输出 <code>/Users/UsernameName/file.txt</code>。<br> 如果在 Windows 上运行，输出将是 <code>\\Users\\Username\\file.txt</code>。注意，即便代码使用了 POSIX 风格的输入（正斜杠），<code>path.join</code>方法还是智能地根据运行环境生成了正确的路径。</p><ol start="2"><li><strong>显式处理 Windows 路径</strong></li></ol><p>有时候你可能需要处理特定格式的路径，不管你的代码是在哪个平台上运行的。例如，解析一个从 Windows 系统传过来的路径字符串。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 显式使用 Windows 风格的路径处理</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> dirname</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">win32</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">C:</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">Path</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">To</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">File.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">dirname</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: C:\\Path\\To</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使这段代码在 Linux 或 macOS 上运行，使用<code>path.win32.dirname</code>方法仍然能够正确解析 Windows 风格的路径。</p><ol start="3"><li><strong>显式处理 POSIX 路径</strong></li></ol><p>相反地，如果你需要处理一个明确是 POSIX 风格的路径，即使在 Windows 上运行，也可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 显式使用 POSIX 风格的路径处理</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> dirname</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">posix</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/Path/To/File.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">dirname</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: /Path/To</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，你可以确保路径处理的逻辑与运行环境无关，达到真正的跨平台兼容。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>总之，Node.js 的<code>path</code>模块提供了强大的工具来处理和抽象化不同操作系统间的路径差异。了解并合理利用<code>path.win32</code>和<code>path.posix</code>子模块，可以让你的 Node.js 应用轻松实现跨平台兼容。</p><h2 id="path-basename-path-suffix" tabindex="-1"><a class="header-anchor" href="#path-basename-path-suffix"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathbasenamepath-suffix" target="_blank" rel="noopener noreferrer">path.basename(path[, suffix])</a></span></a></h2><p>在 Node.js 中，<code>path.basename()</code> 是一个非常实用的函数，它用于从一个完整的文件路径中获取文件的名称。简单来说，就是帮你从一长串文件地址里，提取出文件名部分。这个函数属于 <code>path</code> 模块，因此在使用前需要先引入 <code>path</code> 模块。</p><p>函数的基本形式如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">basename</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#D8DEE9FF;">[</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> suffix</span><span style="color:#D8DEE9FF;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>path</code> 参数是一个字符串，表示完整的文件路径。</li><li><code>suffix</code> 是一个可选参数，如果提供，那么返回的文件名会去除这个后缀名。</li></ul><p>让我们来举几个例子看看 <code>path.basename()</code> 在实际应用中是如何工作的：</p><h3 id="例子-1-基本用法" tabindex="-1"><a class="header-anchor" href="#例子-1-基本用法"><span>例子 1：基本用法</span></a></h3><p>假设我们有一个文件路径 <code>/user/docs/Letter.txt</code>，我们想要获取文件名 <code>Letter.txt</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/user/docs/Letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">basename</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出：Letter.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子-2-去除文件后缀" tabindex="-1"><a class="header-anchor" href="#例子-2-去除文件后缀"><span>例子 2：去除文件后缀</span></a></h3><p>如果我们只想获取不带扩展名的文件名，可以提供后缀名作为第二个参数。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/user/docs/Letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">basename</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出：Letter</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>path.basename()</code> 函数去除了 <code>.txt</code> 后缀，只返回了文件的基本名称 <code>Letter</code>。</p><h3 id="例子-3-处理复杂的文件路径" tabindex="-1"><a class="header-anchor" href="#例子-3-处理复杂的文件路径"><span>例子 3：处理复杂的文件路径</span></a></h3><p><code>path.basename()</code> 对于处理包含多级目录的复杂路径同样有效。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/user/docs/SomeFolder/AnotherFolder/Report.pdf</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">basename</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出：Report.pdf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论路径有多复杂，<code>path.basename()</code> 都会准确地提取出文件名 <code>Report.pdf</code>。</p><h3 id="例子-4-处理带有特殊字符的路径" tabindex="-1"><a class="header-anchor" href="#例子-4-处理带有特殊字符的路径"><span>例子 4：处理带有特殊字符的路径</span></a></h3><p>即使文件路径中包含了特殊字符或空格，<code>path.basename()</code> 也能正确处理。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/user/docs/Some Folder/Another Folder/My Letter.doc</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">basename</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出：My Letter.doc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些例子展示了 <code>path.basename()</code> 函数在不同场景下的灵活应用，无论是简单的文件名提取，还是去除文件后缀，或是处理复杂和特殊的文件路径，<code>path.basename()</code> 都能派上用场，使得文件操作在 Node.js 中变得更加简单方便。</p><h2 id="path-delimiter" tabindex="-1"><a class="header-anchor" href="#path-delimiter"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathdelimiter" target="_blank" rel="noopener noreferrer">path.delimiter</a></span></a></h2><p>在 Node.js 中，<code>path.delimiter</code>是一个非常实用的属性，它提供了一个平台特定的路径分隔符。具体来说，这意味着在不同的操作系统上，路径分隔符可能不同。在 Windows 系统上，路径分隔符是分号<code>;</code>，而在 POSIX 系统上（比如 Linux 和 macOS），路径分隔符是冒号<code>:</code>。</p><p>这个属性特别有用，因为它让你可以编写更具可移植性的代码。当你需要在环境变量中设置或修改路径时，<code>path.delimiter</code>就显得尤为重要。</p><p>让我们来看几个具体的例子来更好地理解<code>path.delimiter</code>的实际应用。</p><h3 id="示例-1-添加新路径到环境变量-path" tabindex="-1"><a class="header-anchor" href="#示例-1-添加新路径到环境变量-path"><span>示例 1：添加新路径到环境变量 PATH</span></a></h3><p>想象一下，你正在开发一个 Node.js 应用，需要临时添加一个新的路径到环境变量 PATH 中。这个新的路径可能是一个工具或库的位置，你的应用需要访问它。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设新的路径是 &#39;/usr/local/bin&#39;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> newPath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/usr/local/bin</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 获取当前的PATH环境变量</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> currentPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">env</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">PATH</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将新的路径添加到PATH中</span></span>\n<span class="line"><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">env</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">PATH</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> currentPath</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">delimiter</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> newPath</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">env</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">PATH</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码首先引入了<code>path</code>模块，然后定义了一个新的路径<code>newPath</code>。通过使用<code>path.delimiter</code>，我们可以安全地将这个新的路径添加到当前的<code>PATH</code>环境变量中，不用担心操作系统的差异。</p><h3 id="示例-2-分割环境变量-path" tabindex="-1"><a class="header-anchor" href="#示例-2-分割环境变量-path"><span>示例 2：分割环境变量 PATH</span></a></h3><p>如果你想要检查环境变量 PATH 中包含的所有路径，可以使用<code>path.delimiter</code>来分割这个环境变量。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 获取PATH环境变量并分割它</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> paths</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> process</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">env</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">PATH</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">split</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">delimiter</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">paths</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会打印出一个数组，其中包含了 PATH 环境变量中的所有路径。这对于诊断环境问题或者仅仅是了解当前环境配置都非常有用。</p><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h3><p>通过以上例子，我们可以看到<code>path.delimiter</code>在处理与操作系统相关的路径时的重要性和实用性。它允许我们编写更加清晰、可移植的代码，同时处理路径相关的任务时更加方便和安全。无论你是在处理环境变量还是需要跨平台工作，<code>path.delimiter</code>都是一个非常有价值的工具。</p><h2 id="path-dirname-path-1" tabindex="-1"><a class="header-anchor" href="#path-dirname-path-1"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathdirnamepath" target="_blank" rel="noopener noreferrer">path.dirname(path)</a></span></a></h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它让开发者能够使用 JavaScript 来编写服务器端的代码。在 Node.js 中有很多内置模块，<code>path</code> 模块就是其中之一，它提供了一系列用于处理文件路径的实用工具。</p><p><code>path.dirname(path)</code> 是 <code>path</code> 模块中的一个方法，它用于获取一个路径中的目录名。换句话说，它会返回路径中最后一部分前面的所有内容（即父目录的路径）。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法：</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>path</code> 参数是一个字符串，表示需要处理的路径。</li></ul><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值：</span></a></h3><p>返回给定路径的目录名，也就是参数中最后一个斜杠(<code>/</code> 或 <code>\\</code>，根据操作系统决定)之前的部分。</p><h3 id="实际例子-1" tabindex="-1"><a class="header-anchor" href="#实际例子-1"><span>实际例子：</span></a></h3><p>假设我们正在编写一个 Node.js 程序，需要知道某个文件的目录路径，下面是几个 <code>path.dirname()</code> 方法的例子。</p><ol><li><p><strong>获取普通文件路径的目录</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/home/user/documents/file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> directory</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">directory</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出：&#39;/home/user/documents&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>获取嵌套文件的目录</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/home/user/docs/letters/johnDoe.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> directory</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">directory</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出：&#39;/home/user/docs/letters&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用相对路径</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./user/docs/letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> directory</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">directory</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出：&#39;./user/docs&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在 Windows 系统中的路径</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">C:</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">Users</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">user</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">docs</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> directory</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">directory</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出：&#39;C:\\\\Users\\\\user\\\\docs&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，在 Windows 系统中路径通常使用反斜杠<code>\\</code>，而在类 Unix 系统（如 Linux 和 macOS）中使用正斜杠<code>/</code>。</p></li><li><p><strong>只有文件名时</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> directory</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">dirname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">directory</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出：&#39;.&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当只有文件名，没有前置的目录路径时，<code>dirname</code> 方法将返回 <code>&#39;.&#39;</code>，代表当前工作目录。</p></li></ol><p><code>path.dirname()</code> 方法在处理路径相关的任务时非常有帮助，比如当你需要根据一个文件的路径来创建同一目录下的其他文件或者目录的时候。它也可以用在构建工具、文件管理器、自动化脚本等场景中。总之，只要涉及到路径处理，<code>path.dirname()</code> 就可能会派上用场。</p><h2 id="path-extname-path-1" tabindex="-1"><a class="header-anchor" href="#path-extname-path-1"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathextnamepath" target="_blank" rel="noopener noreferrer">path.extname(path)</a></span></a></h2><p>当然，让我们简单而通俗地解释一下 Node.js 中的<code>path.extname(path)</code>方法。</p><p>在计算机中，文件通常具有与其名称相关联的扩展名，以指示文件的类型。例如，<code>.txt</code>表示文本文件，<code>.jpg</code>表示 JPEG 图像文件等。这些扩展名帮助操作系统理解如何处理不同类型的文件。</p><p>在 Node.js 中，<code>path.extname(path)</code>是一个非常实用的方法，它从一个文件路径中提取出文件的扩展名。这个方法属于 Node.js 的<code>path</code>模块，这个模块专门用于处理和转换文件路径的各种问题。</p><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例：</span></a></h3><p>假设你正在开发一个 Node.js 应用程序，需要根据不同类型的文件执行不同操作。这时候，你就可以使用<code>path.extname()</code>来获取文件的扩展名，并基于这个信息决定下一步操作。</p><p>举几个实际的例子:</p><ol><li><strong>图片上传功能</strong>：你正在开发一个网站，需要用户上传头像。在保存前，需要检查上传的是否为图片文件（比如 <code>.png</code>, <code>.jpg</code> 等）。你可以使用 <code>path.extname()</code> 来获取文件扩展名，然后判断是否符合图片格式。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/user/profile/picture.jpg</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> extName</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">extName</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.jpg</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ||</span><span style="color:#D8DEE9;"> extName</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.png</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">It&#39;s a valid image file.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Invalid image file.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>处理日志文件</strong>：你的应用生成了多种类型的文件，包括日志文件（<code>.log</code>），并且你需要编写一个脚本来仅分析这些日志文件。使用<code>path.extname()</code>可以帮助你快速筛选出所有<code>.log</code>文件。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> logFilePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/var/log/app/error.log</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> configFilePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/etc/app/config.json</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">logFilePath</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: .log</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">configFilePath</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: .json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>静态文件服务器</strong>：如果你正在使用 Node.js 构建一个简单的静态文件服务器，你可能需要根据请求的文件类型设置正确的 MIME 类型。通过使用<code>path.extname()</code>获取文件的扩展名，你可以映射到相应的 MIME 类型并设置响应头。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> http</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">http</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">createServer</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">req</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">    let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> req</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">url</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">    let</span><span style="color:#D8DEE9;"> extName</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">    let</span><span style="color:#D8DEE9;"> contentType</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">text/html</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 默认内容类型</span></span>\n<span class="line"><span style="color:#81A1C1;">    switch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">extName</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;">      case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">        contentType</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">text/javascript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">        break;</span></span>\n<span class="line"><span style="color:#81A1C1;">      case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.css</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span></span>\n<span class="line"><span style="color:#D8DEE9;">        contentType</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">text/css</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">        break;</span></span>\n<span class="line"><span style="color:#616E88;">      // 更多类型...</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">    fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">error</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> content</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">      if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">error</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">        res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">writeHead</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">200</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Content-Type</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> contentType</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">        res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">content</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">utf-8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">      }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">        // 错误处理...</span></span>\n<span class="line"><span style="color:#ECEFF4;">      }</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">listen</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">8080</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这些例子，你可以看到<code>path.extname()</code>是如何在处理文件和目录路径时起到关键作用的。这种方法简洁明了，使得管理和操作文件系统变得更加方便可行。</p><h2 id="path-format-pathobject" tabindex="-1"><a class="header-anchor" href="#path-format-pathobject"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathformatpathobject" target="_blank" rel="noopener noreferrer">path.format(pathObject)</a></span></a></h2><p>好的，让我来详细解释一下 Node.js 中的 <code>path.format(pathObject)</code> 方法。</p><p>在 Node.js 中，<code>path</code> 模块提供了一系列用于处理文件路径的实用工具。其中，<code>path.format(pathObject)</code> 是一个非常有用的方法，它可以将一个路径对象（pathObject）转换成一个路径字符串。这个方法非常适合在你需要从各个部分构建一个完整文件路径的场景中使用。</p><p>先让我们了解一下 <code>pathObject</code>。这是一个包含以下属性的对象：</p><ul><li><code>dir</code> : 文件所在的目录，例如 <code>/home/user/dir</code></li><li><code>root</code> : 根路径，例如 <code>/</code></li><li><code>base</code> : 文件的全名，包括扩展名，例如 <code>file.txt</code></li><li><code>name</code> : 文件的名称，不包括扩展名，例如 <code>file</code></li><li><code>ext</code> : 文件的扩展名，例如 <code>.txt</code></li></ul><p>现在，让我们通过几个例子来看看 <code>path.format()</code> 是如何工作的：</p><ol><li><p><strong>基本示例</strong><br> 假设我们有一个路径对象如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> pathObject</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">  dir</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/home/user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  base</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用 <code>path.format(pathObject)</code>，它将返回：<code>&#39;/home/user/file.txt&#39;</code>。这里，<code>dir</code> 和 <code>base</code> 被合并成一个完整的路径。</p></li><li><p><strong>分开指定文件名和扩展名</strong><br> 如果我们不是用 <code>base</code>，而是分别用 <code>name</code> 和 <code>ext</code> 来指定文件名和扩展名，如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> pathObject</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">  dir</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/home/user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">file</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  ext</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>path.format(pathObject)</code> 将得到相同的结果：<code>&#39;/home/user/file.txt&#39;</code>。</p></li><li><p><strong>只有根路径和文件名</strong><br> 有时候，你可能只有根路径和文件名，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> pathObject</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">  root</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  base</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候 <code>path.format(pathObject)</code> 会返回 <code>&#39;/file.txt&#39;</code>。</p></li></ol><p>这个方法在处理路径时非常灵活，特别是当你需要动态构建路径的时候。不过，要注意的是，如果 <code>pathObject</code> 中的某些属性值是不兼容的（比如同时指定了 <code>dir</code> 和 <code>root</code>），那么 <code>path.format()</code> 可能不会按照你预期的方式工作。所以，使用时需要确保路径对象的属性是适当的和相互协调的。</p><h2 id="path-isabsolute-path" tabindex="-1"><a class="header-anchor" href="#path-isabsolute-path"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathisabsolutepath" target="_blank" rel="noopener noreferrer">path.isAbsolute(path)</a></span></a></h2><p>当我们谈论文件系统中的路径时，主要有两种类型：绝对路径和相对路径。让我先解释这两个概念：</p><ul><li><strong>绝对路径</strong>是从文件系统的根目录开始的完整路径。无论当前工作目录是什么，它始终指向同一个文件或目录。在 Windows 上，绝对路径可能看起来像<code>C:\\Users\\Username\\Documents\\file.txt</code>；在 Unix-like 系统（比如 Linux 或 MacOS）上，它可能看起来像<code>/Users/Username/Documents/file.txt</code>。</li><li><strong>相对路径</strong>基于当前工作目录的路径。例如，如果您的当前工作目录是<code>/Users/Username/Documents</code>，那么相对路径<code>./file.txt</code>指的就是<code>/Users/Username/Documents/file.txt</code>。</li></ul><p>在 Node.js 中，<code>path</code>模块提供了各种用于处理文件路径的实用函数，其中<code>path.isAbsolute()</code>方法用于检查给定的路径是否是一个绝对路径。</p><h3 id="path-isabsolute-path-1" tabindex="-1"><a class="header-anchor" href="#path-isabsolute-path-1"><span><code>path.isAbsolute(path)</code></span></a></h3><p>这个方法接受一个路径字符串作为参数，如果这个路径是绝对的，它就返回<code>true</code>；否则，返回<code>false</code>。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><p>让我们通过一些实际示例来看看它是如何工作的：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 绝对路径示例</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">isAbsolute</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/home/user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Unix-like 系统: 输出 true</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">isAbsolute</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">C:</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">path</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">dir</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Windows系统: 输出 true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 相对路径示例</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">isAbsolute</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">./home/user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出 false</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">isAbsolute</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">home/user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出 false</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">isAbsolute</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">../user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出 false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h4><ol><li><p><strong>文件操作安全性</strong> - 当你的程序需要处理用户输入的文件路径时，确定一个路径是否为绝对路径可以帮助你做出更安全的决定。例如，如果你的程序仅允许访问某个特定的目录树内的文件，确保路径是相对的且不包含向上导航（例如<code>../</code>）可以减少安全风险。</p></li><li><p><strong>构建跨平台应用</strong> - 当开发一个既要在 Windows 也要在 Unix-like 系统上运行的应用时，正确处理文件路径是个挑战。使用<code>path.isAbsolute()</code>可以帮助你编写出能够识别并适应不同操作系统路径规范的代码。</p></li><li><p><strong>路径拼接</strong> - 在进行文件路径拼接之前检查一个路径片段是否为绝对路径，可以帮助你决定是否需要添加额外的路径分隔符或是采取其他措施来构建有效的文件路径。</p></li></ol><p>希望这能帮助你更好地理解<code>path.isAbsolute()</code>在 Node.js 中的作用和应用场景！</p><h2 id="path-join-paths-1" tabindex="-1"><a class="header-anchor" href="#path-join-paths-1"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathjoinpaths" target="_blank" rel="noopener noreferrer">path.join([...paths])</a></span></a></h2><p>在 Node.js 中，<code>path.join([...paths])</code>是一个非常实用的方法，它用于将多个路径片段合并成一个单一的路径。这个方法在处理文件路径时特别有用，因为它会自动处理不同操作系统中的路径分隔符差异，比如 Windows 使用反斜杠<code>\\</code>，而 Linux 和 macOS 使用正斜杠<code>/</code>。这就意味着，使用<code>path.join()</code>方法可以让你的代码更加可移植，即在不同的操作系统上都能正常工作。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p><code>path.join([...paths])</code>方法接受一个路径数组<code>[...paths]</code>作为参数，然后返回这些路径组合后的结果。组合时，如果在路径之间缺少必要的分隔符，<code>path.join()</code>会自动添加这个分隔符。同样地，如果存在多余的分隔符，<code>path.join()</code>也会智能地去除它们。这样，无论输入路径是什么样子，输出都是一个格式正确的路径。</p><h3 id="实际运用的例子" tabindex="-1"><a class="header-anchor" href="#实际运用的例子"><span>实际运用的例子</span></a></h3><h4 id="_1-合并文件路径" tabindex="-1"><a class="header-anchor" href="#_1-合并文件路径"><span>1. 合并文件路径</span></a></h4><p>假设你正在编写一个 Node.js 应用，需要根据用户的输入构建一个文件的完整路径：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设用户输入的文件夹和文件名</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> folder</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">用户/文档</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fileName</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">报告.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用path.join合并成完整的文件路径</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fullPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">folder</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> fileName</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">fullPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 在Linux或macOS上，输出：用户/文档/报告.txt</span></span>\n<span class="line"><span style="color:#616E88;">// 在Windows上，输出：用户\\文档\\报告.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-创建跨平台的文件路径" tabindex="-1"><a class="header-anchor" href="#_2-创建跨平台的文件路径"><span>2. 创建跨平台的文件路径</span></a></h4><p>在开发跨平台应用时，需要确保你的应用在不同操作系统上都能正确地访问文件系统：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 跨平台方式定义文件路径</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> logsPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">__dirname</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">logs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">app.log</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">logsPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 在Linux或macOS上，输出：/你的项目路径/logs/app.log</span></span>\n<span class="line"><span style="color:#616E88;">// 在Windows上，输出：\\你的项目路径\\logs\\app.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法非常方便，因为它省去了手动检查操作系统和添加条件逻辑来处理路径分隔符的麻烦。</p><h4 id="_3-解决路径分隔符问题" tabindex="-1"><a class="header-anchor" href="#_3-解决路径分隔符问题"><span>3. 解决路径分隔符问题</span></a></h4><p>当你的应用需要在不同的操作系统上运行时，直接使用字符串来拼接路径可能会导致问题：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 这是一个不推荐的做法</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> badPath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">我的项目</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">文件</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用path.join来避免潜在的问题</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> goodPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">我的项目</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">文件</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">goodPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出总是正确的路径格式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用<code>path.join</code>，你可以确保生成的路径在任何操作系统上都是有效且正确的，无需担心分隔符问题。</p><p>总之，<code>path.join</code>是处理文件路径时的必备工具，它通过简化路径操作，帮助开发者编写更加健壯、可移植的代码。</p><h2 id="path-normalize-path" tabindex="-1"><a class="header-anchor" href="#path-normalize-path"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathnormalizepath" target="_blank" rel="noopener noreferrer">path.normalize(path)</a></span></a></h2><p>好的，让我们来聊聊 Node.js 中的 <code>path.normalize(path)</code> 函数。</p><p>当你在编写程序时，特别是需要处理文件系统和文件路径时，你可能会遇到各种不同形式的路径字符串。有时候，这些路径可能包含多余的分隔符（比如 <code>/</code> 或 <code>\\</code>），或者是混合使用了正斜杠和反斜杠，在 Windows 系统中，还可能包含<code>.</code>和<code>..</code>等相对路径元素。</p><p><code>path.normalize(path)</code> 函数的作用就是将任何非标准化的路径字符串转换成一个标准化的路径字符串。这其中包括：</p><ol><li>解析掉多余的分隔符：将连续的、重复的分隔符替换为单个分隔符。</li><li>处理特殊的相对路径标记：比如 <code>.</code> 表示当前目录，<code>..</code> 表示上级目录。</li><li>保证路径的一致性：确保路径字符串符合当前操作系统的路径规范。</li></ol><p>下面通过一些例子来具体说明 <code>path.normalize()</code> 是如何工作的。</p><h3 id="例子-1-去除多余的分隔符" tabindex="-1"><a class="header-anchor" href="#例子-1-去除多余的分隔符"><span>例子 1：去除多余的分隔符</span></a></h3><p>假设你有一个包含多余分隔符的路径字符串：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> dirtyPath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/foo////bar//baz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> normalizedPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">normalize</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">dirtyPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">normalizedPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: &#39;/foo/bar/baz&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，多出的 <code>/</code> 被 <code>normalize</code> 处理掉了，使得输出的路径更加整洁。</p><h3 id="例子-2-处理相对路径" tabindex="-1"><a class="header-anchor" href="#例子-2-处理相对路径"><span>例子 2：处理相对路径</span></a></h3><p>考虑以下包含相对路径元素的路径字符串：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">//文書は桜茶から来ています。商用目的では使用しないでください。</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> dirtyPath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/foo/bar/../../baz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> normalizedPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">normalize</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">dirtyPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">normalizedPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: &#39;/baz&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>..</code> 表示上一级目录，所以 <code>/foo/bar/..</code> 会回退到 <code>/foo</code> ，再一次 <code>..</code> 回退到根目录 <code>/</code> ，最后加上 <code>baz</code> ，结果就是 <code>/baz</code> 。</p><h3 id="例子-3-混合分隔符和相对路径" tabindex="-1"><a class="header-anchor" href="#例子-3-混合分隔符和相对路径"><span>例子 3：混合分隔符和相对路径</span></a></h3><p>现在让我们看一个更复杂的情况：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> dirtyPath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">C:</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">foo</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">..</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">bar</span><span style="color:#EBCB8B;">\\\\\\\\</span><span style="color:#A3BE8C;">baz///qux</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">..</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">quux</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> normalizedPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">normalize</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">dirtyPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">normalizedPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 如果是在Windows平台，输出: &#39;C:\\bar\\baz\\quux&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们处理了反斜杠 <code>\\</code> 和正斜杠 <code>/</code> 的混合使用，同时解析了 <code>..</code> 来进行目录的回退。注意，由于 Node.js 在不同的操作系统中行为略有不同，上述代码在 Windows 平台上运行的结果可能与 Linux 或 macOS 不同。</p><p>总之，<code>path.normalize()</code> 是一个非常有用的函数，它可以帮助你确保文件路径的一致性，处理路径中可能出现的各种异常情况，从而在你的代码中避免潜在的错误。</p><h2 id="path-parse-path" tabindex="-1"><a class="header-anchor" href="#path-parse-path"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathparsepath" target="_blank" rel="noopener noreferrer">path.parse(path)</a></span></a></h2><p><code>path.parse(path)</code> 是 Node.js 中 <code>path</code> 模块提供的一个非常实用的方法，它可以将一个路径字符串解析成一个对象，让你能更方便地获取路径的不同部分，如根路径、目录、文件名、扩展名等。</p><h3 id="如何工作" tabindex="-1"><a class="header-anchor" href="#如何工作"><span>如何工作</span></a></h3><p>假设你有一个文件路径字符串，<code>path.parse()</code> 方法将会把它分解成一个对象，包含以下属性：</p><ul><li><code>root</code>：根路径，如 <code>/</code> 或 <code>C:\\</code>。</li><li><code>dir</code>：完整的目录路径，不包括文件名。</li><li><code>base</code>：完整的文件名，包括扩展名。</li><li><code>name</code>：文件名，不包括扩展名。</li><li><code>ext</code>：文件的扩展名，包括点（<code>.</code>）。</li></ul><h3 id="实际运用例子" tabindex="-1"><a class="header-anchor" href="#实际运用例子"><span>实际运用例子</span></a></h3><p>假设你正在开发一个 Node.js 应用，需要处理不同的文件路径，来获取文件名、扩展名等信息。<code>path.parse()</code> 方法在这种情况下非常有用。</p><h4 id="例子-1-基本使用" tabindex="-1"><a class="header-anchor" href="#例子-1-基本使用"><span>例子 1：基本使用</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设我们有一个文件路径</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/user/docs/Letter.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用 path.parse 解析路径</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> parsed</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parse</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">parsed</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的输出将是：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  root</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">/</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  dir</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">/user/docs</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  base</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Letter.txt</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Letter</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  ext</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">.txt</span><span style="color:#ECEFF4;">&#39;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子-2-动态文件处理" tabindex="-1"><a class="header-anchor" href="#例子-2-动态文件处理"><span>例子 2：动态文件处理</span></a></h4><p>假设你正在编写一个脚本，需要根据不同的文件路径动态地处理文件（比如读取、修改文件名等）。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 动态获取文件路径</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/user/docs/Report2023.pdf</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 解析路径</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> parsedPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parse</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 做一些基于文件信息的操作，比如更改文件名</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> newFilePath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span></span>\n<span class="line"><span style="color:#D8DEE9;">  parsedPath</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">dir</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#D8DEE9;">  parsedPath</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">_FINAL</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> parsedPath</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ext</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 重命名文件</span></span>\n<span class="line"><span style="color:#D8DEE9;">fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">rename</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> newFilePath</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">throw</span><span style="color:#D8DEE9;"> err</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">文件重命名成功！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本将 <code>/user/docs/Report2023.pdf</code> 重命名为 <code>/user/docs/Report2023_FINAL.pdf</code>。</p><p><code>path.parse()</code> 方法通过将路径字符串转换为易于操作的对象，极大地简化了文件路径处理的复杂性，使得基于路径的操作变得更加直观和容易管理。</p><h2 id="path-posix" tabindex="-1"><a class="header-anchor" href="#path-posix"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathposix" target="_blank" rel="noopener noreferrer">path.posix</a></span></a></h2><p>在 Node.js 中，<code>path</code>模块提供了一些非常有用的工具来处理文件路径。这个模块可以帮助你执行多种文件路径操作，比如连接路径、解析路径、获取文件的扩展名等。<code>path</code>模块有两个主要的子模块：<code>path.win32</code>和<code>path.posix</code>，它们分别用于 Windows 和 POSIX（Portable Operating System Interface，可移植操作系统接口，Unix、Linux 等系统遵循的标准）系统的路径操作。这里我们关注的是<code>path.posix</code>。</p><h3 id="path-posix-是什么" tabindex="-1"><a class="header-anchor" href="#path-posix-是什么"><span>path.posix 是什么？</span></a></h3><p><code>path.posix</code>提供了一套用于处理文件路径的方法，这套方法遵循 POSIX 标准。这意味着，无论你的 Node.js 代码在哪种操作系统上运行，使用<code>path.posix</code>处理路径时，都会按照 POSIX 系统的方式来处理路径。比如，在 POSIX 系统中，路径使用正斜杠（<code>/</code>）作为目录分隔符。</p><h3 id="为什么要使用-path-posix" tabindex="-1"><a class="header-anchor" href="#为什么要使用-path-posix"><span>为什么要使用 path.posix？</span></a></h3><p>使用<code>path.posix</code>的主要原因是为了确保你的代码在处理路径时能够跨平台兼容。即使在 Windows 系统上运行，使用<code>path.posix</code>也会让路径操作符合 POSIX 标准，这在开发跨平台应用程序时特别有用。</p><h3 id="path-posix-的一些实际例子" tabindex="-1"><a class="header-anchor" href="#path-posix-的一些实际例子"><span>path.posix 的一些实际例子</span></a></h3><ol><li><p><strong>连接路径 - <code>path.posix.join([...paths])</code></strong>：</p><p>这个方法用于连接多个路径片段。假设你想要连接<code>&#39;usr&#39;</code>和<code>&#39;local&#39;</code>两个路径片段，你可以这样做：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fullPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">posix</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/usr</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">local</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">fullPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: /usr/local</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法确保返回的路径是正确连接的，无论路径片段是否以斜杠开始或结束。</p></li><li><p><strong>解析路径 - <code>path.posix.parse(pathString)</code></strong>：</p><p>这个方法可以解析一个路径字符串，并返回一个对象，该对象包含了路径的不同部分，比如根目录、目录、基础名（文件名+扩展名）、扩展名和文件名。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> parsedPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">posix</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parse</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/usr/local/bin/node</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">parsedPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">/* 输出：</span></span>\n<span class="line"><span style="color:#616E88;">{</span></span>\n<span class="line"><span style="color:#616E88;">  root: &#39;/&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  dir: &#39;/usr/local/bin&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  base: &#39;node&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  ext: &#39;&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  name: &#39;node&#39;</span></span>\n<span class="line"><span style="color:#616E88;">}</span></span>\n<span class="line"><span style="color:#616E88;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>获取扩展名 - <code>path.posix.extname(path)</code></strong>：</p><p>这个方法返回路径中文件的扩展名。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> ext</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">posix</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/usr/local/bin/node.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ext</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: .txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>path.posix</code>可以帮助你编写更加可移植、更加健壮的代码，特别是在开发需要在多种操作系统上运行的 Node.js 应用时。通过这些例子，你应该能够开始使用<code>path.posix</code>来处理文件路径了。</p></li></ol><h2 id="path-relative-from-to" tabindex="-1"><a class="header-anchor" href="#path-relative-from-to"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathrelativefrom-to" target="_blank" rel="noopener noreferrer">path.relative(from, to)</a></span></a></h2><p>Node.js 的 <code>path.relative(from, to)</code> 方法用于获取从 <code>from</code> 路径到 <code>to</code> 路径的相对路径。这个方法非常有用，特别是在处理文件路径时，你需要根据当前文件的位置找到另一个文件的位置。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><p>简单来说，<code>path.relative(from, to)</code> 接收两个参数：</p><ul><li><code>from</code>：起始路径</li><li><code>to</code>：目标路径</li></ul><p>然后，它会计算出如何从 <code>from</code> 路径“走到” <code>to</code> 路径的最短相对路径。</p><h3 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1"><span>返回值</span></a></h3><p>这个方法返回一个字符串，表示从 <code>from</code> 路径到 <code>to</code> 路径的相对路径。如果两个路径相同，它会返回一个空字符串。</p><h3 id="实际应用例子" tabindex="-1"><a class="header-anchor" href="#实际应用例子"><span>实际应用例子</span></a></h3><ol><li><p><strong>访问项目中的不同文件</strong></p><p>假设你的项目结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>/项目</span></span>\n<span class="line"><span>├─ /src</span></span>\n<span class="line"><span>│  └─ index.js</span></span>\n<span class="line"><span>└─ /images</span></span>\n<span class="line"><span>   └─ logo.png</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想在 <code>index.js</code> 中计算出到 <code>logo.png</code> 的相对路径，可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> fromPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">__dirname</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">src/index.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> toPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">__dirname</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">images/logo.png</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> relativePath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">relative</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">fromPath</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> toPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">relativePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: ../images/logo.png</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>__dirname</code> 是 Node.js 中的一个全局变量，表示当前执行脚本所在的目录。</p></li><li><p><strong>处理不同模块之间的依赖关系</strong></p><p>假设你正在开发一个 Node.js 应用，需要从一个模块引入另一个模块，但这两个模块的位置不同。使用 <code>path.relative()</code> 可以帮助你找到正确的引入路径。</p></li><li><p><strong>动态生成静态文件路径</strong></p><p>当你的 Node.js 应用需要根据用户请求动态地提供静态文件（如图片、JS 脚本、样式表等）时，你可以使用 <code>path.relative()</code> 来计算出这些文件相对于当前请求处理脚本的路径。</p></li></ol><p>通过这些例子，你可以看到 <code>path.relative()</code> 在处理和转换文件路径方面的强大功能，它使得在不同目录层级间的文件操作变得更加灵活和方便。</p><h2 id="path-resolve-paths-1" tabindex="-1"><a class="header-anchor" href="#path-resolve-paths-1"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathresolvepaths" target="_blank" rel="noopener noreferrer">path.resolve([...paths])</a></span></a></h2><p>在 Node.js 中，<code>path.resolve([...paths])</code>函数是一个非常实用的工具，它可以帮助你将一系列的路径片段解析成一个绝对路径。这意味着无论你提供的路径是相对的还是绝对的，<code>path.resolve</code>都会给出一个基于当前工作目录的绝对路径。它的工作方式有点像是你在命令行中从当前目录开始，逐步进入到提供的路径片段中，最后给出最终的目录位置。</p><h3 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1"><span>工作原理</span></a></h3><p>当你调用<code>path.resolve([...paths])</code>时，Node.js 会从右向左处理每个路径片段，直到构造出一个绝对路径为止。如果在处理所有给定的路径片段之后还没有形成一个绝对路径，Node.js 会再加上当前工作目录，从而确保返回一个绝对路径。这个过程可以通过以下几个步骤来理解：</p><ol><li><strong>开始于最右边的路径片段</strong>，看它是否足够构造出一个绝对路径。</li><li><strong>如果不是</strong>，则将其与左边的一个路径片段合并。</li><li><strong>重复此过程</strong>，直到构造出一个绝对路径或已处理所有路径片段。</li><li><strong>如果到最后都没有构成绝对路径</strong>，则将当前工作目录加到最前面。</li></ol><h3 id="实际运用例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用例子-1"><span>实际运用例子</span></a></h3><ol><li><strong>基本使用</strong> - 将相对路径转换为绝对路径：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设当前工作目录是 /home/user/project</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">src</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">app.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出: &#39;/home/user/project/src/app.js&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>src</code>和<code>app.js</code>被合并成了一个相对于当前工作目录的绝对路径。</p><ol start="2"><li><strong>解析绝对路径</strong> - 当提供绝对路径时，<code>path.resolve</code>将直接返回该路径：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出: &#39;/foo/bar&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>即使前面的路径片段不是绝对路径，<code>path.resolve</code>也会一直处理直到找到一个绝对路径。</p><ol start="3"><li><strong>处理<code>.</code>和<code>..</code></strong> - 解析相对路径标识符：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 假设当前工作目录是 /home/user/project</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">src</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">..</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">tests</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出: &#39;/home/user/project/tests&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>..</code>表示上一级目录，所以<code>src</code>的上一级是<code>project</code>目录，然后是<code>tests</code>目录，最终路径就被解析为<code>/home/user/project/tests</code>。</p><p><code>path.resolve</code>是一个非常强大的工具，特别是在构建文件路径时，它能够确保你总是得到一个准确且可靠的绝对路径。</p><h2 id="path-sep" tabindex="-1"><a class="header-anchor" href="#path-sep"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathsep" target="_blank" rel="noopener noreferrer">path.sep</a></span></a></h2><p>在 Node.js 中，<code>path.sep</code>是一个非常有用的属性，它代表了系统特定的路径分隔符。也就是说，它用来表示在你的操作系统中用来分隔文件路径中的目录的字符。</p><ul><li>在 Windows 系统中，<code>path.sep</code>的值为反斜杠（<code>\\</code>）。</li><li>在 UNIX 和 Linux 系统，包括 macOS 在内的系统中，<code>path.sep</code>的值为正斜杠（<code>/</code>）。</li></ul><p>这个属性在处理跨平台的文件路径时特别有用，因为你可以不用担心具体是哪种操作系统，直接使用<code>path.sep</code>来确保你的程序能够在不同的操作系统中正确地处理文件路径。</p><h3 id="实际运用例子-2" tabindex="-1"><a class="header-anchor" href="#实际运用例子-2"><span>实际运用例子</span></a></h3><ol><li><p><strong>生成跨平台兼容的文件路径</strong></p><p>假设你想要创建一个文件路径，这个路径包含了几个目录和一个文件名。使用<code>path.sep</code>可以确保你的路径在不同操作系统上都是有效的。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> directories</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Users</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">JohnDoe</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Documents</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">MyFiles</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> fileName</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">report.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> directories</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sep</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sep</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> fileName</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Windows 上，这将输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>Users\\JohnDoe\\Documents\\MyFiles\\report.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而在 UNIX/Linux/macOS 上，输出将是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>Users/JohnDoe/Documents/MyFiles/report.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>解析路径时考虑系统差异</strong></p><p>当你需要处理来自不同操作系统的文件路径时，了解<code>path.sep</code>的值非常重要。这样你可以根据当前操作系统来适当地分割或者拼接路径。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> `</span><span style="color:#A3BE8C;">Users</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sep</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">JohnDoe</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sep</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">Documents</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sep</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">MyFiles</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sep</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">report.txt</span><span style="color:#ECEFF4;">`</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> parts</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> filePath</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">split</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sep</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">parts</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码将根据操作系统的不同，正确地将路径分割为其各个组成部分。</p></li></ol><p>通过这些例子，你可以看到<code>path.sep</code>是如何帮助开发者编写更加灵活和跨平台兼容的代码的。不需要手动判断操作系统类型，直接使用<code>path.sep</code>即可确保路径操作的正确性。</p><h2 id="path-tonamespacedpath-path" tabindex="-1"><a class="header-anchor" href="#path-tonamespacedpath-path"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathtonamespacedpathpath" target="_blank" rel="noopener noreferrer">path.toNamespacedPath(path)</a></span></a></h2><p>了解 <code>path.toNamespacedPath(path)</code> 之前，我们需要先简单了解下 Node.js 和文件系统路径的基础知识。</p><p>Node.js 是一个让 JavaScript 运行在服务器端的平台，它允许使用 JavaScript 来进行文件操作、网络请求等后端操作。而在处理文件和目录时，路径（path）是个非常核心的概念。</p><p>不同的操作系统对路径有不同的表示方式。例如，Windows 系统中路径通常使用反斜杠 (<code>\\</code>) 来分隔，如 <code>C:\\Users\\Example</code>；而在 UNIX/Linux 系统中，包括 macOS 在内，路径则使用正斜杠 (<code>/</code>) 分隔，如 <code>/Users/Example</code>。</p><h3 id="path-tonamespacedpath-path-1" tabindex="-1"><a class="header-anchor" href="#path-tonamespacedpath-path-1"><span>path.toNamespacedPath(path)</span></a></h3><p>在 Node.js 中，<code>path</code> 模块提供了一系列处理文件路径的实用工具函数。而 <code>path.toNamespacedPath(path)</code> 就是 <code>path</code> 模块中的一个函数，它的作用主要体现在 Windows 系统上。</p><p>Windows 系统支持一种特殊的命名空间路径格式，这种格式可以用来访问某些特殊的文件或设备，同时也能够处理长路径问题。这种特殊的路径格式以 <code>\\\\?\\</code> 开头，例如 <code>\\\\?\\C:\\Users\\Example</code>。</p><p><code>path.toNamespacedPath(path)</code> 函数的作用就是将一个普通的路径转换为 Windows 上的命名空间路径格式。如果在非 Windows 系统上使用，它基本上不会对路径做任何改变。</p><h4 id="举例说明" tabindex="-1"><a class="header-anchor" href="#举例说明"><span>举例说明</span></a></h4><p>考虑以下示例，看看如何在实际中使用 <code>path.toNamespacedPath(path)</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假设我们有一个普通的Windows路径</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> normalPath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">C:</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">Users</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">Example</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 使用path.toNamespacedPath()将其转换成命名空间路径</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> namespacedPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toNamespacedPath</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">normalPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">namespacedPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出： &#39;\\\\?\\C:\\Users\\Example&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Windows 系统上运行上述代码，你会发现 <code>normalPath</code> 被转换成了以 <code>\\\\?\\</code> 开头的路径格式。如果你在 macOS 或者 Linux 上运行相同的代码，则 <code>namespacedPath</code> 的值将与 <code>normalPath</code> 相同，因为在这些系统上不需要特殊的命名空间路径格式。</p><h4 id="实际应用场景-1" tabindex="-1"><a class="header-anchor" href="#实际应用场景-1"><span>实际应用场景</span></a></h4><p>在 Windows 上，当你需要处理超长路径（超过 260 个字符限制）时，或者需要直接访问一些特殊设备时，使用命名空间路径格式是非常有帮助的。通过 <code>path.toNamespacedPath(path)</code> 可以方便地得到这种格式的路径，从而在 Node.js 程序中处理这些特殊情况。</p><p>总结起来，<code>path.toNamespacedPath(path)</code> 主要在 Windows 系统上有其特殊应用，在其他系统上它不会改变路径的表现形式，但了解它的存在和作用对于跨平台 Node.js 应用的开发是有益的。</p><h2 id="path-win32" tabindex="-1"><a class="header-anchor" href="#path-win32"><span><a href="https://nodejs.org/docs/latest/api/path.html#pathwin32" target="_blank" rel="noopener noreferrer">path.win32</a></span></a></h2><p>Node.js 是一个非常流行的 JavaScript 运行环境，它允许你在服务器端运行 JavaScript 代码。在 Node.js 中有很多内置模块让开发更加方便、高效。其中，<code>path</code> 模块就是一个非常实用的内置模块，它提供了一系列的工具函数，用于处理和转换文件系统的路径。</p><h3 id="path-win32-1" tabindex="-1"><a class="header-anchor" href="#path-win32-1"><span><code>path.win32</code></span></a></h3><p><code>path.win32</code> 是 <code>path</code> 模块下的一个属性，它提供了一套专门为 Windows 系统设计的路径操作方法。尽管 Node.js 的代码大多数情况下是跨平台的，但是不同操作系统之间在文件路径的表示上还是有细微差别的。比如，在 Unix、Linux 或 macOS 上，路径使用斜杠（<code>/</code>）作为分隔符，而在 Windows 上，则使用反斜杠（<code>\\</code>）。</p><p>使用 <code>path.win32</code> 对象，可以确保你的路径操作在 Windows 系统上表现得和其他系统一样准确无误。这个对象下包括了一系列方法，例如：<code>join()</code>、<code>resolve()</code>、<code>basename()</code>、<code>dirname()</code>、<code>extname()</code> 等等，它们都是专门针对 Windows 路径设计的。</p><h4 id="实际运用示例" tabindex="-1"><a class="header-anchor" href="#实际运用示例"><span>实际运用示例</span></a></h4><ol><li><p><strong>路径合并 - <code>path.win32.join()</code></strong></p><p>如果你想要将多个路径片段合并成一个完整的路径，可以使用 <code>join()</code> 方法。在 Windows 系统中，这意味着用反斜杠连接各个片段。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> completePath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">win32</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span></span>\n<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">Users</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">JohnDoe</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">Documents</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&quot;</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">completePath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;Users\\JohnDoe\\Documents\\file.txt&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>获取文件扩展名 - <code>path.win32.extname()</code></strong></p><p>当你需要从文件路径中提取文件的扩展名时，可以使用 <code>extname()</code> 方法。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> extension</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">win32</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extname</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">report.xlsx</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">extension</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;.xlsx&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解析路径 - <code>path.win32.parse()</code></strong></p><p>如果你有一个路径字符串，想要分解成单独的部分（如目录名、文件名、扩展名等），可以使用 <code>parse()</code> 方法。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> parsedPath</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">win32</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parse</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">C:</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">Users</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">JohnDoe</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">Documents</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">parsedPath</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">/*</span></span>\n<span class="line"><span style="color:#616E88;">{</span></span>\n<span class="line"><span style="color:#616E88;">  root: &#39;C:\\\\&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  dir: &#39;C:\\\\Users\\\\JohnDoe\\\\Documents&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  base: &#39;file.txt&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  ext: &#39;.txt&#39;,</span></span>\n<span class="line"><span style="color:#616E88;">  name: &#39;file&#39;</span></span>\n<span class="line"><span style="color:#616E88;">}</span></span>\n<span class="line"><span style="color:#616E88;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>为什么需要 <code>path.win32</code>？</strong></p><p>即使你的 Node.js 应用主要运行在 Linux 或 macOS 系统上，考虑到代码的可移植性和兼容性，了解和使用 <code>path.win32</code> 可以在处理跨平台路径问题时避免很多不必要的麻烦。当然，如果你明确知道你的代码只会在 Windows 系统上运行，直接使用这些方法可以更方便地进行路径操作和管理。</p>',247)],o={},p=(0,n(8538).A)(o,[["render",function(s,a){return(0,l.uX)(),(0,l.CE)("div",null,e)}]]),t=JSON.parse('{"path":"/document/node-doc/Path.html","title":"Path","lang":"zh-CN","frontmatter":{"article":false,"description":"Path Node.js 中的 path 模块是一个用于处理文件和目录路径的实用工具集。这个模块提供了一系列非常有用的功能，使得操作路径变得简单而高效。下面我会通过几个基本概念和示例来解释它。 1. 为什么需要 path 模块？ 在不同的操作系统中，文件路径的表示方式可能会有所不同。比如，在 Windows 系统中，路径通常使用反斜杠（\\\\）作为分隔符，...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/document/node-doc/Path.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"Path"}],["meta",{"property":"og:description","content":"Path Node.js 中的 path 模块是一个用于处理文件和目录路径的实用工具集。这个模块提供了一系列非常有用的功能，使得操作路径变得简单而高效。下面我会通过几个基本概念和示例来解释它。 1. 为什么需要 path 模块？ 在不同的操作系统中，文件路径的表示方式可能会有所不同。比如，在 Windows 系统中，路径通常使用反斜杠（\\\\）作为分隔符，..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:46:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:46:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Path\\",\\"description\\":\\"Path Node.js 中的 path 模块是一个用于处理文件和目录路径的实用工具集。这个模块提供了一系列非常有用的功能，使得操作路径变得简单而高效。下面我会通过几个基本概念和示例来解释它。 1. 为什么需要 path 模块？ 在不同的操作系统中，文件路径的表示方式可能会有所不同。比如，在 Windows 系统中，路径通常使用反斜杠（\\\\\\\\）作为分隔符，...\\"}"]]},"headers":[{"level":3,"title":"1. 为什么需要 path 模块？","slug":"_1-为什么需要-path-模块","link":"#_1-为什么需要-path-模块","children":[]},{"level":3,"title":"2. 常用函数","slug":"_2-常用函数","link":"#_2-常用函数","children":[]},{"level":3,"title":"实际应用举例","slug":"实际应用举例","link":"#实际应用举例","children":[]},{"level":2,"title":"Windows vs. POSIX","slug":"windows-vs-posix","link":"#windows-vs-posix","children":[{"level":3,"title":"实际例子","slug":"实际例子","link":"#实际例子","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"path.basename(path[, suffix])","slug":"path-basename-path-suffix","link":"#path-basename-path-suffix","children":[{"level":3,"title":"例子 1：基本用法","slug":"例子-1-基本用法","link":"#例子-1-基本用法","children":[]},{"level":3,"title":"例子 2：去除文件后缀","slug":"例子-2-去除文件后缀","link":"#例子-2-去除文件后缀","children":[]},{"level":3,"title":"例子 3：处理复杂的文件路径","slug":"例子-3-处理复杂的文件路径","link":"#例子-3-处理复杂的文件路径","children":[]},{"level":3,"title":"例子 4：处理带有特殊字符的路径","slug":"例子-4-处理带有特殊字符的路径","link":"#例子-4-处理带有特殊字符的路径","children":[]}]},{"level":2,"title":"path.delimiter","slug":"path-delimiter","link":"#path-delimiter","children":[{"level":3,"title":"示例 1：添加新路径到环境变量 PATH","slug":"示例-1-添加新路径到环境变量-path","link":"#示例-1-添加新路径到环境变量-path","children":[]},{"level":3,"title":"示例 2：分割环境变量 PATH","slug":"示例-2-分割环境变量-path","link":"#示例-2-分割环境变量-path","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]}]},{"level":2,"title":"path.dirname(path)","slug":"path-dirname-path-1","link":"#path-dirname-path-1","children":[{"level":3,"title":"语法：","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"返回值：","slug":"返回值","link":"#返回值","children":[]},{"level":3,"title":"实际例子：","slug":"实际例子-1","link":"#实际例子-1","children":[]}]},{"level":2,"title":"path.extname(path)","slug":"path-extname-path-1","link":"#path-extname-path-1","children":[{"level":3,"title":"使用示例：","slug":"使用示例","link":"#使用示例","children":[]}]},{"level":2,"title":"path.format(pathObject)","slug":"path-format-pathobject","link":"#path-format-pathobject","children":[]},{"level":2,"title":"path.isAbsolute(path)","slug":"path-isabsolute-path","link":"#path-isabsolute-path","children":[{"level":3,"title":"path.isAbsolute(path)","slug":"path-isabsolute-path-1","link":"#path-isabsolute-path-1","children":[]}]},{"level":2,"title":"path.join([...paths])","slug":"path-join-paths-1","link":"#path-join-paths-1","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子","link":"#实际运用的例子","children":[]}]},{"level":2,"title":"path.normalize(path)","slug":"path-normalize-path","link":"#path-normalize-path","children":[{"level":3,"title":"例子 1：去除多余的分隔符","slug":"例子-1-去除多余的分隔符","link":"#例子-1-去除多余的分隔符","children":[]},{"level":3,"title":"例子 2：处理相对路径","slug":"例子-2-处理相对路径","link":"#例子-2-处理相对路径","children":[]},{"level":3,"title":"例子 3：混合分隔符和相对路径","slug":"例子-3-混合分隔符和相对路径","link":"#例子-3-混合分隔符和相对路径","children":[]}]},{"level":2,"title":"path.parse(path)","slug":"path-parse-path","link":"#path-parse-path","children":[{"level":3,"title":"如何工作","slug":"如何工作","link":"#如何工作","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子","link":"#实际运用例子","children":[]}]},{"level":2,"title":"path.posix","slug":"path-posix","link":"#path-posix","children":[{"level":3,"title":"path.posix 是什么？","slug":"path-posix-是什么","link":"#path-posix-是什么","children":[]},{"level":3,"title":"为什么要使用 path.posix？","slug":"为什么要使用-path-posix","link":"#为什么要使用-path-posix","children":[]},{"level":3,"title":"path.posix 的一些实际例子","slug":"path-posix-的一些实际例子","link":"#path-posix-的一些实际例子","children":[]}]},{"level":2,"title":"path.relative(from, to)","slug":"path-relative-from-to","link":"#path-relative-from-to","children":[{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"返回值","slug":"返回值-1","link":"#返回值-1","children":[]},{"level":3,"title":"实际应用例子","slug":"实际应用例子","link":"#实际应用例子","children":[]}]},{"level":2,"title":"path.resolve([...paths])","slug":"path-resolve-paths-1","link":"#path-resolve-paths-1","children":[{"level":3,"title":"工作原理","slug":"工作原理-1","link":"#工作原理-1","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-1","link":"#实际运用例子-1","children":[]}]},{"level":2,"title":"path.sep","slug":"path-sep","link":"#path-sep","children":[{"level":3,"title":"实际运用例子","slug":"实际运用例子-2","link":"#实际运用例子-2","children":[]}]},{"level":2,"title":"path.toNamespacedPath(path)","slug":"path-tonamespacedpath-path","link":"#path-tonamespacedpath-path","children":[{"level":3,"title":"path.toNamespacedPath(path)","slug":"path-tonamespacedpath-path-1","link":"#path-tonamespacedpath-path-1","children":[]}]},{"level":2,"title":"path.win32","slug":"path-win32","link":"#path-win32","children":[{"level":3,"title":"path.win32","slug":"path-win32-1","link":"#path-win32-1","children":[]}]}],"git":{"createdTime":1718963177000,"updatedTime":1718963177000,"contributors":[{"name":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":1}]},"readingTime":{"minutes":33.85,"words":10154},"filePathRelative":"document/node-doc/Path.md","localizedDate":"2024年6月21日","excerpt":"\\n<p>Node.js 中的 <code>path</code> 模块是一个用于处理文件和目录路径的实用工具集。这个模块提供了一系列非常有用的功能，使得操作路径变得简单而高效。下面我会通过几个基本概念和示例来解释它。</p>\\n<h3>1. 为什么需要 <code>path</code> 模块？</h3>\\n<p>在不同的操作系统中，文件路径的表示方式可能会有所不同。比如，在 Windows 系统中，路径通常使用反斜杠（<code>\\\\</code>）作为分隔符，如 <code>C:\\\\user\\\\docs\\\\Letter.txt</code>；而在 UNIX 或 Linux 系统中，路径则使用正斜杠（<code>/</code>）作为分隔符，如 <code>/user/docs/Letter.txt</code>。<code>path</code> 模块帮助开发者抽象这些差异，通过提供统一的接口来处理路径问题，从而编写出可在不同平台之间移植的代码。</p>","autoDesc":true}')},8538:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,l]of a)n[s]=l;return n}}}]);