"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[7361],{1514:(s,l,n)=>{n.r(l),n.d(l,{comp:()=>p,data:()=>i});var a=n(9034);const e=[(0,a.Fv)('<h1 id="三、其它-composition-api" tabindex="-1"><a class="header-anchor" href="#三、其它-composition-api"><span>三、其它 Composition API</span></a></h1><h2 id="_1-shallowreactive-与-shallowref" tabindex="-1"><a class="header-anchor" href="#_1-shallowreactive-与-shallowref"><span>1.shallowReactive 与 shallowRef</span></a></h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="_2-readonly-与-shallowreadonly" tabindex="-1"><a class="header-anchor" href="#_2-readonly-与-shallowreadonly"><span>2.readonly 与 shallowReadonly</span></a></h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="_3-toraw-与-markraw" tabindex="-1"><a class="header-anchor" href="#_3-toraw-与-markraw"><span>3.toRaw 与 markRaw</span></a></h2><ul><li>toRaw： <ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange;">响应式对象</strong>转为<strong style="color:orange;">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw： <ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景: <ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="_4-customref" tabindex="-1"><a class="header-anchor" href="#_4-customref"><span>4.customRef</span></a></h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;template&gt;</span></span>\n<span class="line"><span style="color:#81A1C1;">  &lt;input</span><span style="color:#8FBCBB;"> type</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">text</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> v-model</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9;">keyword</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>\n<span class="line"><span style="color:#81A1C1;">  &lt;h3&gt;</span><span style="color:#D8DEE9FF;">{{keyword}}</span><span style="color:#81A1C1;">&lt;/h3&gt;</span></span>\n<span class="line"><span style="color:#81A1C1;">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">&lt;script&gt;</span></span>\n<span class="line"><span style="color:#81A1C1;">  import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;">ref</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;">customRef</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">vue</span><span style="color:#ECEFF4;">&#39;</span></span>\n<span class="line"><span style="color:#81A1C1;">  export</span><span style="color:#81A1C1;"> default</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">    name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Demo</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">    setup</span><span style="color:#ECEFF4;">(){</span></span>\n<span class="line"><span style="color:#616E88;">      // let keyword = ref(&#39;hello&#39;) //使用Vue准备好的内置ref</span></span>\n<span class="line"><span style="color:#616E88;">      //自定义一个myRef</span></span>\n<span class="line"><span style="color:#81A1C1;">      function</span><span style="color:#88C0D0;"> myRef</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">delay</span><span style="color:#ECEFF4;">){</span></span>\n<span class="line"><span style="color:#81A1C1;">        let</span><span style="color:#D8DEE9;"> timer</span></span>\n<span class="line"><span style="color:#616E88;">        //通过customRef去实现自定义</span></span>\n<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#88C0D0;"> customRef</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">track</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">trigger</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">=&gt;</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;">          return</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">            get</span><span style="color:#ECEFF4;">(){</span></span>\n<span class="line"><span style="color:#88C0D0;">              track</span><span style="color:#D8DEE9FF;">() </span><span style="color:#616E88;">//告诉Vue这个value值是需要被“追踪”的</span></span>\n<span class="line"><span style="color:#81A1C1;">              return</span><span style="color:#D8DEE9;"> value</span></span>\n<span class="line"><span style="color:#ECEFF4;">            },</span></span>\n<span class="line"><span style="color:#88C0D0;">            set</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">newValue</span><span style="color:#ECEFF4;">){</span></span>\n<span class="line"><span style="color:#88C0D0;">              clearTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">timer</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#D8DEE9;">              timer</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">=&gt;</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">                value</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> newValue</span></span>\n<span class="line"><span style="color:#88C0D0;">                trigger</span><span style="color:#D8DEE9FF;">() </span><span style="color:#616E88;">//告诉Vue去更新界面</span></span>\n<span class="line"><span style="color:#ECEFF4;">              },</span><span style="color:#D8DEE9;">delay</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">            }</span></span>\n<span class="line"><span style="color:#ECEFF4;">          }</span></span>\n<span class="line"><span style="color:#ECEFF4;">        }</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">      }</span></span>\n<span class="line"><span style="color:#81A1C1;">      let</span><span style="color:#D8DEE9;"> keyword</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> myRef</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;">500</span><span style="color:#D8DEE9FF;">) </span><span style="color:#616E88;">//使用程序员自定义的ref</span></span>\n<span class="line"><span style="color:#81A1C1;">      return</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">        keyword</span></span>\n<span class="line"><span style="color:#ECEFF4;">      }</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#81A1C1;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5-provide-与-inject" tabindex="-1"><a class="header-anchor" href="#_5-provide-与-inject"><span>5.provide 与 inject</span></a></h2><figure><img src="https://v3.cn.vuejs.org/images/components_provide.png" alt="components_provide" tabindex="0" loading="lazy"><figcaption>components_provide</figcaption></figure><ul><li><p>作用：实现<strong style="color:#DD5145;">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">setup</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;"> ......</span></span>\n<span class="line"><span style="color:#81A1C1;">    let</span><span style="color:#D8DEE9;"> car</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> reactive</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;">name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">奔驰</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;">price</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">40万</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#88C0D0;">    provide</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">car</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">car</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#81A1C1;"> ......</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>后代组件中：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">setup</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">context</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;"> ......</span></span>\n<span class="line"><span style="color:#81A1C1;">     const</span><span style="color:#D8DEE9;"> car</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> inject</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">car</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#81A1C1;">     return</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;">car</span><span style="color:#ECEFF4;">}</span></span>\n<span class="line"><span style="color:#81A1C1;"> ......</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul><h2 id="_6-响应式数据的判断" tabindex="-1"><a class="header-anchor" href="#_6-响应式数据的判断"><span>6.响应式数据的判断</span></a></h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul>',14)],o={},p=(0,n(8538).A)(o,[["render",function(s,l){return(0,a.uX)(),(0,a.CE)("div",null,e)}]]),i=JSON.parse('{"path":"/framework_front/vue3/otherApi.html","title":"三、其它 Composition API","lang":"zh-CN","frontmatter":{"article":false,"description":"三、其它 Composition API 1.shallowReactive 与 shallowRef shallowReactive：只处理对象最外层属性的响应式（浅响应式）。 shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。 什么时候使用? 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shall...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/framework_front/vue3/otherApi.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"三、其它 Composition API"}],["meta",{"property":"og:description","content":"三、其它 Composition API 1.shallowReactive 与 shallowRef shallowReactive：只处理对象最外层属性的响应式（浅响应式）。 shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。 什么时候使用? 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shall..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://v3.cn.vuejs.org/images/components_provide.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-15T09:53:30.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2022-06-15T09:53:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"三、其它 Composition API\\",\\"description\\":\\"三、其它 Composition API 1.shallowReactive 与 shallowRef shallowReactive：只处理对象最外层属性的响应式（浅响应式）。 shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。 什么时候使用? 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shall...\\"}"]]},"headers":[{"level":2,"title":"1.shallowReactive 与 shallowRef","slug":"_1-shallowreactive-与-shallowref","link":"#_1-shallowreactive-与-shallowref","children":[]},{"level":2,"title":"2.readonly 与 shallowReadonly","slug":"_2-readonly-与-shallowreadonly","link":"#_2-readonly-与-shallowreadonly","children":[]},{"level":2,"title":"3.toRaw 与 markRaw","slug":"_3-toraw-与-markraw","link":"#_3-toraw-与-markraw","children":[]},{"level":2,"title":"4.customRef","slug":"_4-customref","link":"#_4-customref","children":[]},{"level":2,"title":"5.provide 与 inject","slug":"_5-provide-与-inject","link":"#_5-provide-与-inject","children":[]},{"level":2,"title":"6.响应式数据的判断","slug":"_6-响应式数据的判断","link":"#_6-响应式数据的判断","children":[]}],"git":{"createdTime":1655200609000,"updatedTime":1655286810000,"contributors":[{"name":"shiki","email":"kamiacgxu@gmail.com","commits":2}]},"readingTime":{"minutes":2.25,"words":676},"filePathRelative":"framework_front/vue3/otherApi.md","localizedDate":"2022年6月14日","excerpt":"\\n<h2>1.shallowReactive 与 shallowRef</h2>\\n<ul>\\n<li>\\n<p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>\\n</li>\\n<li>\\n<p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>\\n</li>\\n<li>\\n<p>什么时候使用?</p>\\n<ul>\\n<li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>\\n<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},8538:(s,l)=>{l.A=(s,l)=>{const n=s.__vccOpts||s;for(const[s,a]of l)n[s]=a;return n}}}]);