"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[2199],{1926:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>i,data:()=>o});var e=a(9034);const l=[(0,e.Fv)('<h1 id="应用和包管理" tabindex="-1"><a class="header-anchor" href="#应用和包管理"><span>应用和包管理</span></a></h1><h2 id="使用apt管理应用" tabindex="-1"><a class="header-anchor" href="#使用apt管理应用"><span>使用<code>apt</code>管理应用</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 列出系统已安装应用</span></span>\n<span class="line"><span style="color:#88C0D0;">apt</span><span style="color:#A3BE8C;"> list</span><span style="color:#A3BE8C;"> --installed</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 使用分页器</span></span>\n<span class="line"><span style="color:#88C0D0;">apt</span><span style="color:#A3BE8C;"> list</span><span style="color:#A3BE8C;"> --installed</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> less</span><span style="color:#A3BE8C;"> -N</span></span>\n<span class="line"><span style="color:#616E88;"># 输入 /apt 并按回车键，然后按 n 键，就会将每一个匹配到的 apt 字符串放到分页器第一行</span></span>\n<span class="line"><span style="color:#616E88;"># / 后可以加正则表达式</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 过滤命令 grep</span></span>\n<span class="line"><span style="color:#88C0D0;">apt</span><span style="color:#A3BE8C;"> list</span><span style="color:#A3BE8C;"> --installed</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> grep</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">^apt</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#A3BE8C;"> apt_related_pkgs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缓存策略：减轻软件源服务器检索压力提升用户体验，在本地保存一份软件源中的信息副本。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 安全软件前同步本地副本，防止本地缓存与服务器信息不一致导致安装软件失败</span></span>\n<span class="line"><span style="color:#88C0D0;">apt</span><span style="color:#A3BE8C;"> update</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 使用 search 命令搜索名字包含 Git 的应用</span></span>\n<span class="line"><span style="color:#616E88;"># 包名开头和结尾之间只有 git， 实现严格匹配</span></span>\n<span class="line"><span style="color:#88C0D0;">apt</span><span style="color:#A3BE8C;"> search</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">^git$</span><span style="color:#ECEFF4;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 免交互参数 -y</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> apt</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> -y</span><span style="color:#A3BE8C;"> git</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 升级缓存</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> apt</span><span style="color:#A3BE8C;"> update</span></span>\n<span class="line"><span style="color:#616E88;"># 列出可以升级的包</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> apt</span><span style="color:#A3BE8C;"> list</span><span style="color:#A3BE8C;"> --upgradable</span></span>\n<span class="line"><span style="color:#616E88;"># 完成升级</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> apt</span><span style="color:#A3BE8C;"> upgrade</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 移除可移除包</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> apt</span><span style="color:#A3BE8C;"> autoremove</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 卸载应用</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> apt</span><span style="color:#A3BE8C;"> remove</span><span style="color:#A3BE8C;"> git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用dpkg管理应用" tabindex="-1"><a class="header-anchor" href="#使用dpkg管理应用"><span>使用<code>dpkg</code>管理应用</span></a></h3><p>1.安装</p><p>手动安装<code>deb</code>包的一个常见原因:发行版要维护大量包，这些包都是独立开发的，彼此之间不会互相协调进度，保证兼容。所以避免发行版出现内部版本冲突的重任就落到了发行版维护者身上，而发行版维护者资源有限，不可能随时跟进每个包的新版本，验证它与其他包之间的兼容性。这时包开发者就会将最新版本发布到自己的网站上，供用户下载和安装，而不必等待发行版更新。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 使用命令行工具 wget 下载 deb 文件</span></span>\n<span class="line"><span style="color:#88C0D0;">wget</span><span style="color:#A3BE8C;"> https://github.com/jarun/googler/releases/download/v4.3.1/googler_4.3.1-1_ubuntu20.04.amd64.deb</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 查看一下这个安装包的元数据   -I 是 --info简写</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -I</span><span style="color:#A3BE8C;"> googler_4.3.1-1_ubuntu20.04.amd64.deb</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 查看这个安装包会在系统中添加哪些文件   -c 是 --contents 的简写</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -c</span><span style="color:#A3BE8C;"> googler_4.3.1-1_ubuntu20.04.amd64.deb</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 安装  -i 是 --install 的简写</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> dpkg</span><span style="color:#A3BE8C;"> -i</span><span style="color:#A3BE8C;"> googler_4.3.1-1_ubuntu20.04.amd64.deb</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 运行安装好的应用并检验文件是否存在  -L 是 --listfiles 的简写</span></span>\n<span class="line"><span style="color:#88C0D0;">googler</span><span style="color:#A3BE8C;"> -v</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -L</span><span style="color:#A3BE8C;"> googler</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然在实际安装过程中只有<code>dpkg -i</code>命令是必需的，其他都可以忽略，但安装前后查看一下安装文件的内容是提高安全性的好习惯。</p><p><code>dpkg</code>也提供了列出系统中已安装应用的功能</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># -l 是 --list 的简写</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -l</span><span style="color:#81A1C1;"> |</span><span style="color:#88C0D0;"> head</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 列出某个具体应用的信息</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -l</span><span style="color:#A3BE8C;"> googler</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.查询</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># -S 是 --search 的简写</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -S</span><span style="color:#A3BE8C;"> /usr/bin/googler</span></span>\n<span class="line"><span style="color:#88C0D0;">which</span><span style="color:#A3BE8C;"> ls</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -S</span><span style="color:#A3BE8C;"> /bin/ls</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -S</span><span style="color:#ECEFF4;"> $(</span><span style="color:#88C0D0;">which</span><span style="color:#A3BE8C;"> ls</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.卸载</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 卸载完成后查询</span></span>\n<span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> dpkg</span><span style="color:#A3BE8C;"> -r</span><span style="color:#A3BE8C;"> googler</span></span>\n<span class="line"><span style="color:#88C0D0;">dpkg</span><span style="color:#A3BE8C;"> -l</span><span style="color:#A3BE8C;"> googler</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>gdebi</code>工具：自动解析要安装的<code>deb</code>包的依赖，以及依赖的依赖，然后自动完成下载和安装。</p><p>所以下次安装<code>deb</code>包的时候，用<code>sudo gdebi googler_4.3.1-1_ubuntu20.04. amd64.deb</code>代替<code>sudo dpkg -i googler_4.3.1-1_ubuntu20.04.amd64.deb</code>即可。</p><p>4.安全</p><p>关于<code>dpkg</code>工具的最后一个话题与它的安全性有关。前面说过在安装之前可以通过<code>-I</code>、<code>-c</code>等参数检查包的元数据和内容，但这些方法不能发现可执行文件内部隐藏的恶意代码。所以为了保证系统安全，要养成只在官网下载<code>deb</code>包的习惯。对于从第三方得到的包，除非来源完全可靠，否则尽量不要安装。</p><h2 id="跨平台包管理器" tabindex="-1"><a class="header-anchor" href="#跨平台包管理器"><span>跨平台包管理器</span></a></h2><h3 id="homebrew" tabindex="-1"><a class="header-anchor" href="#homebrew"><span><code>Homebrew</code></span></a></h3><p>跨平台原理: 采用二进制—源码双重安装策略。</p><p>apt、yum 这些工具只要将应用及其依赖从软件源将二进制包下载下来，然后放到正确的位置就完成了安装过程。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 安装</span></span>\n<span class="line"><span style="color:#88C0D0;">/bin/bash</span><span style="color:#A3BE8C;"> -c</span><span style="color:#ECEFF4;"> &quot;$(</span><span style="color:#88C0D0;">curl</span><span style="color:#A3BE8C;"> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh</span><span style="color:#ECEFF4;">)&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>',25)],p={},i=(0,a(8538).A)(p,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,l)}]]),o=JSON.parse('{"path":"/linux/package.html","title":"应用和包管理","lang":"zh-CN","frontmatter":{"article":false,"date":"2024-05-21T00:00:00.000Z","description":"应用和包管理 使用apt管理应用 缓存策略：减轻软件源服务器检索压力提升用户体验，在本地保存一份软件源中的信息副本。 使用dpkg管理应用 1.安装 手动安装deb包的一个常见原因:发行版要维护大量包，这些包都是独立开发的，彼此之间不会互相协调进度，保证兼容。所以避免发行版出现内部版本冲突的重任就落到了发行版维护者身上，而发行版维护者资源有限，不可能随...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/linux/package.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"应用和包管理"}],["meta",{"property":"og:description","content":"应用和包管理 使用apt管理应用 缓存策略：减轻软件源服务器检索压力提升用户体验，在本地保存一份软件源中的信息副本。 使用dpkg管理应用 1.安装 手动安装deb包的一个常见原因:发行版要维护大量包，这些包都是独立开发的，彼此之间不会互相协调进度，保证兼容。所以避免发行版出现内部版本冲突的重任就落到了发行版维护者身上，而发行版维护者资源有限，不可能随..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-22T09:41:47.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:published_time","content":"2024-05-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-22T09:41:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"应用和包管理\\",\\"description\\":\\"应用和包管理 使用apt管理应用 缓存策略：减轻软件源服务器检索压力提升用户体验，在本地保存一份软件源中的信息副本。 使用dpkg管理应用 1.安装 手动安装deb包的一个常见原因:发行版要维护大量包，这些包都是独立开发的，彼此之间不会互相协调进度，保证兼容。所以避免发行版出现内部版本冲突的重任就落到了发行版维护者身上，而发行版维护者资源有限，不可能随...\\"}"]]},"headers":[{"level":2,"title":"使用apt管理应用","slug":"使用apt管理应用","link":"#使用apt管理应用","children":[{"level":3,"title":"使用dpkg管理应用","slug":"使用dpkg管理应用","link":"#使用dpkg管理应用","children":[]}]},{"level":2,"title":"跨平台包管理器","slug":"跨平台包管理器","link":"#跨平台包管理器","children":[{"level":3,"title":"Homebrew","slug":"homebrew","link":"#homebrew","children":[]}]}],"git":{"createdTime":1679046743000,"updatedTime":1716370907000,"contributors":[{"name":"shiki","email":"kamiacgxu@gmail.com","commits":3},{"name":"shiki ryougi","email":"shikiryougi@shikideMacBook.local","commits":3}]},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"linux/package.md","localizedDate":"2024年5月21日","excerpt":"\\n<h2>使用<code>apt</code>管理应用</h2>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"background-color:#2e3440ff;color:#d8dee9ff\\"><pre class=\\"shiki nord vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#616E88\\"># 列出系统已安装应用</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88C0D0\\">apt</span><span style=\\"color:#A3BE8C\\"> list</span><span style=\\"color:#A3BE8C\\"> --installed</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#616E88\\"># 使用分页器</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88C0D0\\">apt</span><span style=\\"color:#A3BE8C\\"> list</span><span style=\\"color:#A3BE8C\\"> --installed</span><span style=\\"color:#81A1C1\\"> |</span><span style=\\"color:#88C0D0\\"> less</span><span style=\\"color:#A3BE8C\\"> -N</span></span>\\n<span class=\\"line\\"><span style=\\"color:#616E88\\"># 输入 /apt 并按回车键，然后按 n 键，就会将每一个匹配到的 apt 字符串放到分页器第一行</span></span>\\n<span class=\\"line\\"><span style=\\"color:#616E88\\"># / 后可以加正则表达式</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#616E88\\"># 过滤命令 grep</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88C0D0\\">apt</span><span style=\\"color:#A3BE8C\\"> list</span><span style=\\"color:#A3BE8C\\"> --installed</span><span style=\\"color:#81A1C1\\"> |</span><span style=\\"color:#88C0D0\\"> grep</span><span style=\\"color:#ECEFF4\\"> \'</span><span style=\\"color:#A3BE8C\\">^apt</span><span style=\\"color:#ECEFF4\\">\'</span><span style=\\"color:#81A1C1\\"> &gt;</span><span style=\\"color:#A3BE8C\\"> apt_related_pkgs</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')},8538:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);