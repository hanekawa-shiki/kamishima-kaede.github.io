"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[9353],{2728:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>i,data:()=>y});var l=a(9034);const p=(0,l.Fv)('<h1 id="自动化更新部署" tabindex="-1"><a class="header-anchor" href="#自动化更新部署"><span>自动化更新部署</span></a></h1><p>这里要解决2个问题:</p><ul><li>1.<a href="#%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81">自动更新代码</a></li><li>2.<a href="#%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2">打包部署</a></li></ul><h2 id="自动更新代码" tabindex="-1"><a class="header-anchor" href="#自动更新代码"><span>自动更新代码</span></a></h2><p>这里通过使用<code>github</code>的<code>webhook</code>.</p><p>得知远程<code>git</code>仓库代码更新后,拉取更新服务器上<code>git</code>仓库</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>Git Hook</code>(钩子)是<code>Git</code>在代码提交、推送、合并等工作流程中引入的事件触发器，其中最常用的场景是代码检查，持续集成，自动部署等。</p><p><code>github</code>上关于<code>webook</code>操作的<a href="https://docs.github.com/cn/developers/webhooks-and-events/webhooks/about-webhooks" target="_blank" rel="noopener noreferrer">详细文档</a></p></div><p>这里要解决以下问题</p><ul><li>服务器接收<code>webhook</code>请求后再拉取<code>github</code>仓库代码</li></ul><p>解决方案:使用<code>nodejs</code>的<code>http</code>模块,写一个专门处理<code>webhook</code>请求的服务,该服务接收到<code>webhook</code>请求后,执行对应更新代码的<code>shell</code>脚本</p>',10),o=(0,l.Lk)("br",null,null,-1),e=["src"],c=(0,l.Fv)('<p>核心代码如下</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> http</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">http</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> spawn</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">child_process</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">spawn</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 这里使用了npm包github-webhook-handler,用来解析webhook请求</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> createHandler</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">github-webhook-handler</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 如图GitHub webhook中配置的Secret,如上图</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> secret</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Gae3$de&amp;1*Cub*IAmlr1ZB6L!ko9BAV#</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 日志配置</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> error</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> info</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">./log.js</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// path是webhook访问的路径,如上图</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> handler</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createHandler</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> path</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">/mywebhook</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> secret</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> secret</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">http</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">createServer</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">req</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">    handler</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">req</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">      res</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">statusCode</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 404</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">      res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">no such location</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">listen</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">8080</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;">// 这边的端口监听的本地服务器端口,通过nginx做的方向代理</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">handler</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">error</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  error</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听到push事件的时候执行我们的自动化脚本</span></span>\n<span class="line"><span style="color:#D8DEE9;">handler</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">push</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">event</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  info</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">info</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Received a push event for %s to %s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> event</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">payload</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">repository</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> event</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">payload</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ref</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // bash脚本代码如下</span></span>\n<span class="line"><span style="color:#88C0D0;">  runCommand</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">sh</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">./build.sh</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">txt</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    info</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">info</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">txt</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> runCommand</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">cmd</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> args</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> callback</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> child</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> spawn</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">cmd</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> args</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> resp</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &#39;&#39;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  child</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">buffer</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    resp</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> buffer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  child</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">stdout</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">end</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">    callback</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">resp</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包部署" tabindex="-1"><a class="header-anchor" href="#打包部署"><span>打包部署</span></a></h2><p>打包部署就是通过<code>bash</code>脚本实现,没什么好说的,直接上脚本</p><p>自动化脚本如下</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#! /bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 任意命令出错时终止运行</span></span>\n<span class="line"><span style="color:#88C0D0;">set</span><span style="color:#A3BE8C;"> -e</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 代码仓库目录</span></span>\n<span class="line"><span style="color:#D8DEE9;">GITURL</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">aaaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#616E88;"> # 仓库代码路径</span></span>\n<span class="line"><span style="color:#D8DEE9;">GITDIR</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/xxx/xxxx/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#616E88;"> # glone仓库路径</span></span>\n<span class="line"><span style="color:#D8DEE9;">BLOG</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/xxx/xxxx/abc/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#616E88;"> # 本地代码路径</span></span>\n<span class="line"><span style="color:#D8DEE9;">LOG</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/xxx/xxxx/bashLog</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#616E88;"> # 执行脚本日志路径</span></span>\n<span class="line"><span style="color:#616E88;"># Nginx 中配置的网站的 HTML 根目录</span></span>\n<span class="line"><span style="color:#D8DEE9;">OUTPUT</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/xxx/xxxx/www/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#616E88;"> # 打包后部署的路径</span></span>\n<span class="line"><span style="color:#D8DEE9;">LogNameDATE</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">`</span><span style="color:#88C0D0;">date</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">+%Y%m%d</span><span style="color:#ECEFF4;">&#39;`</span><span style="color:#616E88;"> # 时间戳</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">BACKUP DATE:</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> $(</span><span style="color:#88C0D0;">date</span><span style="color:#A3BE8C;"> +</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%Y-%m-%d %H:%M:%S</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">TIME</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> $(</span><span style="color:#88C0D0;">date</span><span style="color:#A3BE8C;"> +</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%Y-%m-%d %H:%M:%S</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> !</span><span style="color:#81A1C1;"> -d</span><span style="color:#D8DEE9;"> $BLOG</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>\n<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========git仓库不存在,拉取仓库==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">  cd</span><span style="color:#D8DEE9;"> $GITDIR</span></span>\n<span class="line"><span style="color:#88C0D0;">  git</span><span style="color:#A3BE8C;"> clone</span><span style="color:#D8DEE9;"> $GITURL</span></span>\n<span class="line"><span style="color:#88C0D0;">  cd</span><span style="color:#D8DEE9;"> $BLOG</span></span>\n<span class="line"><span style="color:#81A1C1;">  else</span></span>\n<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========git仓库已存在==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">  cd</span><span style="color:#D8DEE9;"> $GITDIR</span></span>\n<span class="line"><span style="color:#88C0D0;">  rm</span><span style="color:#A3BE8C;"> -rf</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./abc</span><span style="color:#ECEFF4;">&quot;</span></span>\n<span class="line"><span style="color:#88C0D0;">  git</span><span style="color:#A3BE8C;"> clone</span><span style="color:#D8DEE9;"> $GITURL</span></span>\n<span class="line"><span style="color:#88C0D0;">  cd</span><span style="color:#D8DEE9;"> $BLOG</span></span>\n<span class="line"><span style="color:#81A1C1;">fi</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========拉取代码==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> checkout</span><span style="color:#A3BE8C;"> master</span></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========删除缓存==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">rm</span><span style="color:#A3BE8C;"> -rf</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./node_modules</span><span style="color:#ECEFF4;">&quot;</span></span>\n<span class="line"><span style="color:#88C0D0;">yarn</span><span style="color:#A3BE8C;"> cache</span><span style="color:#A3BE8C;"> clean</span></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========下载依赖==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">yarn</span><span style="color:#A3BE8C;"> install</span></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========开始打包==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">yarn</span><span style="color:#A3BE8C;"> run</span><span style="color:#A3BE8C;"> build</span></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========删除生产目录==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">rm</span><span style="color:#A3BE8C;"> -rf</span><span style="color:#D8DEE9;"> $OUTPUT</span><span style="color:#A3BE8C;">/</span><span style="color:#81A1C1;">*</span></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========拷贝生产包==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span>\n<span class="line"><span style="color:#88C0D0;">cp</span><span style="color:#A3BE8C;"> -r</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./dist</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9;"> $OUTPUT</span><span style="color:#A3BE8C;">/</span></span>\n<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">==========部署成功==========</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&gt;</span><span style="color:#D8DEE9;"> $LOG</span><span style="color:#A3BE8C;">/</span><span style="color:#D8DEE9;">$LogNameDATE</span><span style="color:#A3BE8C;">.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),t=(0,l.Lk)("code",null,"github actions",-1),r=(0,l.Fv)('<h2 id="持久化服务" tabindex="-1"><a class="header-anchor" href="#持久化服务"><span>持久化服务</span></a></h2><p>这里我们引入<code>npm</code>包:<code>pm2</code>,做持久化服务.</p><p>为什么需要<code>pm2</code>?</p><ul><li>由于<code>node</code>是单进程应用,如果直接通过<code>node app</code>来启动一旦代码执行报错没做相应处理会造成整个应用崩溃,这里就需要<code>pm2</code>做进程管理了</li><li>除此之外<code>pm2</code>包括守护进程、监控、日志的一整套完整的功能</li></ul><p>这里我们全局安装<code>pm2</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">npm</span><span style="color:#A3BE8C;"> i</span><span style="color:#A3BE8C;"> -g</span><span style="color:#A3BE8C;"> pm2@latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>cd</code>到<code>node</code>服务的目录后,执行启动目录</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> ./webhook.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>pm2</code>常用操作</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 启动命令</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#616E88;"> # 启动nodeJs应用，进程的默认名称为文件名app</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> --name</span><span style="color:#A3BE8C;"> mynode</span><span style="color:#616E88;"> # 启动node，并指定进程名称为mynode</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> -i</span><span style="color:#A3BE8C;"> max</span><span style="color:#616E88;"> # 根据有效CPU数目启动最大进程数目</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> -i</span><span style="color:#B48EAD;"> 3</span><span style="color:#616E88;"> # 启动3个进程</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> --watch</span><span style="color:#616E88;"> # 实时监控的方式启动，app.js文件有变动时，pm2会自动reload</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> -x</span><span style="color:#616E88;"> # 用fork模式启动 app.js 而不是使用 cluster</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> -x</span><span style="color:#A3BE8C;"> –</span><span style="color:#A3BE8C;"> -a</span><span style="color:#B48EAD;"> 23</span><span style="color:#616E88;"> # 用fork模式启动 app.js 并且传递参数（-a 23）</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.json</span><span style="color:#616E88;"> # 启动进程, 在 app.json里设置选项</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> -i</span><span style="color:#A3BE8C;"> max</span><span style="color:#A3BE8C;"> –</span><span style="color:#A3BE8C;"> -a</span><span style="color:#B48EAD;"> 23</span><span style="color:#616E88;"> # 在 – 之后给 app.js 传递参数</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> start</span><span style="color:#A3BE8C;"> app.js</span><span style="color:#A3BE8C;"> -i</span><span style="color:#A3BE8C;"> max</span><span style="color:#A3BE8C;"> -e</span><span style="color:#A3BE8C;"> err.log</span><span style="color:#A3BE8C;"> -o</span><span style="color:#A3BE8C;"> out.log</span><span style="color:#616E88;"> # 启动并生成一个配置文件</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 查看与监视进程</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> list</span><span style="color:#616E88;"> #显示所有进程；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> show</span><span style="color:#A3BE8C;"> 0，pm2</span><span style="color:#A3BE8C;"> info</span><span style="color:#B48EAD;"> 0</span><span style="color:#616E88;"> # 查看进程id为 0 的详细信息；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> monit</span><span style="color:#616E88;"> # 进入监视页面，监视每个node进程的CPU和内存的使用情况。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 停止、删除进程</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> stop/delete</span><span style="color:#B48EAD;"> 0</span><span style="color:#616E88;"> # 停止/删除id为 0 的进程；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> stop/delete</span><span style="color:#A3BE8C;"> all</span><span style="color:#616E88;"> # 停止/删除所有进程。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 重启、重载</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> restart</span><span style="color:#B48EAD;"> 0</span><span style="color:#616E88;"> # 重启id为 0 的进程；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> restart</span><span style="color:#A3BE8C;"> all</span><span style="color:#616E88;"> # 重启所有进程；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> reload</span><span style="color:#B48EAD;"> 0</span><span style="color:#616E88;"> # 0秒停机重载id为 0 进程（用于 NETWORKED 进程）；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> reload</span><span style="color:#A3BE8C;"> all</span><span style="color:#616E88;"> # 重载所有进程。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 日志操作</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> logs</span><span style="color:#616E88;"> # 显示所有进程的日志；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> logs</span><span style="color:#B48EAD;"> 0</span><span style="color:#616E88;"> # 显示进程id为 0 的日志；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> flush</span><span style="color:#616E88;"> # 清空所有日志文件；</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> reloadLogs</span><span style="color:#616E88;"> # 重载所有日志。</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> startup</span><span style="color:#616E88;"> # 产生 init 脚本，保持进程活着。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;"># 杀死PM2进程</span></span>\n<span class="line"><span style="color:#88C0D0;">pm2</span><span style="color:#A3BE8C;"> kill</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',10),E={},i=(0,a(8538).A)(E,[["render",function(s,n){const a=(0,l.g2)("RouteLink");return(0,l.uX)(),(0,l.CE)("div",null,[p,(0,l.Lk)("p",null,[(0,l.eW)("github的webhook配置示意图:"),o,(0,l.Lk)("img",{src:s.$withBase("/imgs/webhook.png")},null,8,e)]),c,(0,l.Lk)("p",null,[(0,l.eW)("如果服务器资源比较紧张,也可以通过"),t,(0,l.eW)("自动化打包,并自动化部署,"),(0,l.bF)(a,{to:"/website_build/giuhub_actions.html"},{default:(0,l.k6)((()=>[(0,l.eW)("参考步骤")])),_:1})]),r])}]]),y=JSON.parse('{"path":"/website_build/pm2_bash.html","title":"自动化更新部署","lang":"zh-CN","frontmatter":{"article":false,"description":"自动化更新部署 这里要解决2个问题: 1.自动更新代码 2.打包部署 自动更新代码 这里通过使用github的webhook. 得知远程git仓库代码更新后,拉取更新服务器上git仓库 提示 Git Hook(钩子)是Git在代码提交、推送、合并等工作流程中引入的事件触发器，其中最常用的场景是代码检查，持续集成，自动部署等。 github上关于webo...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/website_build/pm2_bash.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"自动化更新部署"}],["meta",{"property":"og:description","content":"自动化更新部署 这里要解决2个问题: 1.自动更新代码 2.打包部署 自动更新代码 这里通过使用github的webhook. 得知远程git仓库代码更新后,拉取更新服务器上git仓库 提示 Git Hook(钩子)是Git在代码提交、推送、合并等工作流程中引入的事件触发器，其中最常用的场景是代码检查，持续集成，自动部署等。 github上关于webo..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-18T09:36:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2022-11-18T09:36:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"自动化更新部署\\",\\"description\\":\\"自动化更新部署 这里要解决2个问题: 1.自动更新代码 2.打包部署 自动更新代码 这里通过使用github的webhook. 得知远程git仓库代码更新后,拉取更新服务器上git仓库 提示 Git Hook(钩子)是Git在代码提交、推送、合并等工作流程中引入的事件触发器，其中最常用的场景是代码检查，持续集成，自动部署等。 github上关于webo...\\"}"]]},"headers":[{"level":2,"title":"自动更新代码","slug":"自动更新代码","link":"#自动更新代码","children":[]},{"level":2,"title":"打包部署","slug":"打包部署","link":"#打包部署","children":[]},{"level":2,"title":"持久化服务","slug":"持久化服务","link":"#持久化服务","children":[]}],"git":{"createdTime":1655200609000,"updatedTime":1668764177000,"contributors":[{"name":"shiki","email":"kamiacgxu@gmail.com","commits":5}]},"readingTime":{"minutes":4.25,"words":1274},"filePathRelative":"website_build/pm2&bash.md","localizedDate":"2022年6月14日","excerpt":"\\n<p>这里要解决2个问题:</p>\\n<ul>\\n<li>1.<a href=\\"#%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\\">自动更新代码</a></li>\\n<li>2.<a href=\\"#%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2\\">打包部署</a></li>\\n</ul>\\n<h2>自动更新代码</h2>\\n<p>这里通过使用<code>github</code>的<code>webhook</code>.</p>\\n<p>得知远程<code>git</code>仓库代码更新后,拉取更新服务器上<code>git</code>仓库</p>","autoDesc":true}')},8538:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,l]of n)a[s]=l;return a}}}]);