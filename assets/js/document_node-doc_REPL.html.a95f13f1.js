"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5507],{3509:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>p,data:()=>r});var l=n(9034);const e=[(0,l.Fv)('<h1 id="repl" tabindex="-1"><a class="header-anchor" href="#repl"><span><a href="https://nodejs.org/docs/latest/api/repl.html#repl" target="_blank" rel="noopener noreferrer">REPL</a></span></a></h1><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。这意味着你可以用 JavaScript 来编写用于网络服务器、命令行工具等的脚本。REPL（Read-Eval-Print Loop，读取-执行-打印循环）是 Node.js 提供的一个交互式编程环境，可以让你方便地测试 JavaScript 代码片段。</p><h3 id="repl-的基础" tabindex="-1"><a class="header-anchor" href="#repl-的基础"><span>REPL 的基础</span></a></h3><p>REPL 允许你输入 JavaScript 代码，并立刻看到代码执行结果。它非常适合实验性编程和快速学习。当你启动 Node.js 的 REPL 环境时（只要在命令行中输入 <code>node</code> 并回车），你会进入一个可以输入 JavaScript 代码的环境。</p><p>在 Node.js v21.7.1 中，REPL 环境可能包括一些特定的改进或新功能，但基本的使用方法如下：</p><ol><li><strong>启动</strong>：在命令行界面，输入 <code>node</code> 后按回车。</li><li><strong>使用</strong>：现在，你可以输入任何 JavaScript 代码，按回车后，这段代码将被执行，结果将直接输出在下一行。</li><li><strong>退出</strong>：输入 <code>.exit</code>，或者使用 Ctrl+C 两次，或者直接关闭命令行窗口来退出 REPL 环境。</li></ol><h3 id="实际应用示例" tabindex="-1"><a class="header-anchor" href="#实际应用示例"><span>实际应用示例</span></a></h3><h4 id="示例-1-基本运算" tabindex="-1"><a class="header-anchor" href="#示例-1-基本运算"><span>示例 1: 基本运算</span></a></h4><p>在 REPL 中，你可以进行基本的数学运算。例如，如果你想计算两个数的和：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 5</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 7</span></span>\n<span class="line"><span style="color:#B48EAD;">12</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输入 <code>5 + 7</code> 后按回车，你会见到结果 <code>12</code>。</p><h4 id="示例-2-定义变量" tabindex="-1"><a class="header-anchor" href="#示例-2-定义变量"><span>示例 2: 定义变量</span></a></h4><p>你也可以定义变量并使用它们：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> let</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Node.js</span><span style="color:#ECEFF4;">&#39;</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#D8DEE9;">Hello</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Node</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">js</span><span style="color:#81A1C1;">!</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们定义了一个名为 <code>name</code> 的变量，赋值为字符串 <code>&#39;Node.js&#39;</code>。然后，我们使用 <code>console.log</code> 打印出一条欢迎信息。注意，变量声明后会显示 <code>undefined</code>，这是因为变量赋值表达式自身没有返回值。</p><h4 id="示例-3-使用函数" tabindex="-1"><a class="header-anchor" href="#示例-3-使用函数"><span>示例 3: 使用函数</span></a></h4><p>你甚至可以定义函数并调用它：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> greet</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span><span style="color:#81A1C1;"> return</span><span style="color:#ECEFF4;"> `</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#81A1C1;">;</span><span style="color:#ECEFF4;"> }</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#88C0D0;"> greet</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">World</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Hello, World!</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们定义了一个名为 <code>greet</code> 的函数，它接受一个参数并返回一个问候语。然后，我们通过传递字符串 <code>&#39;World&#39;</code> 作为参数来调用这个函数。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>REPL 在 Node.js 中是一个强大而灵活的工具，对于学习 JavaScript 语言的基础、测试代码片段或者进行简单的脚本编写都非常有帮助。通过直接与 Node.js 交互，你可以快速理解 JavaScript 代码的行为以及 Node.js 的运行机制。</p><h2 id="design-and-features" tabindex="-1"><a class="header-anchor" href="#design-and-features"><span><a href="https://nodejs.org/docs/latest/api/repl.html#design-and-features" target="_blank" rel="noopener noreferrer">Design and features</a></span></a></h2><p>Node.js 为开发者提供了一个强大的平台，用以构建快速、可扩展的网络应用程序。v21.7.1 是 Node.js 的一个版本。在这个版本中，有很多设计和特性上的更新，但让我们专注于 REPL（Read-Eval-Print Loop）部分，这是一个非常重要且对新手友好的特性。</p><h3 id="repl-read-eval-print-loop" tabindex="-1"><a class="header-anchor" href="#repl-read-eval-print-loop"><span>REPL (Read-Eval-Print Loop)</span></a></h3><p>REPL，即读取-求值-打印循环，是一个简单的、交互式的编程环境。在 Node.js 中，REPL 允许你直接在命令行中输入 JavaScript 代码，并立即看到执行结果。这对于学习 JavaScript 或 Node.js 库、测试代码片段或进行实验来说非常有用。</p><h4 id="如何进入-node-js-的-repl" tabindex="-1"><a class="header-anchor" href="#如何进入-node-js-的-repl"><span>如何进入 Node.js 的 REPL</span></a></h4><p>打开终端或命令提示符，输入 <code>node</code>，然后按回车键，你就会进入 REPL 模式。界面会变成这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这个提示符后面，你可以开始输入 JavaScript 代码了。</p><h4 id="实际运用例子" tabindex="-1"><a class="header-anchor" href="#实际运用例子"><span>实际运用例子</span></a></h4><p><strong>1. 测试代码片段</strong></p><p>假设你想快速测试一段 JavaScript 代码，例如计算两个数的和：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 5</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 3</span></span>\n<span class="line"><span style="color:#B48EAD;">8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接输入表达式，REPL 返回了结果 <code>8</code>。</p><p><strong>2. 学习 JavaScript</strong></p><p>当你学习新的 JavaScript 特性时，例如 ES6 的箭头函数，你可以直接在 REPL 中试验它们：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> const</span><span style="color:#88C0D0;"> add</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#88C0D0;"> add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#B48EAD;">15</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先定义了一个箭头函数 <code>add</code>，然后使用它计算了两个数的和，REPL 显示了函数的返回值 <code>15</code>。</p><p><strong>3. 探索 Node.js 的内置模块</strong></p><p>Node.js 提供了很多内置模块，例如 <code>fs</code> 模块，用于文件系统操作。你可以在 REPL 中快速试验这些模块的功能：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFileSync</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">file.txt</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Hello, Node.js!</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们使用 <code>fs</code> 模块读取了当前目录下名为 <code>file.txt</code> 的文件内容。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>Node.js 的 REPL 环境为初学者提供了一个极佳的学习与实验场所，你可以在这里快速测试和验证你的 JavaScript 代码或 Node.js 功能，而无需创建完整的应用程序。这种即时反馈对于理解语言特性和库功能极为有帮助。</p><h3 id="commands-and-special-keys" tabindex="-1"><a class="header-anchor" href="#commands-and-special-keys"><span><a href="https://nodejs.org/docs/latest/api/repl.html#commands-and-special-keys" target="_blank" rel="noopener noreferrer">Commands and special keys</a></span></a></h3><p>在 Node.js 中，REPL（Read-Eval-Print Loop）是一个非常有用的工具，你可以认为它像是一个交互式的编程环境。在这个环境里，你可以输入 JavaScript 代码，并立即得到执行结果。这对于学习 JavaScript 或者快速测试一些代码片段来说非常方便。由于版本更新和不同的文档位置，我将基于你提到的 Node.js v21.7.1 版本，从通用的角度解释 REPL 中的特殊命令和按键。</p><h3 id="特殊命令" tabindex="-1"><a class="header-anchor" href="#特殊命令"><span>特殊命令</span></a></h3><p>在 Node.js 的 REPL 环境中，除了直接写 JavaScript 代码之外，还有一些特殊的命令。这些命令以“.”开头，用于执行 REPL 环境下的特定操作。</p><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h4><ol><li><p><strong>.help</strong>：这个命令会列出所有可用的特殊命令及其描述。如果你不确定 REPL 支持哪些特殊命令，输入<code>.help</code>就会显示所有信息。</p></li><li><p><strong>.exit</strong>：通过这个命令，你可以退出 REPL 环境。当然，你也可以通过按 Ctrl + C 两次来实现相同的效果。</p></li><li><p><strong>.save</strong>：这个命令允许你把当前 REPL 会话中输入的内容保存到一个文件中。比如，<code>.save ./mySession.js</code>会把你至今为止在 REPL 中输入的所有命令保存到当前目录下的<code>mySession.js</code>文件中。</p></li><li><p><strong>.load</strong>：与.save 命令相反，<code>.load</code>命令可以加载一个文件中的 JavaScript 代码到 REPL 会话中。假设你先前使用<code>.save</code>命令保存了一些代码，那么你可以通过<code>.load ./mySession.js</code>来重新载入这些代码到 REPL 中。</p></li></ol><h3 id="特殊按键" tabindex="-1"><a class="header-anchor" href="#特殊按键"><span>特殊按键</span></a></h3><p>在 REPL 环境中，除了特殊命令，还有一些特殊的按键组合，这些可以帮助你更有效地与 REPL 交互。</p><h4 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1"><span>例子</span></a></h4><ol><li><p><strong>Tab 键补全</strong>：当你开始输入时，按下 Tab 键，REPL 会尝试自动完成你正在输入的变量名或者函数名。这是一个非常有用的功能，因为它可以节约你的输入时间，同时减少拼写错误。</p></li><li><p><strong>上/下箭头键</strong>：这两个键允许你在你此前输入的命令之间进行浏览。使用上箭头键，你可以查看并选择之前输入过的命令。使用下箭头键，你可以向前移动到较新的命令。</p></li><li><p><strong>Ctrl + C</strong>：如前所述，按下 Ctrl + C 可以退出当前的多行命令输入。如果再次按下，将退出 REPL 环境。</p></li><li><p><strong>Ctrl + D</strong>：也可以用来退出 REPL 环境。这是另一种退出方式，特别是当你的终端不响应 Ctrl + C 时十分有用。</p></li></ol><p>通过以上特殊命令和按键的使用，你可以更高效地在 Node.js 的 REPL 环境中工作。无论是快速测试代码，学习新的 JavaScript 概念，还是仅仅为了玩耍，Node.js 的 REPL 都是一个强大的工具。</p><h3 id="default-evaluation" tabindex="-1"><a class="header-anchor" href="#default-evaluation"><span><a href="https://nodejs.org/docs/latest/api/repl.html#default-evaluation" target="_blank" rel="noopener noreferrer">Default evaluation</a></span></a></h3><p>当我们谈论到 Node.js 中的“Default evaluation”时，我们实际上是在讨论 Node.js 的 REPL（Read-Eval-Print Loop）环境的一个特性。REPL 是一个简洁的、交互式编程环境，它允许你输入代码，并立刻看到执行结果。这对于快速测试代码片段、学习新的语言特性或是进行调试来说非常有用。</p><p>在 Node.js v21.7.1 版本的文档中提到的“Default evaluation”主要指的是，在 REPL 环境中代码是如何被默认评估（即执行）的过程。</p><h3 id="基本工作方式" tabindex="-1"><a class="header-anchor" href="#基本工作方式"><span>基本工作方式</span></a></h3><p>当你在 REPL 中输入一行代码后，这段代码会通过一个默认的评估过程。这个过程决定了你输入的代码应该如何被处理和执行。通常，这意味着直接运行这段代码，并将结果打印出来。但是，Node.js 的 REPL 环境也允许开发者修改这个默认的评估行为，使其可以根据需要处理各种不同类型的输入。</p><h3 id="实际运用例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用例子-1"><span>实际运用例子</span></a></h3><ol><li><p><strong>快速测试代码片段：</strong> 假设你想快速测试一个 JavaScript 函数的行为。你可以直接在 REPL 中输入这个函数定义，然后调用它，即可立即看到结果。例如，测试一个计算两数之和的函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> add</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输入这个命令后，REPL会显示结果5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>学习新的 API：</strong> 如果你正在学习 Node.js 的<code>fs</code>模块（用于文件操作），你可能想快速看到<code>fs.readFileSync</code>方法的效果。在 REPL 中，你可以这样尝试：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> content</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFileSync</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">content</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 这会输出example.txt文件的内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>动态调整评估策略：</strong> 虽然这个更高级一些，但假设你正在开发一个工具，希望能够理解和处理特定格式的输入，比如处理自定义的 DSL（领域特定语言）。你可以通过调整 REPL 的评估策略来实现这一点，使得每当输入符合某种特定格式时，就按照你的规则进行处理而不是作为普通的 JavaScript 代码执行。</p></li></ol><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>总的来说，“Default evaluation”是指在 Node.js 的 REPL 环境中，默认如何评估和执行你输入的代码。这个机制非常灵活，允许开发者不仅仅局限于执行标准的 JavaScript 代码，还可以根据需要调整评估逻辑，以适应各种不同的场景和需求。</p><h4 id="javascript-expressions" tabindex="-1"><a class="header-anchor" href="#javascript-expressions"><span><a href="https://nodejs.org/docs/latest/api/repl.html#javascript-expressions" target="_blank" rel="noopener noreferrer">JavaScript expressions</a></span></a></h4><p>Node.js 是一个广泛使用的 JavaScript 运行时，它让你能够在服务器端运行 JavaScript 代码。这意味着你可以用 JavaScript 来编写处理 HTTP 请求、访问数据库等后端任务的脚本和应用程序。Node.js 使用非阻塞、事件驱动的架构，使其既轻量又高效。</p><p>当我们谈论 Node.js v21.7.1 中的 &quot;JavaScript expressions&quot; 时，我们实际上是在讨论如何在 Node.js 的 REPL 环境中运行 JavaScript 表达式。REPL 代表“读取-求值-打印-循环”（Read-Eval-Print Loop），这是一个简单的交互式计算机编程环境，用户可以输入表达式，REPL 会计算表达式，并返回结果给用户。如果你有 Python 或 Ruby 的经验，你可能已经接触过类似的环境。</p><h3 id="如何使用-node-js-的-repl" tabindex="-1"><a class="header-anchor" href="#如何使用-node-js-的-repl"><span>如何使用 Node.js 的 REPL</span></a></h3><p>要启动 Node.js 的 REPL，只需要在命令行中输入 <code>node</code>，然后按回车。这样就会进入一个环境，你可以在其中输入并执行 JavaScript 代码。</p><h3 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明"><span>示例说明</span></a></h3><h4 id="_1-基本数学操作" tabindex="-1"><a class="header-anchor" href="#_1-基本数学操作"><span>1. 基本数学操作</span></a></h4><p>假设你想做一些基础的数学运算。在 Node.js 的 REPL 中，你可以直接输入：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#B48EAD;">5</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>REPL 会回应：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里，<code>5 + 3</code> 就是一个 JavaScript 表达式，REPL 计算了这个表达式，并打印出了结果。</p><h4 id="_2-使用变量" tabindex="-1"><a class="header-anchor" href="#_2-使用变量"><span>2. 使用变量</span></a></h4><p>你也可以定义变量并在之后的表达式中使用它们。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在第一行，我们定义了一个变量 <code>a</code> 并赋值为 10。在第二行，我们使用这个变量来进行乘法操作。REPL 会返回这个乘法表达式的结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-函数调用" tabindex="-1"><a class="header-anchor" href="#_3-函数调用"><span>3. 函数调用</span></a></h4><p>还可以定义函数并调用它们。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> double</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"><span style="color:#88C0D0;">double</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码首先定义了一个名为 <code>double</code> 的函数，该函数将它的参数乘以 2。然后，我们调用这个函数并传递 <code>4</code> 作为参数。REPL 返回：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="实际应用例子" tabindex="-1"><a class="header-anchor" href="#实际应用例子"><span>实际应用例子</span></a></h4><h5 id="数据处理" tabindex="-1"><a class="header-anchor" href="#数据处理"><span>数据处理</span></a></h5><p>假设你正在处理一个用户列表，并且你想找出所有年龄大于 18 的用户。如果你有一个包含用户对象的数组，你可以在 Node.js 的 REPL 中这样操作：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> users</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span></span>\n<span class="line"><span style="color:#ECEFF4;">  {</span><span style="color:#88C0D0;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Alice</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> age</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 25</span><span style="color:#ECEFF4;"> },</span></span>\n<span class="line"><span style="color:#ECEFF4;">  {</span><span style="color:#88C0D0;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Bob</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> age</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 17</span><span style="color:#ECEFF4;"> },</span></span>\n<span class="line"><span style="color:#ECEFF4;">  {</span><span style="color:#88C0D0;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Charlie</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> age</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 20</span><span style="color:#ECEFF4;"> },</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">users</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">filter</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">user</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> user</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">age</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#B48EAD;"> 18</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会返回年龄大于 18 的用户列表。</p><h5 id="简单的-http-服务器" tabindex="-1"><a class="header-anchor" href="#简单的-http-服务器"><span>简单的 HTTP 服务器</span></a></h5><p>Node.js 非常擅长处理网络任务。比如，你可以很容易地使用 Node.js 创建一个简单的 HTTP 服务器：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> http</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> server</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> http</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createServer</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">req</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">writeHead</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">200</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Content-Type</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">text/plain</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello World</span><span style="color:#EBCB8B;">\\n</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">server</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">listen</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3000</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Server running at http://localhost:3000/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然你不太可能在 REPL 环境中运行整个 HTTP 服务器代码，但这个例子展示了如何使用 Node.js 来完成更复杂的任务。</p><p>通过这些例子，你可以看到 Node.js 的 REPL 环境提供了一个强大且灵活的方式来测试和执行 JavaScript 代码片段，无论是简单的表达式还是复杂的逻辑。</p><h4 id="global-and-local-scope" tabindex="-1"><a class="header-anchor" href="#global-and-local-scope"><span><a href="https://nodejs.org/docs/latest/api/repl.html#global-and-local-scope" target="_blank" rel="noopener noreferrer">Global and local scope</a></span></a></h4><p>在解释 Node.js 中的全局和局部作用域之前，让我们先了解一下什么是作用域。简单来说，作用域决定了代码中变量、函数和对象的可见性和生命周期。在 JavaScript（以及 Node.js）里，主要有两种作用域：</p><ol><li><strong>全局作用域（Global Scope）</strong>：定义在程序的任何地方都能访问的变量或函数属于全局作用域。</li><li><strong>局部作用域（Local Scope）</strong>：通常指定义在特定区域内的变量或函数，只能在这个特定的区域（例如一个函数内部）访问。</li></ol><h3 id="node-js-中的全局和局部作用域" tabindex="-1"><a class="header-anchor" href="#node-js-中的全局和局部作用域"><span>Node.js 中的全局和局部作用域</span></a></h3><p>在 Node.js 中，当你在一个模块的顶层声明变量或函数时，它们实际上并不是真正的全局变量或函数。它们只是对该模块全局的。每个 Node.js 文件都被视为一个独立的模块。</p><ul><li><strong>全局作用域</strong>：在 Node.js 中，如果你需要一个真正的全局变量，可以使用<code>global</code>对象。<code>global</code>对象类似于浏览器中的<code>window</code>对象，任何添加到<code>global</code>的属性都会变成真正的全局变量。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 添加一个全局变量</span></span>\n<span class="line"><span style="color:#D8DEE9;">global</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">myGlobalVar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Hello, World!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 在另一个模块中访问</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">global</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">myGlobalVar</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: Hello, World!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>局部作用域</strong>：局部作用域通常在函数内部。在这个作用域中声明的变量或函数，只能在这个函数内部被访问。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> myFunction</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> localVar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">I&#39;m local</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">localVar</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 正常工作，输出: I&#39;m local</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"><span style="color:#88C0D0;">myFunction</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">localVar</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 报错，localVar在这里不可见</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实际运用的例子" tabindex="-1"><a class="header-anchor" href="#实际运用的例子"><span>实际运用的例子</span></a></h3><ol><li><strong>全局配置</strong>：假设你在开发一个应用，需要在多个模块中访问数据库连接字符串。你可以把它存储在<code>global</code>对象中。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// config.js</span></span>\n<span class="line"><span style="color:#D8DEE9;">global</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">dbConnectionString</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">YourDatabaseConnectionString</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// app.js</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">global</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">dbConnectionString</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 访问并使用数据库连接字符串</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>模块内的局部变量</strong>：如果你正在编写一个模块，需要临时存储数据，并且不希望这些数据在模块外部被访问，就可以使用局部变量。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// mathModule.js</span></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> sum</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 这里result变量是局部变量，只能在sum函数内部访问。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解全局和局部作用域对于编写可维护和高效的 Node.js 应用至关重要。遵循最佳实践，如尽可能使用局部变量，可以帮助避免潜在的变量名冲突，并减少全局命名空间的污染。</p><h4 id="accessing-core-node-js-modules" tabindex="-1"><a class="header-anchor" href="#accessing-core-node-js-modules"><span><a href="https://nodejs.org/docs/latest/api/repl.html#accessing-core-nodejs-modules" target="_blank" rel="noopener noreferrer">Accessing core Node.js modules</a></span></a></h4><p>Node.js 是一个让 JavaScript 运行在服务器端的平台，它可以让你用 JavaScript 编写服务器端的程序，包括但不限于网络服务和数据库交互。在 Node.js 中，有很多内置的模块，这些模块提供了很多基本的服务器功能，比如文件系统操作、网络请求处理等。接下来，我将简单介绍如何在 Node.js 中访问这些核心模块，并给出一些实际的例子。</p><h3 id="访问核心模块" tabindex="-1"><a class="header-anchor" href="#访问核心模块"><span>访问核心模块</span></a></h3><p>要在 Node.js 中使用一个核心模块，你需要使用 <code>require</code> 函数。这个函数的作用是导入模块，让你能够使用该模块提供的功能。下面是一个基本的格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> moduleName</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">模块名</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="实际例子" tabindex="-1"><a class="header-anchor" href="#实际例子"><span>实际例子</span></a></h3><p><strong>1. 文件系统（fs）模块</strong></p><p>假设你想读取一个文件的内容，你可以使用文件系统（fs）模块来做到这一点。首先，你需要导入<code>fs</code>模块：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，你可以使用<code>fs.readFile</code>方法来读取文件：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">文件路径</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">编码</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> data</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">throw</span><span style="color:#D8DEE9;"> err</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会异步地读取文件内容，并在读取完成后在控制台中打印。</p><p><strong>2. HTTP 模块</strong></p><p>如果你想创建一个简单的 web 服务器，可以使用 HTTP 模块：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> http</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> server</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> http</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createServer</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">req</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">writeHead</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">200</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Content-Type</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">text/plain</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello World</span><span style="color:#EBCB8B;">\\n</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">server</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">listen</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">8080</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Server running at http://127.0.0.1:8080/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码创建了一个 web 服务器，它监听 8080 端口，并且对所有请求返回&quot;Hello World&quot;。</p><p><strong>3. URL 模块</strong></p><p>当你需要解析 URL 时，URL 模块会很有用。先导入模块：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> url</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">url</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，解析一个 URL 字符串：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> myURL</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> URL</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http://example.com?name=test</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">myURL</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">searchParams</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码创建了一个 URL 对象，并从查询字符串中提取了&quot;name&quot;的值。</p><p>通过这些例子，你应该能够看出，Node.js 的核心模块为开发各种应用提供了强大的基础。通过简单地导入和使用这些模块，你就可以快速地构建出功能丰富的应用。</p><h4 id="global-uncaught-exceptions" tabindex="-1"><a class="header-anchor" href="#global-uncaught-exceptions"><span><a href="https://nodejs.org/docs/latest/api/repl.html#global-uncaught-exceptions" target="_blank" rel="noopener noreferrer">Global uncaught exceptions</a></span></a></h4><p>在 Node.js 中，一个&quot;未捕获的异常&quot;是指在程序执行过程中发生了错误，但没有被任何错误处理器（即 try-catch 语句块）捕获。通常情况下，这样的错误会导致 Node.js 程序崩溃，因为 Node.js 不知道如何处理这个错误，也就不能保证程序的正常运行。</p><p>从 Node.js v21.7.1 开始，有一个关于全局未捕获异常的特性，在 REPL 环境中尤为突出。REPL 代表“读取-求值-打印循环”(Read-Eval-Print Loop)，是一种交云式编程环境，允许你输入单行代码并立即执行，得到结果。Node.js 自带的 REPL 环境非常适合快速测试代码片段，学习 Node.js API 或进行简单的实验。</p><h3 id="全局未捕获异常处理" tabindex="-1"><a class="header-anchor" href="#全局未捕获异常处理"><span>全局未捕获异常处理</span></a></h3><p>在 REPL 环境中处理全局未捕获异常意味着你可以设置 REPL 的行为来决定当出现这类异常时应该做什么。默认情况下，未捕获的异常会导致 REPL 会话结束。但是，通过调整配置或使用特定的 API，你可以改变这一行为，例如，记录这些异常而不是直接退出 REPL 会话。</p><h3 id="实际运用例子-2" tabindex="-1"><a class="header-anchor" href="#实际运用例子-2"><span>实际运用例子</span></a></h3><h4 id="_1-node-js-脚本" tabindex="-1"><a class="header-anchor" href="#_1-node-js-脚本"><span>1. Node.js 脚本</span></a></h4><p>假设你正在编写一个 Node.js 脚本，该脚本需要从外部 API 获取数据，然后处理这些数据。如果 API 调用失败，并且这个错误没有被捕获，那么按照默认行为，你的程序会崩溃。通过全局处理未捕获的异常，你可以避免程序崩溃，可能的处理方式包括重试 API 调用或记录错误信息到日志文件供以后分析。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">process</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">uncaughtException</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">有一个未捕获的异常:</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> err</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  process</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">exit</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 可选：退出程序</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 模拟一个未捕获的异常</span></span>\n<span class="line"><span style="color:#88C0D0;">setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">哦哦，出错啦！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">},</span><span style="color:#B48EAD;"> 1000</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-node-js-repl-环境" tabindex="-1"><a class="header-anchor" href="#_2-node-js-repl-环境"><span>2. Node.js REPL 环境</span></a></h4><p>在 Node.js 的 REPL 环境中，你可能正在尝试一些新的代码片段，并不想因为某个未捕获的异常而中断整个会话。在这种情况下，可以通过设置 REPL 的特定选项来避免会话直接结束。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建一个REPL会话，自定义处理未捕获异常的行为</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    ignoreUndefined</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">    replMode</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">REPL_MODE_STRICT</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">REPL会话结束。</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 设置自定义的全局未捕获异常处理器</span></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">uncaughtException</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">捕获到未处理的异常:</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> err</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">message</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的关键是理解，无论是在 REPL 环境还是在 Node.js 应用程序中，正确处理异常对于维持应用的稳定性和可靠性都至关重要。利用 Node.js 提供的工具和 API，你可以更灵活地处理这些异常情况，确保你的程序能够以预期的方式响应各种运行时错误。</p><p>希望这能帮助你更好地理解 Node.js 中全局未捕获异常的处理方式！</p><h4 id="assignment-of-the-underscore-variable" tabindex="-1"><a class="header-anchor" href="#assignment-of-the-underscore-variable"><span><a href="https://nodejs.org/docs/latest/api/repl.html#assignment-of-the-_-underscore-variable" target="_blank" rel="noopener noreferrer">Assignment of the _ (underscore) variable</a></span></a></h4><p>在 Node.js 中，特别是在其 REPL（Read-Eval-Print Loop，即读取-执行-打印循环）模式下，有一个很方便的特性就是使用下划线 <code>_</code> 变量。这个变量被用来存储最后一个表达式的结果。这个功能在快速测试代码片段、学习新的库或调试时非常有用。</p><p>首先，我会解释什么是 REPL。REPL 是一种简单的交互式编程环境。你输入命令，系统立即处理这些命令，然后将结果输出到屏幕上。在 Node.js 中，你可以通过在命令行中输入 <code>node</code> 而没有任何文件参数来启动 REPL 环境。</p><p>现在，让我们聚焦于下划线 <code>_</code> 变量的作用：</p><h3 id="使用-存储最后一个表达式的结果" tabindex="-1"><a class="header-anchor" href="#使用-存储最后一个表达式的结果"><span>使用 <code>_</code> 存储最后一个表达式的结果</span></a></h3><p>当你在 Node.js 的 REPL 中工作时，你可能会进行多个计算步骤或调用。有时，你可能想引用上一个操作的结果而不是重新键入整个表达式。这时，<code>_</code> 变量就派上了用场。它自动被赋值为之前表达式的结果。</p><h4 id="例子-1-简单数学运算" tabindex="-1"><a class="header-anchor" href="#例子-1-简单数学运算"><span>例子 1: 简单数学运算</span></a></h4><p>假设你正在做一些基本的数学运算：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 5</span></span>\n<span class="line"><span style="color:#B48EAD;">8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着，你想拿这个结果去乘以 2，但你不想重新输入 8，你可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9;"> _</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 2</span></span>\n<span class="line"><span style="color:#B48EAD;">16</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>_</code> 自动地被赋值为上一个表达式的结果，即 8。</p><h4 id="例子-2-调试或检查函数返回值" tabindex="-1"><a class="header-anchor" href="#例子-2-调试或检查函数返回值"><span>例子 2: 调试或检查函数返回值</span></a></h4><p>如果你有一个函数，比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> double</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你调用这个函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#88C0D0;"> double</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#B48EAD;">8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你可以快速地使用 <code>_</code> 来进一步操作这个结果，比如检查它是否正确：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9;"> _</span><span style="color:#81A1C1;"> ===</span><span style="color:#B48EAD;"> 8</span></span>\n<span class="line"><span style="color:#81A1C1;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者继续对这个结果进行其他操作。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><p>虽然 <code>_</code> 变量在 REPL 中非常方便，但你也应该注意它的一个限制：每次输入新的命令后，<code>_</code> 的值都会更新为最新的表达式结果。所以，如果你想保留某个特定的结果，你应该将它赋值给一个明确的变量名。</p><p>总的来说，<code>_</code> 在 Node.js 的 REPL 环境中是一个非常实用的特性，它能够帮助你更高效地进行探索性编码和快速调试。尽管它只是众多 Node.js 功能中的一个小部分，但正是这样的细节使得 Node.js 成为了一个强大且灵活的 JavaScript 运行环境。</p><h4 id="await-keyword" tabindex="-1"><a class="header-anchor" href="#await-keyword"><span><a href="https://nodejs.org/docs/latest/api/repl.html#await-keyword" target="_blank" rel="noopener noreferrer">await keyword</a></span></a></h4><p>Node.js v21.7.1 中的<code>await</code>关键字允许你在不阻塞程序执行的情况下等待一个异步操作的完成。这意味着你可以编写看起来像是同步代码的异步代码，使得代码更易于理解和维护。</p><h3 id="什么是异步操作" tabindex="-1"><a class="header-anchor" href="#什么是异步操作"><span>什么是异步操作？</span></a></h3><p>在解释<code>await</code>之前，了解什么是异步操作很重要。异步操作指的是在不影响或等待主程序执行的情况下进行的操作。比如，读取文件、网络请求、或者任何需要等待结果但又不想停止程序运行的操作。</p><h3 id="为什么需要await" tabindex="-1"><a class="header-anchor" href="#为什么需要await"><span>为什么需要<code>await</code>？</span></a></h3><p>在 JavaScript（特别是在 Node.js 环境中）进行异步编程时，通常使用回调函数、Promises 或者 async/await 来处理异步操作。回调函数可能会导致&quot;回调地狱&quot;，使代码难以阅读和维护。Promises 提供了一种更好的链式调用方法，但有时候处理错误有点复杂。这时<code>await</code>就显得尤为有用。</p><h3 id="如何使用await" tabindex="-1"><a class="header-anchor" href="#如何使用await"><span>如何使用<code>await</code>？</span></a></h3><p><code>await</code>关键字只能在<code>async</code>函数内部使用。它会暂停<code>async</code>函数的执行，等待 Promise 解决(resolve)，然后继续执行<code>async</code>函数并返回解决的值。</p><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法：</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> someFunction</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> someAsyncOperation</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">result</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>someAsyncOperation()</code>是一个返回 Promise 的函数。<code>await</code>会等待该 Promise 成功解决，并将解决的值赋给变量<code>result</code>。</p><h3 id="实际运用例子-3" tabindex="-1"><a class="header-anchor" href="#实际运用例子-3"><span>实际运用例子</span></a></h3><h4 id="例子-1-读取文件" tabindex="-1"><a class="header-anchor" href="#例子-1-读取文件"><span>例子 1：读取文件</span></a></h4><p>假设你想要读取一个文件的内容，但不想在等待文件读取时阻塞其他代码的执行。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">promises</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> readFileExample</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 使用await等待文件读取完成</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> content</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path/to/file.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">utf-8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">content</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">readFileExample</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">error</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 处理可能出现的错误</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子-2-获取网络请求数据" tabindex="-1"><a class="header-anchor" href="#例子-2-获取网络请求数据"><span>例子 2：获取网络请求数据</span></a></h4><p>当你从 API 获取数据时，通常需要等待网络请求完成。使用<code>await</code>可以简化这个过程。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fetch</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">node-fetch</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> fetchUserData</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> response</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">https://api.example.com/user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> response</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">json</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 等待JSON数据的解析</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88C0D0;">fetchUserData</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">error</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 处理可能出现的错误</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这两个例子中，<code>await</code>让我们以一种几乎是同步的方式写异步代码，增加了代码的可读性和易维护性。</p><h3 id="reverse-i-search" tabindex="-1"><a class="header-anchor" href="#reverse-i-search"><span><a href="https://nodejs.org/docs/latest/api/repl.html#reverse-i-search" target="_blank" rel="noopener noreferrer">Reverse-i-search</a></span></a></h3><p>Node.js 是一个运行在服务器端的 JavaScript 环境，而 <code>reverse-i-search</code> 实际上是一个功能，它不特定于 Node.js v21.7.1，但在讨论 Node.js 的上下文中，我们通常指的是在 Node.js 的 REPL（Read-Eval-Print Loop，即读取-求值-输出循环）环境中使用这个功能。</p><p>REPL 环境可以通过在命令行中输入 <code>node</code> 启动，没有加载任何文件，就可以直接执行 JavaScript 代码。这对于快速测试代码片段或学习 JavaScript 非常有用。</p><h3 id="什么是-reverse-i-search" tabindex="-1"><a class="header-anchor" href="#什么是-reverse-i-search"><span>什么是 Reverse-i-search?</span></a></h3><p><code>Reverse-i-search</code> 是一种搜索技巧，允许你在命令行界面中逆向搜索之前输入的命令。这意味着，如果你之前执行过一些操作或命令，并且想要快速找到并重新执行它们，<code>reverse-i-search</code> 可以帮你做到这一点。在 Node.js 的 REPL 环境中使用时，它可以帮助你查找之前执行过的 JavaScript 代码片段。</p><h3 id="如何使用-reverse-i-search" tabindex="-1"><a class="header-anchor" href="#如何使用-reverse-i-search"><span>如何使用 Reverse-i-search?</span></a></h3><ol><li><strong>启动 Node.js REPL</strong>: 打开终端或命令提示符，键入 <code>node</code> 并按 Enter 键。</li><li><strong>激活 Reverse-i-search</strong>: 按下 <code>Ctrl</code> + <code>r</code> 组合键。你会注意到提示符变成了 <code>(reverse-i-search)</code>，表明你现在可以输入搜索关键词了。</li><li><strong>输入搜索关键词</strong>: 开始输入你记得的命令或代码片段的一部分。REPL 会根据你的输入显示匹配的历史命令。</li><li><strong>浏览结果</strong>: 如果第一个出现的结果不是你想要的，你可以再次按下 <code>Ctrl</code> + <code>r</code> 来检索更早的匹配项。重复此步骤，直到找到所需的命令。</li><li><strong>执行命令</strong>: 找到你想要的命令后，直接按 Enter 键执行它，或者按右箭头键(<code>→</code>)把它带到命令行编辑或修改。</li></ol><h3 id="实际例子-1" tabindex="-1"><a class="header-anchor" href="#实际例子-1"><span>实际例子</span></a></h3><p>假设你在进行一些数组操作，试验了几种方法来过滤和映射数据。在大量尝试后，你意识到需要重新使用其中一个特定的命令。</p><ol><li><strong>输入命令</strong>: 在 REPL 中，你可能尝试了类似这样的命令：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> numbers</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">numbers</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">filter</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">n</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;"> %</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;"> ===</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>使用 Reverse-i-search</strong>: <ul><li>在某个时间点，你想要重新找到并执行这个过滤数组的命令。</li><li>按 <code>Ctrl</code> + <code>r</code>，然后开始输入 <code>filter</code>。</li><li>如果这是你最近一次使用 <code>filter</code> 关键字的命令，它应该会立即显示出来。</li><li>如果不是，继续按 <code>Ctrl</code> + <code>r</code> 循环历史命令，直到找到正确的那条。</li></ul></li></ol><p>这个功能尤其在进行复杂操作或长会话中非常有用，可以节省你的时间，避免重复输入相同的命令或代码片段。</p><h3 id="custom-evaluation-functions" tabindex="-1"><a class="header-anchor" href="#custom-evaluation-functions"><span><a href="https://nodejs.org/docs/latest/api/repl.html#custom-evaluation-functions" target="_blank" rel="noopener noreferrer">Custom evaluation functions</a></span></a></h3><p>在 Node.js 中，REPL（Read-Eval-Print Loop，读取-求值-输出循环）是一个非常有用的交互式工具，可以让你在命令行上试验 JavaScript 代码。从版本 21.7.1 开始，Node.js 提供了对 REPL 中自定义求值函数的支持，这使得我们可以更灵活地处理用户输入，并根据需要执行不同的操作。</p><h3 id="自定义求值函数是什么" tabindex="-1"><a class="header-anchor" href="#自定义求值函数是什么"><span>自定义求值函数是什么？</span></a></h3><p>简单来说，当你在 REPL 中输入一段代码时，Node.js 通常会尝试执行这段代码并显示结果。自定义求值函数允许你接管这个过程，即你可以决定如何解释和执行用户输入的代码。这意味着你可以在计算前修改用户的输入，或者在特定条件下触发不同的操作。</p><h3 id="如何使用自定义求值函数" tabindex="-1"><a class="header-anchor" href="#如何使用自定义求值函数"><span>如何使用自定义求值函数？</span></a></h3><p>要使用自定义求值函数，你需要在启动 REPL 时通过<code>eval</code>选项传递你的函数。这个函数接受几个参数，最重要的是用户输入的命令和一个回调函数。当你完成命令的处理后，你需要调用这个回调函数，将可能的错误作为第一个参数（如果没有错误则为<code>null</code>），以及命令的结果作为第二个参数。</p><h3 id="实际运用例子-4" tabindex="-1"><a class="header-anchor" href="#实际运用例子-4"><span>实际运用例子</span></a></h3><h4 id="_1-过滤敏感词" tabindex="-1"><a class="header-anchor" href="#_1-过滤敏感词"><span>1. 过滤敏感词</span></a></h4><p>假设你正在构建一个学习平台，你不希望用户在使用 REPL 功能时输入一些不恰当的词汇。你可以通过自定义求值函数来检查用户输入，并在发现敏感词时给出警告而不执行输入的代码。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> sensitiveWords</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> myEval</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">cmd</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> context</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> filename</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> callback</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">sensitiveWords</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">some</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">word</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> cmd</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">includes</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">word</span><span style="color:#D8DEE9FF;">))) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">    callback</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Your input contains sensitive words.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 正常执行代码</span></span>\n<span class="line"><span style="color:#88C0D0;">    callback</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">null</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> eval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">cmd</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> eval</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> myEval</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-扩展命令" tabindex="-1"><a class="header-anchor" href="#_2-扩展命令"><span>2. 扩展命令</span></a></h4><p>如果你想在 REPL 中添加一些自定义命令，例如清屏命令<code>.cls</code>，你也可以通过自定义求值函数来实现。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> myEval</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">cmd</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> context</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> filename</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> callback</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">cmd</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">trim</span><span style="color:#D8DEE9FF;">() </span><span style="color:#81A1C1;">===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">.cls</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clear</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#88C0D0;">    callback</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">null</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Screen is cleared.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 正常执行其他命令</span></span>\n<span class="line"><span style="color:#88C0D0;">    callback</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">null</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> eval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">cmd</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> eval</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> myEval</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-自定义日志记录" tabindex="-1"><a class="header-anchor" href="#_3-自定义日志记录"><span>3. 自定义日志记录</span></a></h4><p>在某些情况下，你可能需要记录用户的 REPL 活动，比如为了之后审核或统计使用情况。通过自定义求值函数，你可以很容易地实现这一点。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">//Tamakkuvik Ying Chao Tea-mit. Atorunnginnaviuk tunisassiornernut.</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> logStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createWriteStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl.log</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> flags</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> myEval</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">cmd</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> context</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> filename</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> callback</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  logStream</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">write</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">cmd</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 继续正常的求值流程</span></span>\n<span class="line"><span style="color:#88C0D0;">  callback</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">null</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> eval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">cmd</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> eval</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> myEval</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这些例子，你可以看到自定义求值函数在 Node.js REPL 中的强大灵活性，无论是增强用户体验、增加新功能还是进行日志记录都能轻松应对。</p><h4 id="recoverable-errors" tabindex="-1"><a class="header-anchor" href="#recoverable-errors"><span><a href="https://nodejs.org/docs/latest/api/repl.html#recoverable-errors" target="_blank" rel="noopener noreferrer">Recoverable errors</a></span></a></h4><p>在 Node.js 中，REPL（Read-Eval-Print Loop）是一个非常有用的工具，它允许你在终端中运行 JavaScript 代码并立即看到结果。这对于学习 JavaScript 和 Node.js，测试小段代码或者进行实验来说是非常方便的。</p><p>然而，在编写代码时，错误往往难以避免。这里所谓的“Recoverable errors”指的是那些可以被识别并有可能修复的错误，从而允许程序继续执行，而不是简单地崩溃或停止。在 Node.js 的 REPL 环境中，能够正确处理这类错误对于保持用户交互流畅度和提升学习效率至关重要。</p><h3 id="什么是-recoverable-errors" tabindex="-1"><a class="header-anchor" href="#什么是-recoverable-errors"><span>什么是 Recoverable Errors？</span></a></h3><p>在很多情况下，当你输入的代码有语法错误或者其他问题时，REPL 可以帮助你识别这些错误。但有些错误是可以&quot;恢复&quot;的，意味着系统可以通过一定的方式来处理这个错误，让你有机会更正错误，而不是直接抛出异常或结束程序。这些错误通常发生在代码逻辑上还未完成，比如：</p><ul><li>缺少括号、引号或逗号。</li><li>未结束的表达式。</li><li>错误使用异步函数。</li></ul><h3 id="实际例子-2" tabindex="-1"><a class="header-anchor" href="#实际例子-2"><span>实际例子</span></a></h3><p>假设你正在使用 Node.js 的 REPL 环境，并且你开始输入一个多行的 JavaScript 表达式，但你忘记了结束某个语句。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> greet</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#ECEFF4;"> `</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们忘记了关闭模板字符串（缺失反引号 ` ）和大括号 <code>}</code>。在普通的脚本执行环境中，这样的错误会导致一个语法错误。但在 REPL 中，这种错误可能被视为可恢复错误。REPL 会等待你输入更多内容以尝试完成这个表达式，而不是立即抛出一个错误。</p><p>如果 REPL 能够识别这是一个可恢复的错误，它会提示你继续输入，直到你完成了整个表达式：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时，你补全了之前缺失的部分，REPL 确认完整的表达式后，就可以成功执行这段代码了。</p><h3 id="怎样判断错误是否可恢复" tabindex="-1"><a class="header-anchor" href="#怎样判断错误是否可恢复"><span>怎样判断错误是否可恢复？</span></a></h3><p>Node.js 通过内置的机制来判断一个错误是否可恢复。当 REPL 遇到一个错误时，它会尝试分析错误的类型和上下文信息。如果错误符合可恢复错误的特定条件（比如缺少闭合标记），REPL 就会认为这个错误是可恢复的，并给予用户修正的机会。</p><p>这种机制增强了 REPL 的灵活性和用户友好性，使得它成为学习和实验 JavaScript 代码的一个非常宝贵的工具。通过对可恢复错误的有效管理，Node.js 让编程新手能够更容易地理解和修正自己的错误，进而加深对 JavaScript 语言的理解。</p><h3 id="customizing-repl-output" tabindex="-1"><a class="header-anchor" href="#customizing-repl-output"><span><a href="https://nodejs.org/docs/latest/api/repl.html#customizing-repl-output" target="_blank" rel="noopener noreferrer">Customizing REPL output</a></span></a></h3><p>Node.js 的 REPL（Read-Eval-Print Loop）是一个交互式的环境，让你可以输入 JavaScript 代码并立即看到执行结果。这对于学习 JavaScript、测试代码片段或者进行快速原型开发来说非常有用。</p><p>在 Node.js v21.7.1 版本中，提供了自定义 REPL 输出的功能。这意味着你现在能够控制和修改在 REPL 中显示的结果的格式。这对于增强可读性、调试或者仅仅为了美观非常有帮助。</p><h3 id="如何自定义-repl-输出" tabindex="-1"><a class="header-anchor" href="#如何自定义-repl-输出"><span>如何自定义 REPL 输出？</span></a></h3><p>自定义 REPL 输出主要通过覆写<code>writer</code>选项来实现。当你启动 REPL 时，可以传递一个配置对象给<code>repl.start()</code>方法，其中<code>writer</code>属性就是用来自定义输出格式的函数。</p><p>这个自定义的<code>writer</code>函数接收一个参数，即需要被输出的值，然后返回一个字符串，这个字符串将会被 REPL 作为该值的表示输出。</p><h3 id="实际运用的例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-1"><span>实际运用的例子</span></a></h3><h4 id="示例-1-简单美化-json-输出" tabindex="-1"><a class="header-anchor" href="#示例-1-简单美化-json-输出"><span>示例 1：简单美化 JSON 输出</span></a></h4><p>假设我们想在 REPL 中更美观地展示 JSON 对象，可以这样自定义：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 启动REPL</span></span>\n<span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  writer</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 美化JSON输出</span></span>\n<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> JSON</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">stringify</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当你在 REPL 中输入一个对象时，比如 <code>{ name: &quot;Node.js&quot; }</code>，它就会以格式化后的 JSON 形式展示，而不是一行紧凑的字符串。</p><h4 id="示例-2-添加类型信息" tabindex="-1"><a class="header-anchor" href="#示例-2-添加类型信息"><span>示例 2：添加类型信息</span></a></h4><p>如果我们希望在输出中看到每个值的类型，可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  writer</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 返回值的类型和格式化后的JSON字符串</span></span>\n<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> `</span><span style="color:#81A1C1;">${</span><span style="color:#81A1C1;">typeof</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">JSON</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">stringify</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个自定义<code>writer</code>，如果你键入<code>{ age: 30 }</code>，REPL 可能会输出<code>object: { &quot;age&quot;: 30 }</code>，既告诉了你这是一个对象，又美化了输出格式。</p><h4 id="示例-3-处理特殊类型输出" tabindex="-1"><a class="header-anchor" href="#示例-3-处理特殊类型输出"><span>示例 3：处理特殊类型输出</span></a></h4><p>有时候，我们希望对某些特定类型的数据有不同的显示方式。例如，对于 Date 对象，我们可能希望直接看到它的标准日期时间表示形式：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#88C0D0;">  prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  writer</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 如果是Date类型，以特定格式显示</span></span>\n<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">obj</span><span style="color:#81A1C1;"> instanceof</span><span style="color:#D8DEE9FF;"> Date) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#81A1C1;">      return</span><span style="color:#ECEFF4;"> `</span><span style="color:#A3BE8C;">Date: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toISOString</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">    }</span></span>\n<span class="line"><span style="color:#616E88;">    // 其他类型还是以JSON格式显示</span></span>\n<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> JSON</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">stringify</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当你在 REPL 中创建一个新的 Date 对象时，例如输入<code>new Date()</code>，它会输出类似<code>Date: 2023-04-01T12:00:00.000Z</code>的格式，而不是 Date 对象的默认 toString()输出。</p><p>通过这种方式，Node.js 的 REPL 变得更加灵活和强大，能够适应各种不同的使用场景和需求。</p><h2 id="class-replserver" tabindex="-1"><a class="header-anchor" href="#class-replserver"><span><a href="https://nodejs.org/docs/latest/api/repl.html#class-replserver" target="_blank" rel="noopener noreferrer">Class: REPLServer</a></span></a></h2><p>Node.js 的 REPLServer 是一个特殊的类，用于创建一个能够执行 JavaScript 代码的交互式运行环境。REPL 代表“读取-求值-打印-循环”（Read-Eval-Print Loop），是一种简单的、交互式的编程环境，你可以在其中输入 JavaScript 代码，立即看到执行结果。这对于学习 JS、测试代码片段或进行实验来说非常有用。</p><p>在 Node.js v21.7.1 中，<code>REPLServer</code> 类提供了创建和管理这种交互式环境的方法和事件。下面是如何使用 <code>REPLServer</code> 的一些基本步骤和例子：</p><h3 id="创建-repl-环境" tabindex="-1"><a class="header-anchor" href="#创建-repl-环境"><span>创建 REPL 环境</span></a></h3><p>首先，你需要使用 Node.js 的 <code>repl</code> 模块来创建一个 <code>REPLServer</code> 实例。这可以通过调用 <code>repl.start()</code> 方法实现，该方法返回一个 <code>REPLServer</code> 对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入 repl 模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 启动一个 REPL 实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>prompt</code> 选项用于定制 REPL 提示符，你可以按照自己的需要更改它。</p><h3 id="扩展-repl-环境" tabindex="-1"><a class="header-anchor" href="#扩展-repl-环境"><span>扩展 REPL 环境</span></a></h3><p>你可以通过向 REPL 环境添加自定义命令或修改其行为来扩展它。例如，你可以定义一个命令来清除 REPL 历史记录或执行特定的代码。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 添加一个自定义命令 `.sayHello`</span></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">defineCommand</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">sayHello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">  help</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Say hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  action</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearBufferedCommand</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">displayPrompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当你在 REPL 中输入 <code>.sayHello John</code>，它会输出 <code>Hello, John!</code>。</p><h3 id="监听事件" tabindex="-1"><a class="header-anchor" href="#监听事件"><span>监听事件</span></a></h3><p><code>REPLServer</code> 类继承自 Node.js 的 <code>EventEmitter</code>，因此你可以监听和触发各种事件。例如，你可以监听每当用户输入完成时触发的 <code>line</code> 事件：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码允许用户通过输入 <code>exit</code> 来退出 REPL 环境。</p><h3 id="实际应用" tabindex="-1"><a class="header-anchor" href="#实际应用"><span>实际应用</span></a></h3><p>REPL 环境在开发过程中非常有用，尤其是在初学阶段或者需要快速测试一段代码时。它允许开发者即时反馈，更加直观地理解代码行为。另外，对于创建命令行工具或脚本来说，<code>REPLServer</code> 提供了一个强大的界面，可以交互式地执行用户输入的命令，从而提升用户体验。</p><p>希望这能帮助你更好地理解 Node.js 中的 <code>REPLServer</code> 以及如何使用它！</p><h3 id="event-exit" tabindex="-1"><a class="header-anchor" href="#event-exit"><span><a href="https://nodejs.org/docs/latest/api/repl.html#event-exit" target="_blank" rel="noopener noreferrer">Event: &#39;exit&#39;</a></span></a></h3><p>Node.js 中的<code>Event: &#39;exit&#39;</code>是一个特定于 REPL（Read-Eval-Print Loop，即读取-求值-输出循环）环境的事件。REPL 是一种交互式编程环境，让你可以输入单行代码并立即得到结果，这在进行快速测试和试验时非常方便。</p><h3 id="理解-exit-事件" tabindex="-1"><a class="header-anchor" href="#理解-exit-事件"><span>理解 <code>&#39;exit&#39;</code> 事件</span></a></h3><p>当 REPL 会话即将结束时，<code>&#39;exit&#39;</code>事件被触发。这可以因为多种原因，比如用户显式地通过<code>.exit</code>命令退出，或者通过按下<code>Ctrl + C</code>两次来退出 REPL 会话。</p><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h3><p>要监听这个事件，你需要首先创建一个 REPL 会话，然后使用<code>.on()</code>函数注册一个监听器来响应<code>&#39;exit&#39;</code>事件。下面是一个简单的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建一个REPL会话</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 监听&#39;exit&#39;事件</span></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">REPL会话结束</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们首先通过<code>require(&#39;repl&#39;)</code>引入了 REPL 模块。然后，我们用<code>repl.start()</code>创建了一个新的 REPL 会话，并定义了提示符为<code>&#39;&gt; &#39;</code>。通过<code>.on(&#39;exit&#39;, callback)</code>，我们添加了一个事件监听器，以便在会话即将结束时执行回调（在这个例子中，它会输出<code>&quot;REPL会话结束&quot;</code>）。</p><h3 id="实际运用示例" tabindex="-1"><a class="header-anchor" href="#实际运用示例"><span>实际运用示例</span></a></h3><ol><li><p><strong>自定义清理操作</strong>：如果你的 REPL 会话中打开了文件或者数据库连接，那么在 REPL 退出时，你可能希望关闭这些资源。通过监听<code>&#39;exit&#39;</code>事件，你可以在会话结束前执行必要的清理操作。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">  // 清理资源，例如关闭文件、数据库连接等</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">正在清理资源...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">REPL会话结束</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>日志记录</strong>：你可能想要记录 REPL 会话的开始和结束时间，用于调试或监控目的。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> startTime</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Date</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">now</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> endTime</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Date</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">now</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">REPL会话时长 </span><span style="color:#81A1C1;">${</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">endTime</span><span style="color:#81A1C1;"> -</span><span style="color:#D8DEE9;"> startTime</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> /</span><span style="color:#B48EAD;"> 1000</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> 秒</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>提醒保存工作</strong>：在某些场景下，用户可能在 REPL 中进行了一些临时计算或编写了一些代码片段，你可以在退出时提醒他们保存这些信息。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">exit</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">别忘了保存你的工作！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>通过上述例子，你应该能够理解 Node.js REPL 中<code>&#39;exit&#39;</code>事件的基本概念及其应用方法。监听此事件可以帮助你更好地管理 REPL 会话的生命周期，执行退出前的收尾工作，从而使你的 REPL 应用更加健壯和用户友好。</p><h3 id="event-reset" tabindex="-1"><a class="header-anchor" href="#event-reset"><span><a href="https://nodejs.org/docs/latest/api/repl.html#event-reset" target="_blank" rel="noopener noreferrer">Event: &#39;reset&#39;</a></span></a></h3><p>Node.js 的 REPL (Read-Eval-Print Loop) 是一个交互式的编程环境。在这里，你可以输入 JavaScript 代码，并立即看到执行结果。这非常适合实验性编程或者快速测试一些代码片段，而不需要创建一个完整的项目。</p><p>在 Node.js v21.7.1 中，REPL 环境引入了一个新的事件 <code>&#39;reset&#39;</code>。当 REPL 被重置时，这个事件会被触发。重置可能是因为用户显式地调用了 <code>.reset</code> 命令，或者有其他内部机制触发了重置。这提供了一个钩子（hook），开发者可以在这个时刻插入自定义的逻辑，比如重新初始化环境变量或清理之前的操作痕迹。</p><h3 id="应用场景示例" tabindex="-1"><a class="header-anchor" href="#应用场景示例"><span>应用场景示例</span></a></h3><p>想象你正在使用 Node.js 的 REPL 进行数据库查询实验。你可能已经设置了某些全局状态或者数据库连接，以便于测试查询。如果你想要“重置”这个环境，以便从干净的状态开始，而不是退出并重新进入 REPL，这时 <code>&#39;reset&#39;</code> 事件就派上用场了。</p><p><strong>示例 1：监听 <code>reset</code> 事件来清空全局变量</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 假设在REPL中, 你已经定义了一些全局变量</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> someGlobalVar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">这是一个全局变量</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">reset</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">REPL环境被重置！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 清空或重新设定全局变量</span></span>\n<span class="line"><span style="color:#D8DEE9;">  someGlobalVar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每当 REPL 环境通过<code>.reset</code>命令被重置时，我们的监听器会被触发，然后我们可以清空或重新设定一些全局变量。</p><p><strong>示例 2：重新初始化数据库连接</strong></p><p>设想在 REPL 环境中进行数据库交互，你可能需要在重置时重新建立数据库连接：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">reset</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> async</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">REPL环境被重置，重新连接数据库...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#88C0D0;"> initializeDatabaseConnection</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 假设这是一个重建数据库连接的异步函数</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，每次 REPL 环境重置时，我们都尝试重新建立数据库连接，确保后续的数据库操作都是在一个新鲜的状态下执行。</p><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h3><p><code>&#39;reset&#39;</code> 事件为开发者提供了一个方便的机制，来处理 REPL 环境重置时的特定需求，无论是清理资源、重置状态还是重新初始化数据。通过监听这个事件，我们能更加灵活地控制和管理 REPL 环境，使其更贴近我们的实际开发需求。</p><h3 id="replserver-definecommand-keyword-cmd" tabindex="-1"><a class="header-anchor" href="#replserver-definecommand-keyword-cmd"><span><a href="https://nodejs.org/docs/latest/api/repl.html#replserverdefinecommandkeyword-cmd" target="_blank" rel="noopener noreferrer">replServer.defineCommand(keyword, cmd)</a></span></a></h3><p>好的，让我们深入了解 Node.js 的 <code>replServer.defineCommand(keyword, cmd)</code> 方法，并通过一些实际示例来探索它的用途。</p><h3 id="什么是-repl" tabindex="-1"><a class="header-anchor" href="#什么是-repl"><span>什么是 REPL？</span></a></h3><p>在 Node.js 中，REPL 指的是 Read-Eval-Print Loop，即读取-求值-输出循环。这是一个简单的编程环境，允许你执行 JavaScript 代码并立即看到结果。你可以通过在命令行中输入 <code>node</code> 来进入 Node.js 的 REPL 环境。</p><h3 id="replserver-definecommand-keyword-cmd-1" tabindex="-1"><a class="header-anchor" href="#replserver-definecommand-keyword-cmd-1"><span>replServer.defineCommand(keyword, cmd)</span></a></h3><p>此方法允许你在 Node.js 的 REPL 环境中定义自定义命令。这意味着除了标准的 JavaScript 语法外，你还可以创建特殊命令，以执行各种任务，比如清理数据、运行特定函数等。</p><p>参数解释：</p><ul><li><code>keyword</code>：这是你想要创建的命令名称。注意，命令前不需要 <code>/</code>。</li><li><code>cmd</code>：这是一个对象或函数，定义了当你的命令被调用时应该执行的操作。如果是对象，它常包含两个属性：<code>help</code> （字符串，提供关于命令的帮助信息）和 <code>action</code> （一个当命令被调用时执行的函数）。</li></ul><h3 id="实际运用的例子-2" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-2"><span>实际运用的例子</span></a></h3><p>假设你正在使用 Node.js 的 REPL 环境进行开发，并且你经常需要执行一些重复的任务，比如清理测试数据。你可以定义一个自定义命令来简化这个过程。</p><h4 id="步骤-1-启动-repl-服务" tabindex="-1"><a class="header-anchor" href="#步骤-1-启动-repl-服务"><span>步骤 1: 启动 REPL 服务</span></a></h4><p>首先，你需要创建并启动一个 REPL 服务。这通常在一个脚本文件中完成，比如 <code>repl_server.js</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Custom REPL server started. Type .help for help.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤-2-定义自定义命令" tabindex="-1"><a class="header-anchor" href="#步骤-2-定义自定义命令"><span>步骤 2: 定义自定义命令</span></a></h4><p>现在，我们将利用 <code>replServer.defineCommand</code> 方法来添加一个名为 <code>resetData</code> 的自定义命令，用于清理数据。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">defineCommand</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">resetData</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">  help</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Resets the test data.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  action</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Resetting test data...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">    // 这里添加实际清理数据的代码</span></span>\n<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">displayPrompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 提示用户再次输入</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤-3-使用自定义命令" tabindex="-1"><a class="header-anchor" href="#步骤-3-使用自定义命令"><span>步骤 3: 使用自定义命令</span></a></h4><p>保存你的脚本并运行它。你现在可以在 REPL 中通过 <code>.resetData</code> 命令来清理数据了。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> .resetData</span></span>\n<span class="line"><span style="color:#88C0D0;">Resetting</span><span style="color:#A3BE8C;"> test</span><span style="color:#A3BE8C;"> data...</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2"><span>小结</span></a></h3><p>通过使用 <code>replServer.defineCommand</code> 方法，你可以极大地扩展 Node.js REPL 环境的功能性，使其更适合你的开发流程。无论是快速测试代码片段，还是处理日常任务，自定义命令都能让你的工作更加高效。</p><h3 id="replserver-displayprompt-preservecursor" tabindex="-1"><a class="header-anchor" href="#replserver-displayprompt-preservecursor"><span><a href="https://nodejs.org/docs/latest/api/repl.html#replserverdisplaypromptpreservecursor" target="_blank" rel="noopener noreferrer">replServer.displayPrompt([preserveCursor])</a></span></a></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它让开发者可以使用 JavaScript 来编写服务器端的代码。Node.js 包含了许多内置模块，而<code>REPL (Read-Eval-Print Loop)</code>是其中之一，主要用于提供一个简易的交互式编程环境。</p><p>在 Node.js 中，<code>replServer.displayPrompt([preserveCursor])</code>是 REPL 模块的一个函数，它用于控制 REPL 中的提示符（prompt）的显示。理解这个函数的作用，有助于你在创建定制的 REPL 应用时，更好地管理用户的交互体验。</p><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h3><p>让我们先简单解释下<code>replServer.displayPrompt([preserveCursor])</code>:</p><ul><li><strong>replServer</strong>：这是通过 REPL 模块创建的 REPL 服务器实例。创建这样的实例通常是为了启动一个自定义的 REPL 环境。</li><li><strong>displayPrompt</strong>：这个方法用于显示或更新 REPL 的提示符。当你在 REPL 会话中执行命令后，通常需要再次显示提示符，以便用户知道他们可以输入下一个命令。</li><li><strong>preserveCursor</strong>：这是一个可选的布尔参数。如果设置为<code>true</code>，它将尽可能保持光标在用户文本的末尾，这对于用户在输入长命令或多行代码时保持光标位置很有帮助。默认值是<code>false</code>。</li></ul><h3 id="实际运用示例-1" tabindex="-1"><a class="header-anchor" href="#实际运用示例-1"><span>实际运用示例</span></a></h3><p>想象一下，你正在开发一个 Node.js 应用程序，并决定加入一个自定义 REPL 环境，供用户执行特定的 JS 代码或命令。以下是如何实现这个想法：</p><ol><li><p><strong>创建和启动一个 REPL 服务器</strong></p><p>首先，你需要引入 REPL 模块，并使用它来创建一个 REPL 服务器实例。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建REPL服务器</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用<code>displayPrompt</code>来管理提示符</strong></p><p>假设在某种情况下，你需要在用户完成一个操作后，手动刷新或重置提示符。这时候，就可以使用<code>displayPrompt</code>方法。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 假设这是用户完成某操作后的回调</span></span>\n<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> onUserActionCompleted</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">操作完成！</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 重新显示提示符，并尽量保留光标位置</span></span>\n<span class="line"><span style="color:#D8DEE9;">  replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">displayPrompt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>进阶：监听 REPL 指令并应用<code>displayPrompt</code></strong></p><p>你还可以监听 REPL 中的某些特定指令或输入，并在处理完这些输入后，用<code>displayPrompt</code>方法提示用户继续输入。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">接收到的命令：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">  // 处理输入...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">  // 显示提示符，等待下一条命令</span></span>\n<span class="line"><span style="color:#D8DEE9;">  replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">displayPrompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h3><p><code>replServer.displayPrompt([preserveCursor])</code>在 Node.js 的 REPL 模块中，提供了一种灵活的方式来更新或重新显示提示符。无论是在开发调试工具、教育软件还是任何需要与用户进行交互的命令行应用中，合理地使用此功能都能大幅提升用户体验。</p><h3 id="replserver-clearbufferedcommand" tabindex="-1"><a class="header-anchor" href="#replserver-clearbufferedcommand"><span><a href="https://nodejs.org/docs/latest/api/repl.html#replserverclearbufferedcommand" target="_blank" rel="noopener noreferrer">replServer.clearBufferedCommand()</a></span></a></h3><p>当你使用 Node.js 的 REPL 环境（即 Read-Eval-Print Loop，一个简单的、交互式的编程环境）时，<code>replServer.clearBufferedCommand()</code>是一个非常有用的方法。让我们一步一步来了解它。</p><h3 id="什么是-repl-1" tabindex="-1"><a class="header-anchor" href="#什么是-repl-1"><span>什么是 REPL?</span></a></h3><p>在 Node.js 中，REPL 是一个简易的编程环境，允许你输入 JavaScript 代码，并立即看到执行结果。这对于学习 JavaScript 语言、实验新想法或者调试代码非常有用。</p><h3 id="replserver-clearbufferedcommand-1" tabindex="-1"><a class="header-anchor" href="#replserver-clearbufferedcommand-1"><span>replServer.clearBufferedCommand()</span></a></h3><p>在 REPL 环境中，<code>replServer.clearBufferedCommand()</code>是一个特定的方法，它的作用是清除当前命令输入缓冲区中的所有内容。换句话说，如果你正在输入一个命令但还没有执行（按回车），这个方法可以清除掉你已经输入但尚未完成的部分。</p><h3 id="实际应用例子-1" tabindex="-1"><a class="header-anchor" href="#实际应用例子-1"><span>实际应用例子</span></a></h3><p>假设你正在 Node.js 的 REPL 环境下工作，开始写了一个很长的命令或者表达式，突然意识到这个命令或表达式是错误的或者不是你想要的。而由于它太长，一个个地删除会非常麻烦和费时间，这时候<code>replServer.clearBufferedCommand()</code>就显得非常有用。</p><h4 id="如何使用-1" tabindex="-1"><a class="header-anchor" href="#如何使用-1"><span>如何使用：</span></a></h4><ol><li><strong>启动 Node.js REPL 环境</strong>：只需要在命令行（终端）中输入 <code>node</code> 并按下回车键。</li><li><strong>模拟场景</strong>：假设你开始输入一个复杂的 JavaScript 表达式或者函数定义，但在完成之前想要取消它。</li><li><strong>实际上手</strong>：在 REPL 环境中，你无法直接调用<code>replServer.clearBufferedCommand()</code>，因为这需要你通过编程方式创建 REPL 服务器。但理解这个功能的作用对于进一步深入学习 Node.js 是非常有帮助的。</li></ol><h4 id="编码示例" tabindex="-1"><a class="header-anchor" href="#编码示例"><span>编码示例：</span></a></h4><p>如果你在自己的脚本中创建了一个 REPL 服务器，那么可以这样使用该方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建一个REPL服务器</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 模拟一个场景，比如用户输入了一些东西但希望清除</span></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">line</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">trim</span><span style="color:#D8DEE9FF;">() </span><span style="color:#81A1C1;">===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">clear</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#616E88;">    // 当用户输入&#39;clear&#39;时，清除缓冲的命令</span></span>\n<span class="line"><span style="color:#D8DEE9;">    replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clearBufferedCommand</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Buffer cleared!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">You entered: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">input</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们创建了一个简单的 REPL 服务器，当用户输入“clear”时，调用<code>clearBufferedCommand()</code>方法清空输入缓冲区，并提示用户“Buffer cleared!”。</p><p>通过这种方式，<code>replServer.clearBufferedCommand()</code>可以帮助提升 REPL 环境的交互体验，使其更加友好和灵活。</p><h3 id="replserver-parsereplkeyword-keyword-rest" tabindex="-1"><a class="header-anchor" href="#replserver-parsereplkeyword-keyword-rest"><span><a href="https://nodejs.org/docs/latest/api/repl.html#replserverparsereplkeywordkeyword-rest" target="_blank" rel="noopener noreferrer">replServer.parseREPLKeyword(keyword[, rest])</a></span></a></h3><p>好的，让我们深入理解 <code>replServer.parseREPLKeyword(keyword[, rest])</code> 这个功能。</p><p>首先，我们需要了解几个概念：</p><h3 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>Node.js</span></a></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。它允许在服务器端运行 JavaScript 代码，这意味着你可以使用 JavaScript 来编写可以响应网页请求、访问数据库等后端操作的脚本和程序。</p><h3 id="repl-1" tabindex="-1"><a class="header-anchor" href="#repl-1"><span>REPL</span></a></h3><p>REPL 代表“读取-求值-打印-循环”（Read-Eval-Print Loop）。它是一个简单的交互式编程环境。在 Node.js 中，当你在终端中运行 <code>node</code> 命令时，你会进入一个可以直接运行 JavaScript 代码的环境。在这里，系统会：读取你输入的代码（Read）、执行并计算这些代码的结果（Eval）、输出结果到屏幕上（Print），然后等待更多的输入（Loop）。</p><h3 id="replserver-parsereplkeyword" tabindex="-1"><a class="header-anchor" href="#replserver-parsereplkeyword"><span>replServer.parseREPLKeyword()</span></a></h3><p>在 Node.js v21.7.1 的文档中提到的 <code>replServer.parseREPLKeyword(keyword[, rest])</code> 函数是一个专门用于扩展或修改 REPL 行为的工具。简而言之，这个函数允许开发者识别并响应特定的关键词。</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><ul><li><code>keyword</code>: 一个字符串，表示要被识别的关键词。</li><li><code>rest</code>: 可选参数，跟在关键词后面的其余字符串。</li></ul><p>举个例子来说明这个函数如何使用：</p><p>假设你正在创建一个自定义的 REPL 环境，你想要增加一些特别的指令让用户能够快速执行某些操作，比如重置环境、查看当前版本等。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">defineCommand</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">reset</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">  help</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Reset the environment</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  action</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 实现重置环境的逻辑</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Environment reset.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">displayPrompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">defineCommand</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">version</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#88C0D0;">  help</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Show version</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>\n<span class="line"><span style="color:#88C0D0;">  action</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#616E88;">    // 显示版本信息</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Version 1.0.0</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">displayPrompt</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  },</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们没有直接使用 <code>parseREPLKeyword</code>，但通过 <code>defineCommand</code> 方法定义了两个自定义命令：<code>reset</code> 和 <code>version</code>。实际上，<code>defineCommand</code> 内部会利用类似于 <code>parseREPLKeyword</code> 的机制来实现这些自定义命令的解析和执行。</p><p>如果你需要对 REPL 的解析过程进行更底层的控制，比如拦截命令处理它们的方式，你可能就需要直接使用 <code>parseREPLKeyword</code> 方法。通常，这种需求较少见，并且需要对 REPL 的工作原理有较深入的理解。</p><p>总结：</p><ul><li><code>replServer.parseREPLKeyword()</code> 允许你在 Node.js 的 REPL 环境中自定义关键词的行为。</li><li>它对于构建复杂的，交互式的命令行工具非常有帮助，尤其是当你想要提供除了标准 JavaScript 代码执行之外的额外功能时。</li><li>虽然直接使用这个函数的情况比较少见，了解它的存在和作用可以帮助你更全面地理解 Node.js REPL 环境的可扩展性。</li></ul><h3 id="replserver-setuphistory-historypath-callback" tabindex="-1"><a class="header-anchor" href="#replserver-setuphistory-historypath-callback"><span><a href="https://nodejs.org/docs/latest/api/repl.html#replserversetuphistoryhistorypath-callback" target="_blank" rel="noopener noreferrer">replServer.setupHistory(historyPath, callback)</a></span></a></h3><p>Node.js 的 <code>replServer.setupHistory()</code> 函数是在 Node.js 的 REPL (Read-Eval-Print Loop，即交互式解释器) 环境中使用的一个功能。这个函数让我们可以设置和管理 REPL 历史记录，比如你之前键入的命令。这对于提高开发效率特别有帮助，因为你可以轻松地回顾和重新执行之前的命令。</p><h3 id="参数解释" tabindex="-1"><a class="header-anchor" href="#参数解释"><span>参数解释</span></a></h3><ul><li><code>historyPath</code>：这是一个字符串参数，指定历史记录文件的存储路径。REPL 会将你的会话历史保存在这个文件中，让你下次启动 REPL 时能够回顾。</li><li><code>callback</code>：这是一个回调函数，当历史记录设置完成或发生错误时被调用。它有两个参数：错误对象 (<code>err</code>) 和一个结果参数。如果操作成功，<code>err</code> 会是 <code>null</code> 或 <code>undefined</code>。</li></ul><h3 id="实际应用例子-2" tabindex="-1"><a class="header-anchor" href="#实际应用例子-2"><span>实际应用例子</span></a></h3><p>想象一下，你正在使用 Node.js REPL 来测试一些 JavaScript 代码片段，或者探索 Node.js API。在这个过程中，你可能会输入很多命令。如果你关闭了 REPL 窗口，那么默认情况下，你之前的所有输入都会丢失。这意味着，当你下次启动 REPL 时，你需要重新输入之前的命令，这显然是不方便的。</p><p>使用 <code>replServer.setupHistory()</code> 可以帮助你避免这种情况。你可以将你的 REPL 历史记录保存到一个文件中，这样，即使 REPL 关闭了，下次打开时也能通过读取这个文件来恢复之前的历史记录。</p><h4 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码：</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入 repl 模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 创建一个 REPL 服务器实例</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> replServer</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 设置历史记录文件的路径</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> historyPath</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./.node_repl_history</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 调用 setupHistory 函数，设置历史记录</span></span>\n<span class="line"><span style="color:#D8DEE9;">replServer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setupHistory</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">historyPath</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">设置 REPL 历史记录失败: </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">err</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">`</span><span style="color:#A3BE8C;">REPL 历史记录已设置，路径：</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">historyPath</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们首先引入了 <code>repl</code> 模块并创建了一个 REPL 服务器实例。然后，我们定义了历史记录文件的路径，并通过调用 <code>setupHistory()</code> 函数将其设置好。如果设置成功，我们会看到一条确认消息；如果失败，会输出相应的错误信息。</p><p>通过这种方式，你就能在 Node.js REPL 中更加高效地工作，不必担心丢失之前的命令历史。</p><h2 id="repl-builtinmodules" tabindex="-1"><a class="header-anchor" href="#repl-builtinmodules"><span><a href="https://nodejs.org/docs/latest/api/repl.html#replbuiltinmodules" target="_blank" rel="noopener noreferrer">repl.builtinModules</a></span></a></h2><p>Node.js 是一个非常强大的 JavaScript 运行环境，它允许你使用 JavaScript 来编写服务器端代码。Node.js v21.7.1 是 Node.js 的一个版本。在 Node.js 中，有很多内建模块（builtinModules），这些模块提供了各种实用的功能，比如文件系统操作、HTTP 服务器和客户端、加密功能等，而无需安装额外的包。</p><h3 id="repl-builtinmodules-1" tabindex="-1"><a class="header-anchor" href="#repl-builtinmodules-1"><span><code>repl.builtinModules</code></span></a></h3><p>在 Node.js v21.7.1 中，<code>repl.builtinModules</code> 是 REPL（Read-Eval-Print Loop，读取-求值-输出 循环）模块下的一个属性。REPL 模块主要是为了提供一个简单的环境来交互式地运行 JavaScript 代码。你可以把它想象成一个可以直接输入并立即执行 JavaScript 代码的控制台界面。</p><p><code>repl.builtinModules</code> 属性会返回一个数组，这个数组包含了所有可用的内建模块的名称。这意味着你可以通过这个属性来查看在你的 Node.js 环境中都有哪些内建模块可用。</p><h3 id="实际运用例子-5" tabindex="-1"><a class="header-anchor" href="#实际运用例子-5"><span>实际运用例子</span></a></h3><h4 id="列出所有内建模块" tabindex="-1"><a class="header-anchor" href="#列出所有内建模块"><span>列出所有内建模块</span></a></h4><p>假设你想知道你的 Node.js 环境中都包括哪些内建模块，可以利用 <code>repl.builtinModules</code> 来获取这个信息。以下是一个如何在 Node.js REPL 环境中使用该属性的例子：</p><ol><li>首先，打开命令行或终端。</li><li>输入 <code>node</code> 命令进入 Node.js 的 REPL 环境。</li><li>输入以下命令：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">builtinModules</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后，你会看到一个数组，列出了所有可用的内建模块名字，如 <code>[&#39;fs&#39;, &#39;http&#39;, &#39;crypto&#39;, ...]</code>。</p><h4 id="使用内建模块进行文件操作" tabindex="-1"><a class="header-anchor" href="#使用内建模块进行文件操作"><span>使用内建模块进行文件操作</span></a></h4><p>在了解了 <code>repl.builtinModules</code> 后，让我们举一个使用内建模块 <code>fs</code>（文件系统模块）的例子。假设你想读取当前目录下的一个文件 <code>example.txt</code> 并打印其内容，你可以这样做：</p><ol><li>首先，确保你的 Node.js 环境已经安装好，并且当前目录下有一个名为 <code>example.txt</code> 的文件。</li><li>创建一个名为 <code>readFile.js</code> 的新文件，并写入以下代码：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">example.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> data</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>\n<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">    return;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span></span>\n<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>保存文件并关闭编辑器。</li><li>在命令行或终端中，导航到该文件所在的目录。</li><li>输入命令 <code>node readFile.js</code> 并执行。</li></ol><p>如果一切顺利，你将会看到 <code>example.txt</code> 文件的内容被打印在终端里。</p><p>以上就是关于 <code>repl.builtinModules</code> 的解释以及利用 Node.js 内建模块进行简单操作的例子。希望这对你有所帮助！</p><h2 id="repl-start-options" tabindex="-1"><a class="header-anchor" href="#repl-start-options"><span><a href="https://nodejs.org/docs/latest/api/repl.html#replstartoptions" target="_blank" rel="noopener noreferrer">repl.start([options])</a></span></a></h2><p>Node.js 的 <code>repl.start([options])</code> 方法用于启动一个 REPL (Read-Eval-Print Loop) 环境，即一个交互式的编程环境，让你可以输入代码并立即看到运行结果。这在测试小段代码、学习新的 Node.js 功能或者进行快速原型开发时非常有用。</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><ol><li><strong>REPL</strong>：代表“读取-求值-输出 循环”(Read-Eval-Print Loop)。用户输入代码，系统读取这些代码，对其进行求值（执行），然后输出结果。</li><li><strong>options</strong>：是一个对象，用于自定义 REPL 的行为，比如提示符、预加载的模块等。</li></ol><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h3><p>要使用<code>repl.start()</code>，首先需要导入 Node.js 的 <code>repl</code> 模块：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后调用 <code>start()</code> 方法，创建一个 REPL 实例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你也可以传递一个选项对象给<code>start()</code>来定制 REPL 行为。例如，改变提示符：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会使得 REPL 的提示符从默认的 &gt; 变为 <code>&gt; </code>，让提示符看起来更清爽一些。</p><h3 id="实际运用例子-6" tabindex="-1"><a class="header-anchor" href="#实际运用例子-6"><span>实际运用例子</span></a></h3><h4 id="_1-快速测试代码片段" tabindex="-1"><a class="header-anchor" href="#_1-快速测试代码片段"><span>1. 快速测试代码片段</span></a></h4><p>假设你想测试一个简单的 JavaScript 函数，比如计算两个数字之和。你可以直接在 REPL 中输入这个函数，然后调用它：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> const</span><span style="color:#88C0D0;"> sum</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">sum</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#B48EAD;">8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-学习新的-node-js-api" tabindex="-1"><a class="header-anchor" href="#_2-学习新的-node-js-api"><span>2. 学习新的 Node.js API</span></a></h4><p>当你在学习如何使用新的 Node.js API 时，使用 REPL 可以立即看到 API 的效果。例如，探索<code>fs</code>模块来读取文件：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">/path/to/file</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> data</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">...</span><span style="color:#81A1C1;"> if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">throw</span><span style="color:#D8DEE9;"> err</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">...</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以立即看到文件内容，而不需要创建和运行一个完整的脚本文件。</p><h4 id="_3-开发和测试快速原型" tabindex="-1"><a class="header-anchor" href="#_3-开发和测试快速原型"><span>3. 开发和测试快速原型</span></a></h4><p>如果你有一个构思，想快速验证其可行性，REPL 是一个好去处。例如，尝试不同的算法解决方案，或者与第三方 API 进行简单的集成测试。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>Node.js 的 <code>repl.start()</code> 提供了一个强大而灵活的方式，让开发者可以快速交互地执行 JavaScript 代码，进行测试、学习和原型开发。通过使用不同的选项，你还可以进一步定制 REPL 环境，使其更贴近你的工作流。</p><h2 id="the-node-js-repl" tabindex="-1"><a class="header-anchor" href="#the-node-js-repl"><span><a href="https://nodejs.org/docs/latest/api/repl.html#the-nodejs-repl" target="_blank" rel="noopener noreferrer">The Node.js REPL</a></span></a></h2><p>Node.js REPL（Read-Eval-Print Loop，读取-求值-输出 循环）是一个非常有用的工具和环境，它允许你在一个交互式命令行界面中运行 JavaScript 代码。你可以把它想象成一个实时的代码测试场，让你能够快速尝试、调试代码片段，无需在编辑器中建立完整的项目。下面我将通过一些简易的步骤和例子来解释 Node.js REPL。</p><h3 id="如何启动-node-js-repl" tabindex="-1"><a class="header-anchor" href="#如何启动-node-js-repl"><span>如何启动 Node.js REPL</span></a></h3><ol><li>首先，确保你的电脑上安装了 Node.js。可以在终端或命令提示符中运行 <code>node -v</code> 来检查是否已安装以及安装的版本。</li><li>启动 REPL 只需打开你的终端或命令提示符，输入 <code>node</code> 然后按回车。</li></ol><p>现在，你应该会看到一个 &gt; 符号，表示你现在处于 Node.js 的 REPL 环境中。</p><h3 id="实际运用示例-2" tabindex="-1"><a class="header-anchor" href="#实际运用示例-2"><span>实际运用示例</span></a></h3><h4 id="示例-1-基本算术运算" tabindex="-1"><a class="header-anchor" href="#示例-1-基本算术运算"><span>示例 1: 基本算术运算</span></a></h4><p>在 REPL 中，你可以直接执行基本的算术运算。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 3</span></span>\n<span class="line"><span style="color:#B48EAD;">5</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 7</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 6</span></span>\n<span class="line"><span style="color:#B48EAD;">42</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-2-定义变量并使用它" tabindex="-1"><a class="header-anchor" href="#示例-2-定义变量并使用它"><span>示例 2: 定义变量并使用它</span></a></h4><p>你可以定义变量并在之后的运算中使用这些变量。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> let</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 10</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> let</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 20</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span></span>\n<span class="line"><span style="color:#B48EAD;">30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：当你定义变量时，REPL 显示 <code>undefined</code>，这是因为声明变量的操作没有返回值。</p><h4 id="示例-3-使用-javascript-函数" tabindex="-1"><a class="header-anchor" href="#示例-3-使用-javascript-函数"><span>示例 3: 使用 JavaScript 函数</span></a></h4><p>你还可以定义函数并调用它们。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> sayHello</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#81A1C1;">...</span><span style="color:#81A1C1;"> return</span><span style="color:#ECEFF4;"> `</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">`</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">...</span><span style="color:#ECEFF4;"> }</span></span>\n<span class="line"><span style="color:#81A1C1;">undefined</span></span>\n<span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#88C0D0;"> sayHello</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Alice</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Hello, Alice!</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-4-异步操作" tabindex="-1"><a class="header-anchor" href="#示例-4-异步操作"><span>示例 4: 异步操作</span></a></h4><p>Node.js 支持异步编程。在 REPL 中，你也可以尝试简单的异步代码。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;</span><span style="color:#88C0D0;"> setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Hello after 3 seconds</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3000</span><span style="color:#D8DEE9FF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这段代码会在等待 3 秒后输出 &quot;Hello after 3 seconds&quot;。</p><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3"><span>小结</span></a></h3><p>Node.js 的 REPL 是一个强大的工具，特别适合快速实验 JavaScript 代码、学习新的 Node.js 特性或 API。通过实时反馈，它为学习和探索提供了一个极佳的平台。记得，作为一个编程新手，多尝试和实践是非常重要的，而 Node.js 的 REPL 就是一个很好的开始。</p><h3 id="environment-variable-options" tabindex="-1"><a class="header-anchor" href="#environment-variable-options"><span><a href="https://nodejs.org/docs/latest/api/repl.html#environment-variable-options" target="_blank" rel="noopener noreferrer">Environment variable options</a></span></a></h3><p>当我们谈到 Node.js 中的环境变量选项（Environment variable options），我们实际上是在讨论如何通过设置环境变量来影响 Node.js 应用程序的行为。这些环境变量可以非常方便地用于控制程序的不同方面，比如调试级别、日志记录、应用配置等，而无需更改代码本身。</p><p>在 Node.js v21.7.1 文档中提到的“环境变量选项”特指 REPL(Read-Eval-Print Loop)环节的相关配置。REPL 是一个简易的、交互式的编程环境，允许开发者输入 Node.js 代码并立即看到运行结果。这对于学习 Node.js 或者快速测试代码片段非常有帮助。</p><p>具体到 Node.js v21.7.1 版本，虽然我不能直接访问最新版本的文档，但通常情况下环境变量可以用来配置如下几个方面：</p><ol><li><strong>启动 REPL 时自动执行的脚本</strong>: 通过设置一个特定的环境变量，你可以指定一个脚本文件，在 REPL 启动时自动加载并执行它。</li><li><strong>自定义 REPL 的提示符号</strong>: 通常 REPL 使用&gt;作为提示符号，但你可以通过环境变量修改它，以适应你的偏好或提高可读性。</li><li><strong>历史记录的管理</strong>: REPL 会将你输入的命令保存在历史记录中，通过环境变量，你可以控制这个历史记录的存放位置以及大小。</li></ol><p><strong>现实世界的例子</strong>:</p><ol><li><p><strong>自动加载工具库</strong>: 假设你经常使用 lodash 这个工具库进行开发。你可以创建一个初始化脚本，其中引入 lodash，并通过环境变量配置 REPL 在启动时自动执行这个脚本。这样，每次进入 REPL 时，lodash 就已经被加载，可以直接使用，无需手动导入。</p></li><li><p><strong>定制化 REPL 环境</strong>: 如果你正在开发一个项目，需要频繁地与数据库交互，你可以编写一个初始化脚本来建立数据库连接，并通过环境变量使得这个脚本在 REPL 启动时自动执行。这样，你就可以在 REPL 环境中直接运行数据库查询了。</p></li><li><p><strong>控制历史记录</strong>: 作为一个开发者，可能你希望保留更多的 REPL 命令历史，以便回顾过去尝试过的命令。通过设置环境变量，你可以指定历史记录文件的存储位置和允许的最大记录数，这样就不会遗失那些有价值的命令。</p></li></ol><p>总之，环境变量选项提供了一种灵活的方式来控制和自定 Node.js REPL 的行为，无论是为了提升开发效率、适应特定的开发场景，还是简单地根据个人偏好进行定制。</p><h3 id="persistent-history" tabindex="-1"><a class="header-anchor" href="#persistent-history"><span><a href="https://nodejs.org/docs/latest/api/repl.html#persistent-history" target="_blank" rel="noopener noreferrer">Persistent history</a></span></a></h3><p>Node.js 的 REPL (Read-Eval-Print Loop) 是一个非常有用的工具，允许你在一个交互式环境中运行 JavaScript 代码。这种环境特别适合试验代码片段、学习新功能或进行调试。在 Node.js v21.7.1 版本中，一个名为 &quot;Persistent history&quot; （持久化历史）的功能被引入，这对于提高 REPL 的可用性和方便性来说是一个重要的改进。</p><h3 id="持久化历史-persistent-history-的概念" tabindex="-1"><a class="header-anchor" href="#持久化历史-persistent-history-的概念"><span>持久化历史（Persistent History）的概念</span></a></h3><p>简单来说，&quot;持久化历史&quot; 功能能够让你的 Node.js REPL 记住你之前的输入。即使你关闭了 REPL 窗口，当你下次启动时，之前输入的命令还会被记住，你可以通过上下箭头键来访问它们。这就像是 Linux 或 macOS 终端的历史功能一样。</p><h3 id="持久化历史的工作原理" tabindex="-1"><a class="header-anchor" href="#持久化历史的工作原理"><span>持久化历史的工作原理</span></a></h3><p>当启用此功能后，每当你在 REPL 中执行一个命令，该命令就会被保存到一个预定的文件中。默认情况下，这个文件位于用户的主目录下，以 <code>.node_repl_history</code> 为文件名。这样做的好处是，无论何时重新打开 REPL，都可以读取这个文件，并加载之前的会话历史。</p><h3 id="如何使用持久化历史" tabindex="-1"><a class="header-anchor" href="#如何使用持久化历史"><span>如何使用持久化历史</span></a></h3><p>在 Node.js v21.7.1 版本中，这个功能已经是默认开启的。这意味着你不需要进行任何额外的设置即可享受这个便捷的功能。只要你使用的版本足够新，这个历史记录功能就自动为你服务了。</p><h3 id="实际应用例子-3" tabindex="-1"><a class="header-anchor" href="#实际应用例子-3"><span>实际应用例子</span></a></h3><ol><li><p><strong>学习和实验</strong>：当你正在学习新的 JavaScript 特性或者 Node.js 的 API 时，可能需要尝试很多不同的代码片段。有了持久化历史，即使在多天的学习之间，你也可以轻松找到之前尝试过的代码，减少重复工作。</p></li><li><p><strong>调试</strong>：如果你在开发过程中使用 REPL 来测试某些功能或逻辑，下次你回来继续工作时，能够迅速回顾之前的调试命令，加快问题的解决速度。</p></li><li><p><strong>日常任务脚本</strong>：对于一些经常需要运行的小脚本或命令，利用持久化历史，你不必每次都重新敲打全部命令，只需通过历史记录快速找到并执行即可。</p></li></ol><p>总而言之，持久化历史功能为 Node.js 的 REPL 增加了更多的便捷性和效率，无论是对于编程新手还是有经验的开发者来说，都是一个十分实用的提升。</p><h3 id="using-the-node-js-repl-with-advanced-line-editors" tabindex="-1"><a class="header-anchor" href="#using-the-node-js-repl-with-advanced-line-editors"><span><a href="https://nodejs.org/docs/latest/api/repl.html#using-the-nodejs-repl-with-advanced-line-editors" target="_blank" rel="noopener noreferrer">Using the Node.js REPL with advanced line-editors</a></span></a></h3><p>让我们一步一步来理解 Node.js REPL(Read-Eval-Print Loop)的使用，以及如何与高级行编辑器一同使用它。</p><h3 id="什么是-node-js-repl" tabindex="-1"><a class="header-anchor" href="#什么是-node-js-repl"><span>什么是 Node.js REPL？</span></a></h3><p>REPL 代表“读取-求值-打印-循环”，这是一个简单的、交互式的编程环境。在 Node.js 中，你可以通过在命令行输入<code>node</code>而不跟任何文件名来启动 REPL。一旦进入 REPL，你就可以开始输入 JavaScript 代码，该代码将被 Node.js 读取（Read）、求值（Eval）、打印结果（Print），然后等待更多的输入（Loop）。这对于快速测试代码片段或进行实验非常有用。</p><h3 id="如何与高级行编辑器一同使用-node-js-repl" tabindex="-1"><a class="header-anchor" href="#如何与高级行编辑器一同使用-node-js-repl"><span>如何与高级行编辑器一同使用 Node.js REPL？</span></a></h3><p>在 Node.js v21.7.1 版本中，引入了与高级行编辑器（比如 GNU Readline 或 libedit）一起使用 REPL 的能力。这意味着你现在可以利用这些编辑器提供的特性，像是更复杂的键盘快捷键、历史记录搜索以及自定义的操作，来增强你的 REPL 体验。</p><h4 id="实际运用示例-3" tabindex="-1"><a class="header-anchor" href="#实际运用示例-3"><span>实际运用示例：</span></a></h4><p>假设你想要在 REPL 中运行一些 JavaScript 代码，并且想要利用 GNU Readline 或 libedit 带来的额外功能。以下是一些可能的使用场景：</p><ol><li><p><strong>历史记录搜索</strong>：</p><ul><li>在传统的 REPL 中，你可能需要频繁地按上箭头键来回溯之前输入的命令。而在支持高级编辑功能的 REPL 中，你可以使用更先进的搜索功能来快速找到之前执行过的特定命令。</li></ul></li><li><p><strong>快捷键绑定</strong>：</p><ul><li>假设你经常需要删除一行内的所有文字。在基础 REPL 中，这可能需要逐个字符地删除。但在使用了高级行编辑器的情况下，你通常可以绑定一个快捷键来立即清空当前行。</li></ul></li><li><p><strong>自定义操作</strong>：</p><ul><li>高级行编辑器允许你创建自定义操作，例如快速插入常用的代码模板或执行特定的格式化操作。</li></ul></li></ol><h4 id="如何启动这种模式" tabindex="-1"><a class="header-anchor" href="#如何启动这种模式"><span>如何启动这种模式？</span></a></h4><p>使用高级行编辑器的具体步骤依赖于你的环境配置和所使用的行编辑器。一般而言，你需要确保正确安装了相应的行编辑器库，并且可能需要在启动 Node.js REPL 时设置某些环境变量或配置项。</p><p>对于大部分用户来说，Node.js 的标准 REPL 已经足够强大，可以满足日常的快速测试和探索需求。然而，如果你发现自己需要更高级的编辑功能，那么探索与这些行编辑器集成的选项就非常有价值了。</p><p>总之，Node.js v21.7.1 中对高级行编辑器的支持为开发者提供了一个更加强大和灵活的交互式编程环境。这使得在 REPL 中进行代码试验和调试变得更加高效和愉快。</p><h3 id="starting-multiple-repl-instances-against-a-single-running-instance" tabindex="-1"><a class="header-anchor" href="#starting-multiple-repl-instances-against-a-single-running-instance"><span><a href="https://nodejs.org/docs/latest/api/repl.html#starting-multiple-repl-instances-against-a-single-running-instance" target="_blank" rel="noopener noreferrer">Starting multiple REPL instances against a single running instance</a></span></a></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它让我们可以在服务器端运行 JavaScript 代码。REPL (Read-Eval-Print Loop) 是 Node.js 提供的一个交互式解释器界面，你可以在其中输入 JavaScript 代码并立即看到执行结果。</p><p>在 Node.js v21.7.1 中介绍的“Starting multiple REPL instances against a single running instance”这个特性，简单来说，就是允许你在一个运行中的 Node.js 应用程序内部启动多个 REPL 实例。这意味着你可以在同一个应用程序上下文中，创建多个独立的命令行界面，每个界面都能交互式地执行 JavaScript 代码。</p><h3 id="为什么要使用多个-repl-实例" tabindex="-1"><a class="header-anchor" href="#为什么要使用多个-repl-实例"><span>为什么要使用多个 REPL 实例？</span></a></h3><p>在开发过程中，有时你可能需要同时观察或操作应用程序的不同部分。通过启动多个 REPL 实例，你可以在不干扰主应用程序运行的情况下，同时在多个独立的界面中执行代码、测试功能或调试问题。这对于调试复杂的应用程序、实验新功能或学习 Node.js 都非常有帮助。</p><h3 id="如何应用这一特性" tabindex="-1"><a class="header-anchor" href="#如何应用这一特性"><span>如何应用这一特性？</span></a></h3><p>假设你正在开发一个 Web 应用，并且想同时监控应用的两个不同模块——比如用户认证系统和数据缓存逻辑。你可以为每个模块启动一个 REPL 实例，这样就能在不退出或重启整个应用的情况下，分别测试和调试这两部分代码。</p><h3 id="实际操作示例" tabindex="-1"><a class="header-anchor" href="#实际操作示例"><span>实际操作示例：</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 假设这是你的 Node.js 应用程序的入口文件，比如 app.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> repl</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repl</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> http</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 启动一个 HTTP 服务器</span></span>\n<span class="line"><span style="color:#D8DEE9;">http</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">createServer</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">req</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>\n<span class="line"><span style="color:#D8DEE9;">    res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">writeHead</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">200</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Content-Type</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">text/plain</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">    res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">end</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello, world!</span><span style="color:#EBCB8B;">\\n</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>\n<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">listen</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1337</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">127.0.0.1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">HTTP server running at http://127.0.0.1:1337/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 在同一个 Node.js 应用里启动第一个 REPL 实例</span></span>\n<span class="line"><span style="color:#D8DEE9;">repl</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> prompt</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 你也可以根据需要，创建更多的 REPL 实例</span></span>\n<span class="line"><span style="color:#616E88;">// 比如，另一个用于特定模块或调试目的的REPL实例</span></span>\n<span class="line"><span style="color:#616E88;">// 只需要再次调用 `repl.start()` 并配置不同的选项</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先启动了一个简单的 HTTP 服务器。然后，我们通过调用 <code>repl.start()</code> 方法启动了一个 REPL 实例。如果需要，你可以继续调用 <code>repl.start()</code> 来启动额外的 REPL 实例，每个实例都可以独立运行和执行代码。</p><p>通过这种方式，你可以在应用程序的不同方面之间进行快速切换和交互，而不需要停止或重新启动整个应用程序。这使得开发和调试过程更加灵活和高效。</p><p>总结起来，Node.js v21.7.1 中引入的能够针对单个运行实例启动多个 REPL 实例的功能，极大地提高了开发者的生产效率，尤其在处理大型和复杂应用时。这个功能打开了新的可能性，让开发者可以更加灵活地管理和调试他们的应用。</p>',484)],o={},p=(0,n(8538).A)(o,[["render",function(s,a){return(0,l.uX)(),(0,l.CE)("div",null,e)}]]),r=JSON.parse('{"path":"/document/node-doc/REPL.html","title":"REPL","lang":"zh-CN","frontmatter":{"article":false,"description":"REPL Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。这意味着你可以用 JavaScript 来编写用于网络服务器、命令行工具等的脚本。REPL（Read-Eval-Print Loop，读取-执行-打印循环）是 Node.js 提供的一个交互式编程环境，可以...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/document/node-doc/REPL.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"REPL"}],["meta",{"property":"og:description","content":"REPL Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。这意味着你可以用 JavaScript 来编写用于网络服务器、命令行工具等的脚本。REPL（Read-Eval-Print Loop，读取-执行-打印循环）是 Node.js 提供的一个交互式编程环境，可以..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:46:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:46:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"REPL\\",\\"description\\":\\"REPL Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。这意味着你可以用 JavaScript 来编写用于网络服务器、命令行工具等的脚本。REPL（Read-Eval-Print Loop，读取-执行-打印循环）是 Node.js 提供的一个交互式编程环境，可以...\\"}"]]},"headers":[{"level":3,"title":"REPL 的基础","slug":"repl-的基础","link":"#repl-的基础","children":[]},{"level":3,"title":"实际应用示例","slug":"实际应用示例","link":"#实际应用示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"Design and features","slug":"design-and-features","link":"#design-and-features","children":[{"level":3,"title":"REPL (Read-Eval-Print Loop)","slug":"repl-read-eval-print-loop","link":"#repl-read-eval-print-loop","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":3,"title":"Commands and special keys","slug":"commands-and-special-keys","link":"#commands-and-special-keys","children":[]},{"level":3,"title":"特殊命令","slug":"特殊命令","link":"#特殊命令","children":[]},{"level":3,"title":"特殊按键","slug":"特殊按键","link":"#特殊按键","children":[]},{"level":3,"title":"Default evaluation","slug":"default-evaluation","link":"#default-evaluation","children":[]},{"level":3,"title":"基本工作方式","slug":"基本工作方式","link":"#基本工作方式","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-1","link":"#实际运用例子-1","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":3,"title":"如何使用 Node.js 的 REPL","slug":"如何使用-node-js-的-repl","link":"#如何使用-node-js-的-repl","children":[]},{"level":3,"title":"示例说明","slug":"示例说明","link":"#示例说明","children":[]},{"level":3,"title":"Node.js 中的全局和局部作用域","slug":"node-js-中的全局和局部作用域","link":"#node-js-中的全局和局部作用域","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子","link":"#实际运用的例子","children":[]},{"level":3,"title":"访问核心模块","slug":"访问核心模块","link":"#访问核心模块","children":[]},{"level":3,"title":"实际例子","slug":"实际例子","link":"#实际例子","children":[]},{"level":3,"title":"全局未捕获异常处理","slug":"全局未捕获异常处理","link":"#全局未捕获异常处理","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-2","link":"#实际运用例子-2","children":[]},{"level":3,"title":"使用 _ 存储最后一个表达式的结果","slug":"使用-存储最后一个表达式的结果","link":"#使用-存储最后一个表达式的结果","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"什么是异步操作？","slug":"什么是异步操作","link":"#什么是异步操作","children":[]},{"level":3,"title":"为什么需要await？","slug":"为什么需要await","link":"#为什么需要await","children":[]},{"level":3,"title":"如何使用await？","slug":"如何使用await","link":"#如何使用await","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-3","link":"#实际运用例子-3","children":[]},{"level":3,"title":"Reverse-i-search","slug":"reverse-i-search","link":"#reverse-i-search","children":[]},{"level":3,"title":"什么是 Reverse-i-search?","slug":"什么是-reverse-i-search","link":"#什么是-reverse-i-search","children":[]},{"level":3,"title":"如何使用 Reverse-i-search?","slug":"如何使用-reverse-i-search","link":"#如何使用-reverse-i-search","children":[]},{"level":3,"title":"实际例子","slug":"实际例子-1","link":"#实际例子-1","children":[]},{"level":3,"title":"Custom evaluation functions","slug":"custom-evaluation-functions","link":"#custom-evaluation-functions","children":[]},{"level":3,"title":"自定义求值函数是什么？","slug":"自定义求值函数是什么","link":"#自定义求值函数是什么","children":[]},{"level":3,"title":"如何使用自定义求值函数？","slug":"如何使用自定义求值函数","link":"#如何使用自定义求值函数","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-4","link":"#实际运用例子-4","children":[]},{"level":3,"title":"什么是 Recoverable Errors？","slug":"什么是-recoverable-errors","link":"#什么是-recoverable-errors","children":[]},{"level":3,"title":"实际例子","slug":"实际例子-2","link":"#实际例子-2","children":[]},{"level":3,"title":"怎样判断错误是否可恢复？","slug":"怎样判断错误是否可恢复","link":"#怎样判断错误是否可恢复","children":[]},{"level":3,"title":"Customizing REPL output","slug":"customizing-repl-output","link":"#customizing-repl-output","children":[]},{"level":3,"title":"如何自定义 REPL 输出？","slug":"如何自定义-repl-输出","link":"#如何自定义-repl-输出","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子-1","link":"#实际运用的例子-1","children":[]}]},{"level":2,"title":"Class: REPLServer","slug":"class-replserver","link":"#class-replserver","children":[{"level":3,"title":"创建 REPL 环境","slug":"创建-repl-环境","link":"#创建-repl-环境","children":[]},{"level":3,"title":"扩展 REPL 环境","slug":"扩展-repl-环境","link":"#扩展-repl-环境","children":[]},{"level":3,"title":"监听事件","slug":"监听事件","link":"#监听事件","children":[]},{"level":3,"title":"实际应用","slug":"实际应用","link":"#实际应用","children":[]},{"level":3,"title":"Event: \'exit\'","slug":"event-exit","link":"#event-exit","children":[]},{"level":3,"title":"理解 \'exit\' 事件","slug":"理解-exit-事件","link":"#理解-exit-事件","children":[]},{"level":3,"title":"如何使用","slug":"如何使用","link":"#如何使用","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例","link":"#实际运用示例","children":[]},{"level":3,"title":"Event: \'reset\'","slug":"event-reset","link":"#event-reset","children":[]},{"level":3,"title":"应用场景示例","slug":"应用场景示例","link":"#应用场景示例","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]},{"level":3,"title":"replServer.defineCommand(keyword, cmd)","slug":"replserver-definecommand-keyword-cmd","link":"#replserver-definecommand-keyword-cmd","children":[]},{"level":3,"title":"什么是 REPL？","slug":"什么是-repl","link":"#什么是-repl","children":[]},{"level":3,"title":"replServer.defineCommand(keyword, cmd)","slug":"replserver-definecommand-keyword-cmd-1","link":"#replserver-definecommand-keyword-cmd-1","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子-2","link":"#实际运用的例子-2","children":[]},{"level":3,"title":"小结","slug":"小结-2","link":"#小结-2","children":[]},{"level":3,"title":"replServer.displayPrompt([preserveCursor])","slug":"replserver-displayprompt-preservecursor","link":"#replserver-displayprompt-preservecursor","children":[]},{"level":3,"title":"解释","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-1","link":"#实际运用示例-1","children":[]},{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":3,"title":"replServer.clearBufferedCommand()","slug":"replserver-clearbufferedcommand","link":"#replserver-clearbufferedcommand","children":[]},{"level":3,"title":"什么是 REPL?","slug":"什么是-repl-1","link":"#什么是-repl-1","children":[]},{"level":3,"title":"replServer.clearBufferedCommand()","slug":"replserver-clearbufferedcommand-1","link":"#replserver-clearbufferedcommand-1","children":[]},{"level":3,"title":"实际应用例子","slug":"实际应用例子-1","link":"#实际应用例子-1","children":[]},{"level":3,"title":"replServer.parseREPLKeyword(keyword[, rest])","slug":"replserver-parsereplkeyword-keyword-rest","link":"#replserver-parsereplkeyword-keyword-rest","children":[]},{"level":3,"title":"Node.js","slug":"node-js","link":"#node-js","children":[]},{"level":3,"title":"REPL","slug":"repl-1","link":"#repl-1","children":[]},{"level":3,"title":"replServer.parseREPLKeyword()","slug":"replserver-parsereplkeyword","link":"#replserver-parsereplkeyword","children":[]},{"level":3,"title":"replServer.setupHistory(historyPath, callback)","slug":"replserver-setuphistory-historypath-callback","link":"#replserver-setuphistory-historypath-callback","children":[]},{"level":3,"title":"参数解释","slug":"参数解释","link":"#参数解释","children":[]},{"level":3,"title":"实际应用例子","slug":"实际应用例子-2","link":"#实际应用例子-2","children":[]}]},{"level":2,"title":"repl.builtinModules","slug":"repl-builtinmodules","link":"#repl-builtinmodules","children":[{"level":3,"title":"repl.builtinModules","slug":"repl-builtinmodules-1","link":"#repl-builtinmodules-1","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-5","link":"#实际运用例子-5","children":[]}]},{"level":2,"title":"repl.start([options])","slug":"repl-start-options","link":"#repl-start-options","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-6","link":"#实际运用例子-6","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]},{"level":2,"title":"The Node.js REPL","slug":"the-node-js-repl","link":"#the-node-js-repl","children":[{"level":3,"title":"如何启动 Node.js REPL","slug":"如何启动-node-js-repl","link":"#如何启动-node-js-repl","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例-2","link":"#实际运用示例-2","children":[]},{"level":3,"title":"小结","slug":"小结-3","link":"#小结-3","children":[]},{"level":3,"title":"Environment variable options","slug":"environment-variable-options","link":"#environment-variable-options","children":[]},{"level":3,"title":"Persistent history","slug":"persistent-history","link":"#persistent-history","children":[]},{"level":3,"title":"持久化历史（Persistent History）的概念","slug":"持久化历史-persistent-history-的概念","link":"#持久化历史-persistent-history-的概念","children":[]},{"level":3,"title":"持久化历史的工作原理","slug":"持久化历史的工作原理","link":"#持久化历史的工作原理","children":[]},{"level":3,"title":"如何使用持久化历史","slug":"如何使用持久化历史","link":"#如何使用持久化历史","children":[]},{"level":3,"title":"实际应用例子","slug":"实际应用例子-3","link":"#实际应用例子-3","children":[]},{"level":3,"title":"Using the Node.js REPL with advanced line-editors","slug":"using-the-node-js-repl-with-advanced-line-editors","link":"#using-the-node-js-repl-with-advanced-line-editors","children":[]},{"level":3,"title":"什么是 Node.js REPL？","slug":"什么是-node-js-repl","link":"#什么是-node-js-repl","children":[]},{"level":3,"title":"如何与高级行编辑器一同使用 Node.js REPL？","slug":"如何与高级行编辑器一同使用-node-js-repl","link":"#如何与高级行编辑器一同使用-node-js-repl","children":[]},{"level":3,"title":"Starting multiple REPL instances against a single running instance","slug":"starting-multiple-repl-instances-against-a-single-running-instance","link":"#starting-multiple-repl-instances-against-a-single-running-instance","children":[]},{"level":3,"title":"为什么要使用多个 REPL 实例？","slug":"为什么要使用多个-repl-实例","link":"#为什么要使用多个-repl-实例","children":[]},{"level":3,"title":"如何应用这一特性？","slug":"如何应用这一特性","link":"#如何应用这一特性","children":[]},{"level":3,"title":"实际操作示例：","slug":"实际操作示例","link":"#实际操作示例","children":[]}]}],"git":{"createdTime":1718963177000,"updatedTime":1718963177000,"contributors":[{"name":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":1}]},"readingTime":{"minutes":62.84,"words":18852},"filePathRelative":"document/node-doc/REPL.md","localizedDate":"2024年6月21日","excerpt":"\\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，允许你在服务器端运行 JavaScript 代码。这意味着你可以用 JavaScript 来编写用于网络服务器、命令行工具等的脚本。REPL（Read-Eval-Print Loop，读取-执行-打印循环）是 Node.js 提供的一个交互式编程环境，可以让你方便地测试 JavaScript 代码片段。</p>\\n<h3>REPL 的基础</h3>\\n<p>REPL 允许你输入 JavaScript 代码，并立刻看到代码执行结果。它非常适合实验性编程和快速学习。当你启动 Node.js 的 REPL 环境时（只要在命令行中输入 <code>node</code> 并回车），你会进入一个可以输入 JavaScript 代码的环境。</p>","autoDesc":true}')},8538:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,l]of a)n[s]=l;return n}}}]);