"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[6693],{3401:(s,n,e)=>{e.r(n),e.d(n,{comp:()=>c,data:()=>p});var o=e(9034);const a=[(0,o.Fv)('<h1 id="punycode" tabindex="-1"><a class="header-anchor" href="#punycode"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycode" target="_blank" rel="noopener noreferrer">Punycode</a></span></a></h1><p>Node.js 在其早期版本中内嵌了一个名为 <code>Punycode</code> 的模块，这是一个用于编码和解码域名的工具。但从 Node.js v7.0.0 开始，<code>Punycode</code> 被标记为弃用，并推荐使用 JavaScript 内置的 <code>Intl</code> 对象下的 <code>URL</code> 和 <code>URLSearchParams</code> 类或其他库来处理 Unicode 域名和邮箱地址的问题。</p><p><strong>什么是 Punycode？</strong></p><p>Punycode 是一种特殊的编码方式，它允许我们将包含国际字符（非 ASCII 字符）的域名转换成由限定的 ASCII 字符集组成的形式。这主要是因为互联网的许多部分，尤其是域名系统（DNS），最初仅支持 ASCII 字符集。Punycode 编码能够让世界各地的人们使用他们自己语言的字符来注册和访问网站。</p><p><strong>应用实例：</strong></p><p>假设你有一个域名 <code>例子.com</code>。在 ASCII 编码的 DNS 系统中，你不能直接使用这个域名，因为它包含了非 ASCII 的字符（比如汉字、阿拉伯字母等）。这时候，你就可以使用 Punycode 将其转换成一个可被 DNS 系统识别的形式，比如 <code>&quot;xn--fsq.com&quot;</code>，这样就可以在全球范围内进行访问了。</p><p><strong>Node.js 中的 Punycode 使用：</strong></p><p>虽然现代的 Node.js 版本中已经建议使用其他方式来处理 Unicode 字符串和域名，但了解 Punycode 的基本概念和使用仍旧是有益的。以下是一个简单的例子，展示了如果在早期版本的 Node.js 中使用 Punycode 模块来对字符串进行编码和解码：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 注意：在新版本的 Node.js 中，punycode 模块已被废弃。</span></span>\n<span class="line"><span style="color:#616E88;">// 下面的代码演示是基于旧版本的 Node.js。</span></span>\n<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将Unicode字符串编码为Punycode字符串</span></span>\n<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> encoded</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">encode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">例子.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">encoded</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: xn--fsq.com</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将Punycode字符串解码为Unicode字符串</span></span>\n<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> decoded</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">xn--fsq.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">decoded</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: 例子.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结论：</strong></p><p>即使 <code>Punycode</code> 在 Node.js 中已经被弃用，理解它背后的概念以及为什么会需要这样一个转换过程对于处理国际化网站和应用来说是非常重要的。对于现代开发者来说，更推荐使用新的 API 如 <code>new URL()</code> 构造函数来处理这类问题，它提供了更全面和标准化的方式来处理网络资源的 URLs。</p><h2 id="punycode-decode-string" tabindex="-1"><a class="header-anchor" href="#punycode-decode-string"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodedecodestring" target="_blank" rel="noopener noreferrer">punycode.decode(string)</a></span></a></h2><p>Node.js 中的 <code>punycode.decode(string)</code> 函数是一个很特别的工具，它用于将 Punycode（一种特殊的编码方式）字符串转换回原来的 Unicode 字符串。这听起来可能有点复杂，但我会尽量简化解释，并通过例子帮你理解。</p><h3 id="什么是-punycode" tabindex="-1"><a class="header-anchor" href="#什么是-punycode"><span>什么是 Punycode？</span></a></h3><p>首先，了解一下何为 Punycode 十分重要。Punycode 是一种特殊的编码方式，它使得我们可以在只允许 ASCII 字符的系统（比如域名系统）中使用 Unicode 字符。简单地说，它让我们能够在网址中使用非英文字符。</p><h3 id="punycode-decode-string-的作用" tabindex="-1"><a class="header-anchor" href="#punycode-decode-string-的作用"><span><code>punycode.decode(string)</code> 的作用</span></a></h3><p><code>punycode.decode(string)</code> 就是用来做这个转换的：它接受一个 Punycode 编码的字符串，然后把它转换回原始的 Unicode 字符串。这对于处理国际化网址等场景非常有用。</p><h3 id="实际运用的例子" tabindex="-1"><a class="header-anchor" href="#实际运用的例子"><span>实际运用的例子</span></a></h3><p><strong>例子 1：域名解码</strong></p><p>想象一下，你有一个俄语域名 <code>xn--b1agh1afp.xn--p1ai</code>，这实际上是 Punycode 编码的。如果想知道它代表的真实 Unicode 域名，你就可以使用 <code>punycode.decode</code> 来解码它：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 引入punycode模块</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> decodedDomain</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">xn--b1agh1afp.xn--p1ai</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">decodedDomain</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出解码后的域名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解码后，你会得到原始的 Unicode 域名，比如 <code>&quot;пример.рф&quot;</code>，这样用户就能看到并理解的域名格式。</p><p><strong>例子 2：电子邮件地址解码</strong></p><p>同样的，如果有一个电子邮件地址是用 Punycode 编码的，比如 <code>xn--d1acpjx3f@xn--90a3ac</code>，这是因为它包含非 ASCII 字符。要获取实际的电子邮件地址，也可以使用 <code>punycode.decode</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> decodedEmail</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> `</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decode</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">xn--d1acpjx3f</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">@</span><span style="color:#81A1C1;">${</span><span style="color:#D8DEE9;">punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decode</span><span style="color:#ECEFF4;">(</span></span>\n<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">xn--90a3ac</span><span style="color:#ECEFF4;">&quot;</span></span>\n<span class="line"><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">`</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">decodedEmail</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，你就能得到像 <code>&quot;почта@сербия&quot;</code> 这样的电子邮件地址，人们可以更容易理解和使用。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>总而言之，<code>punycode.decode(string)</code> 是一个强大的函数，它允许我们从 Punycode 编码的字符串中恢复出原始的 Unicode 字符，这在处理国际化的域名、电子邮件地址等场景时极其有用。希望这些解释和例子能帮助你更好地理解它的用途！</p><h2 id="punycode-encode-string" tabindex="-1"><a class="header-anchor" href="#punycode-encode-string"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodeencodestring" target="_blank" rel="noopener noreferrer">punycode.encode(string)</a></span></a></h2><p>当然，让我们简单而深入地了解一下 Node.js 中的 <code>punycode.encode(string)</code> 函数及其用途。</p><h3 id="什么是-punycode-1" tabindex="-1"><a class="header-anchor" href="#什么是-punycode-1"><span>什么是 Punycode？</span></a></h3><p>首先，Punycode 是一种特殊的编码方式，用于将包含国际字符（如汉字、阿拉伯文字等）的域名转换成由 ASCII 字符组成的字符串。这是因为在早期的互联网基础设施中，并不支持非英语字符的直接使用。通过 Punycode，我们能够实现国际化域名（IDN），使得全世界各种不同语言的人们都可以用自己的语言来访问网站。</p><h3 id="node-js-中的-punycode-encode-string" tabindex="-1"><a class="header-anchor" href="#node-js-中的-punycode-encode-string"><span>Node.js 中的 <code>punycode.encode(string)</code></span></a></h3><p>在 Node.js v21.7.1 中，<code>punycode.encode(string)</code> 是一个函数，它可以将包含特殊字符或非 ASCII 字符的字符串（比如中文、日文、阿拉伯文字等）转换为纯 ASCII 字符组成的字符串。这个功能主要用于处理国际化域名。</p><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h3><p>假设你有一个中文域名：<code>北京大学.cn</code>。在互联网上，这个域名需要被转换成 ASCII 形式才能被正确解析和访问。使用 <code>punycode.encode(string)</code> 就能完成这个工作。</p><p><strong>步骤 1:</strong> 引入 Node.js 中的 <code>punycode</code> 模块（注意，从 Node.js 版本 7 开始，punycode 已经不再默认包含在 Node.js 核心库中，需要单独安装使用 npm）。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 如果punycode没有被内置，在使用前需先安装</span></span>\n<span class="line"><span style="color:#616E88;">// npm install punycode</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤 2:</strong> 使用 <code>punycode.encode</code> 方法转换国际化域名。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> unicodeStr</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">北京大学.cn</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> asciiStr</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">encode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">unicodeStr</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">asciiStr</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出转码后的ASCII字符串</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将打印出类似于 <code>&quot;xn--1lq90ic7f1rc.cn&quot;</code> 的 ASCII 域名。这就是<code>北京大学.cn</code>的 Punycode 编码版本，现在它可以被用在任何只支持 ASCII 字符的域名系统(DNS)中了。</p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ul><li><strong>国际化域名注册与解析：</strong> 当你需要注册一个包含非英文字符的域名，或者需要解析这样的域名时，就会用到 Punycode 编码。</li><li><strong>邮箱地址处理：</strong> 类似域名的情况，电子邮件地址也可以包含非 ASCII 字符，Punycode 同样可以用于这里。</li><li><strong>软件国际化和本地化：</strong> 在软件开发过程中，支持多语言往往需要处理非 ASCII 字符，Punycode 编码是其中的一个工具。</li></ul><p>理解了 <code>punycode.encode(string)</code> 的基本概念和应用场景，你就可以更好地处理和理解国际化域名相关的问题了。</p><h2 id="punycode-toascii-domain" tabindex="-1"><a class="header-anchor" href="#punycode-toascii-domain"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodetoasciidomain" target="_blank" rel="noopener noreferrer">punycode.toASCII(domain)</a></span></a></h2><p>好的，让我们深入了解 Node.js 中的 <code>punycode.toASCII(domain)</code> 函数，并通过一些简单易懂的例子来掌握它。首先，我会解释什么是 Punycode，然后介绍如何在 Node.js 中使用它。</p><h3 id="什么是-punycode-2" tabindex="-1"><a class="header-anchor" href="#什么是-punycode-2"><span>什么是 Punycode？</span></a></h3><p>Punycode 是一种特殊的编码方式，用于将 Unicode 字符（比如中文、阿拉伯文等非 ASCII 字符）转换成可被网络中的 DNS 系统所理解的 ASCII 字符集合。因为互联网的 DNS 系统最初设计时只支持 ASCII 字符，所以当需要在域名中使用非英文字符时，Punycode 就显得尤为重要。</p><h3 id="为什么需要punycode-toascii" tabindex="-1"><a class="header-anchor" href="#为什么需要punycode-toascii"><span>为什么需要<code>punycode.toASCII</code>?</span></a></h3><p>当你想注册或者访问一个包含非 ASCII 字符的域名时（例如，使用中文或其他语言的字符），该域名需要转换成一个 DNS 系统可以识别的格式。这里就需要用到<code>punycode.toASCII</code>函数。</p><h3 id="如何在-node-js-中使用punycode-toascii-domain" tabindex="-1"><a class="header-anchor" href="#如何在-node-js-中使用punycode-toascii-domain"><span>如何在 Node.js 中使用<code>punycode.toASCII(domain)</code>?</span></a></h3><p>在 Node.js v21.7.1 版本中，<code>punycode.toASCII(domain)</code>被用来将一个含有非 ASCII 字符的域名字符串转换成一个 ASCII 字符串，从而使其符合 DNS 名称规范。</p><p><strong>实际应用举例</strong></p><p>假设你有一个中文域名：<code>中国.icom.museum</code>，你想将它转化为符合 DNS 标准的 ASCII 形式，以便进行网络请求或其他操作。</p><p>在 Node.js 环境下，你可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入punycode模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将中文域名转换为ASCII</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> asciiDomain</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toASCII</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">中国.icom.museum</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">asciiDomain</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上述代码后，你会看到打印出来的结果类似于：<code>xn--fiqz9s.icom.museum</code>，这就是转换后的 ASCII 域名。</p><p>**注意：**从 Node.js v7 开始，Punycode 模块已经不再包含在 Node.js 的核心模块中，但你仍然可以通过<code>require(&#39;punycode&#39;)</code>来使用它，因为 Node.js 默认安装了此模块作为一个内置的第三方库。</p><p>以上就是关于<code>punycode.toASCII(domain)</code>函数的解释和应用示例。希望这能帮助你更好地理解它的作用和使用方法。</p><h2 id="punycode-tounicode-domain" tabindex="-1"><a class="header-anchor" href="#punycode-tounicode-domain"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodetounicodedomain" target="_blank" rel="noopener noreferrer">punycode.toUnicode(domain)</a></span></a></h2><p>想要理解 <code>punycode.toUnicode(domain)</code> 这个功能，我们首先需要了解一些背景信息。</p><h3 id="什么是-punycode-3" tabindex="-1"><a class="header-anchor" href="#什么是-punycode-3"><span>什么是 Punycode？</span></a></h3><p>Punycode 是一种编码方式，它用来将 Unicode 字符串（比如中文、阿拉伯语等非 ASCII 字符）转换成由字母、数字和连字符组成的 ASCII 字符串。这主要用在国际化域名(IDN)上，因为互联网的域名系统(DNS)原本只支持 ASCII 字符。简单地说，Punycode 让我们能够使用各种语言的字符作为网址。</p><h3 id="punycode-tounicode-domain-1" tabindex="-1"><a class="header-anchor" href="#punycode-tounicode-domain-1"><span><code>punycode.toUnicode(domain)</code></span></a></h3><p>这个方法就是将通过 Punycode 编码的 ASCII 字符串转换回原始的 Unicode 字符串。这在处理国际化域名时特别有用。</p><h3 id="实际运用的例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用的例子-1"><span>实际运用的例子</span></a></h3><p>假设你遇到一个网址：<code>xn--fiq228c.com</code>，这其实是一个利用 Punycode 编码的国际化域名。对于普通用户来说，这样的网址既难以理解也难以记忆。但如果我们使用<code>punycode.toUnicode(&#39;xn--fiq228c.com&#39;)</code>，则可以将其转换回容易理解的 Unicode 格式，即中文的“<a href="http://xn--fiq228c.com" target="_blank" rel="noopener noreferrer">中文.com</a>”。</p><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><p>以下是一个简单的示例，展示如何在 Node.js 中使用<code>punycode.toUnicode()</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 在Node.js v21.7.1中, punycode模块已经不再默认包含在全局范围内，</span></span>\n<span class="line"><span style="color:#616E88;">// 因此你需要单独引入此模块。</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 假定有一个Punycode编码的域名</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punyDomain</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">xn--fiq228c.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将其转换为Unicode</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> unicodeDomain</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toUnicode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">punyDomain</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">unicodeDomain</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出：中文.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><p>自 Node.js 版本 7 起，Punycode 被标准化并不再包含在 Node.js 的核心模块中，但仍可通过<code>punycode/</code>路径引入。而且，考虑到国际化域名的普及，理解和能操作 Punycode 变得越发重要。</p><p>通过使用<code>punycode.toUnicode()</code>，我们可以更好地处理和展示国际化域名，使之更加友好和易于理解。这对于开发面向全球用户的应用程序尤为重要。</p><h2 id="punycode-ucs2" tabindex="-1"><a class="header-anchor" href="#punycode-ucs2"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodeucs2" target="_blank" rel="noopener noreferrer">punycode.ucs2</a></span></a></h2><p>Node.js 中的<code>punycode.ucs2</code>是一个和 Unicode 编码相关的功能模块。为了更好地理解它，我们需要先了解一些背景知识。</p><p>Unicode 是一种字符编码标准，旨在包含全世界所有的书写系统的字符。由于计算机最基本的存储单元是字节（byte），而一个字节（8 位）只能表示 256 个不同的值，这对于表示全球成千上万的字符显然是远远不够的。因此，Unicode 采用了不同长度的编码来表示这些字符。UTF-16 是其中一种，它使用一个或两个 16 位的单元（即 2 或 4 个字节）来表示一个字符。</p><h3 id="ucs-2-和-utf-16" tabindex="-1"><a class="header-anchor" href="#ucs-2-和-utf-16"><span>UCS-2 和 UTF-16</span></a></h3><p>UCS-2（Universal Character Set 2-byte）是一个固定长度的编码，使用两个字节（即 16 位）来表示每个字符。而 UTF-16 是 UCS-2 的扩展，可以使用额外的一对 16 位单元来表示那些超出基本多文种平面（BMP）的字符。简单来说，UCS-2 可以看作是 UTF-16 的一个子集。</p><h3 id="punycode-ucs2-1" tabindex="-1"><a class="header-anchor" href="#punycode-ucs2-1"><span>punycode.ucs2</span></a></h3><p>在 Node.js 中，<code>punycode.ucs2</code>是处理 UCS-2 编码数据的工具。尽管现代 Web 开发中更常使用 UTF-8 编码，但在处理某些特定场景时，如国际化域名（IDN）、Emoji 表情等，可能会涉及到 UCS-2 编码。</p><p><code>punycode.ucs2</code> 提供了以下主要功能：</p><ul><li>编码：将字符串转换为 UCS-2 编码的代码点数组。</li><li>解码：将 UCS-2 编码的代码点数组转换回字符串。</li></ul><h3 id="实际运用示例" tabindex="-1"><a class="header-anchor" href="#实际运用示例"><span>实际运用示例</span></a></h3><p>假设你开发了一个支持多语言的网站，并需要处理用户输入的各种字符，包括非 ASCII 字符如汉字、表情符号等。在某些情况下，了解或操作这些字符的底层 Unicode 代码点是有必要的。</p><h4 id="示例-1-编码" tabindex="-1"><a class="header-anchor" href="#示例-1-编码"><span>示例 1：编码</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 引入punycode模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将字符串“你好”转换为其UCS-2代码点</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> encoded</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ucs2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">encode</span><span style="color:#D8DEE9FF;">(</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">  [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">20320</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">22909</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">n</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#88C0D0;"> parseInt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">n</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 16</span><span style="color:#D8DEE9FF;">))</span></span>\n<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出结果是&quot;你好&quot;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">encoded</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，“你好”的 Unicode 代码点分别是<code>20320</code>和<code>22909</code>（这里是十六进制表示）。通过<code>punycode.ucs2.encode()</code>，我们将它们转换回原始字符串。</p><h4 id="示例-2-解码" tabindex="-1"><a class="header-anchor" href="#示例-2-解码"><span>示例 2：解码</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 使用punycode.ucs2.decode()将字符串解码为其Unicode代码点</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> decoded</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ucs2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">你好</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">// 输出结果是[20320, 22909]</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">decoded</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们将字符串“你好”转换为它的 Unicode 代码点数组。</p><p>总之，<code>punycode.ucs2</code>在处理国际化内容、特殊字符等方面提供了很大的便利。它使得开发者能够在底层与字符的 Unicode 表示进行交互，虽然在日常开发中可能不常直接用到，但它在处理特定问题时非常有用。</p><h3 id="punycode-ucs2-decode-string" tabindex="-1"><a class="header-anchor" href="#punycode-ucs2-decode-string"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodeucs2decodestring" target="_blank" rel="noopener noreferrer">punycode.ucs2.decode(string)</a></span></a></h3><p>Node.js 的 <code>punycode.ucs2.decode(string)</code> 函数是一个特定的方法，用于把一串文本（通常是特殊字符或非 ASCII 字符，比如表情符号、外语文字等）转换成它们对应的 Unicode 编码。这个函数属于 Node.js 中的 <code>punycode</code> 模块，虽然 Punycode 主要被设计用来处理国际化域名，但这里的 <code>ucs2.decode</code> 方法更多地被用于处理和理解 Unicode 字符序列。</p><p>在 JavaScript 中，字符串是以 UTF-16 编码方式存储的。UTF-16 是 Unicode 标准的一种实现方式，它使用一对 16 位（即两个字节）的序列来表示一个字符。简单来说，大部分常见字符（比如英文字符、数字等）可以直接用一个 16 位的序列表示，而更复杂的字符（比如某些表情符号、特殊符号或其他语言文字）则可能需要两个 16 位序列共同表示。</p><h3 id="示例解释" tabindex="-1"><a class="header-anchor" href="#示例解释"><span>示例解释</span></a></h3><p>为了方便理解，我们可以举几个示例来展示 <code>punycode.ucs2.decode(string)</code> 的实际应用。</p><ol><li><p><strong>解码一个简单的字符串</strong>:</p><p>假设你有一个字符串 <code>&quot;hello&quot;</code>，虽然这个例子很简单，不含任何特殊或非 ASCII 字符，但它也可以用来展示如何将普通文本转换为它们的 Unicode 码点。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 引入punycode模块</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ucs2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">result</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: [104, 101, 108, 108, 111]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，每个英文字符都转换成了相应的 Unicode 码点。例如，字符 <code>&#39;h&#39;</code> 的 Unicode 码点是 104，字符 <code>&#39;e&#39;</code> 是 101，以此类推。</p></li><li><p><strong>解码包含特殊字符的字符串</strong>:</p><p>如果我们尝试解码包含特殊字符或表情的字符串，如 <code>&quot;😀&quot;</code>（一个笑脸表情），<code>punycode.ucs2.decode</code> 则返回这个字符对应的 Unicode 码点。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ucs2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">decode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">😀</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#616E88;">//Le document provient de Ying Chao Tea. Ne pas utiliser à des fins commerciales.</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">result</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: [55357, 56832]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，“😀”表情符号被转换成了一个由两个数值组成的数组 <code>[55357, 56832]</code>。这个数组代表着这个字符在 UTF-16 编码中的“高位代理”和“低位代理”。</p></li></ol><p>通过使用 <code>punycode.ucs2.decode</code>，你能够将任意字符串转换成其对应的 Unicode 码点，无论它们是标准 ASCII 字符、还是复杂的表情符号或其他语种的文字。这个过程对于理解和处理各种文字数据至关重要，特别是在需要精确控制字符编码时。</p><h3 id="punycode-ucs2-encode-codepoints" tabindex="-1"><a class="header-anchor" href="#punycode-ucs2-encode-codepoints"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodeucs2encodecodepoints" target="_blank" rel="noopener noreferrer">punycode.ucs2.encode(codePoints)</a></span></a></h3><p>当你看到 <code>punycode.ucs2.encode(codePoints)</code>，这个函数在 Node.js 中用来将一系列的 Unicode 代码点（code points）转换成一个字符串。为了更好地理解它，我们需要先明白几个概念：</p><ol><li><p><strong>Unicode</strong>：是一个国际标准，定义了文本的数字编码。这使得计算机能够以统一的方式表示和处理文本。</p></li><li><p><strong>代码点（Code Points）</strong>：在 Unicode 中，每一个字符或符号被分配了一个唯一的数字标识，这就是“代码点”。</p></li><li><p><strong>UCS-2 编码</strong>：是一种固定长度的编码方案，使用 2 个字节（16 位）来表示每个代码点。它可以直接表示 Unicode 编码空间中的第一个 65,536 个字符（这部分称为基本多语言平面），但不能表示更高的代码点。</p></li></ol><p>现在，让我们通过几个实际的例子来了解<code>punycode.ucs2.encode(codePoints)</code>如何工作。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><p>假设你有以下 Unicode 代码点数组，代表某些特定的字符：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> codePoints</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">72</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 101</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 108</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 108</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 111</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里，这个数组代表了&quot;Hello&quot;这个单词，其中&#39;H&#39;的 Unicode 代码点是 72，&#39;e&#39;是 101，&#39;l&#39;是 108（注意&#39;l&#39;出现了两次），最后&#39;o&#39;是 111。</p><p>当我们使用<code>punycode.ucs2.encode(codePoints)</code>函数，就可以将这些代码点转换成可读的字符串：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 需要引入punycode模块</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> str</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ucs2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">encode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">codePoints</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">str</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: Hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个简单的例子，你可以看到这个函数是如何把一系列的代码点转换成人类可读的文本形式。</p><p>再来一个稍微复杂一点的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> emojiCodePoints</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">128512</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 😁的Unicode代码点</span></span>\n<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> emojiStr</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">ucs2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">encode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">emojiCodePoints</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">emojiStr</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 输出: 😁</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们将一个表示笑脸表情的 Unicode 代码点（128512）转换成了对应的字符串。注意，这个代码点超出了 UCS-2 编码能直接表示的范围，但由于 Node.js 内部处理高于基本多语言平面的字符的能力，所以这个转换仍然是可能的。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>总的来说，<code>punycode.ucs2.encode(codePoints)</code>是一个在 Node.js 环境下将 Unicode 代码点数组转换成字符串的实用函数。通过这个函数，我们可以轻松地处理从基本 ASCII 字符到复杂的表情符号等各种文本数据的转换，这在处理国际化内容、编码转换等场景时非常有用。</p><h2 id="punycode-version" tabindex="-1"><a class="header-anchor" href="#punycode-version"><span><a href="https://nodejs.org/docs/latest/api/punycode.html#punycodeversion" target="_blank" rel="noopener noreferrer">punycode.version</a></span></a></h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，让开发者能够在服务器端运行 JavaScript。而在 Node.js 的众多模块中，<code>punycode</code> 是一个用来处理 Unicode 字符编码转换的模块。不过，值得注意的是，从 Node.js 的版本 7 开始，<code>punycode</code> 模块已不再包含在 Node 核心模块中，它被视为已弃用（deprecated），但你仍然可以通过 npm 来安装使用。</p><p>首先，让我解释一下 <code>punycode</code> 和 Unicode 的概念：</p><ul><li><strong>Unicode</strong> 是一个旨在包括地球上所有书面文字系统的字符编码方案。简言之，它试图给世界上每一个字符分配一个唯一的代码。</li><li><strong>Punycode</strong> 是一种特殊的编码方式，用于将包含非 ASCII 字符的国际化域名（称为 IDN，Internationalized Domain Names）转换成对应的 ASCII 形式。这个转换让这些域名可以被现有的互联网架构所支持。</li></ul><h3 id="punycode-version-1" tabindex="-1"><a class="header-anchor" href="#punycode-version-1"><span><code>punycode.version</code></span></a></h3><p>在你提到的 Node.js 版本 21.7.1 的文档中，<code>punycode.version</code> 指的是一个属性，它返回你正在使用的 <code>punycode</code> 库的版本号。这个属性简单明了，它告诉你 <code>punycode</code> 库的具体版本，以确保你的代码与库的这个版本兼容。</p><h3 id="实际运用" tabindex="-1"><a class="header-anchor" href="#实际运用"><span>实际运用</span></a></h3><p>假设你要开发一个应用，这个应用需要处理多种语言的文本数据，比如用户输入的域名可能包含中文、阿拉伯文等非 ASCII 字符。在这种情况下，使用 <code>punycode</code> 可以帮助你将这些国际化域名转换成 ASCII 形式，以便进行存储或进一步处理。</p><h4 id="示例-将国际化域名转换成-punycode" tabindex="-1"><a class="header-anchor" href="#示例-将国际化域名转换成-punycode"><span>示例：将国际化域名转换成 Punycode</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 引入punycode模块</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将含有非ASCII字符的域名转换为Punycode格式</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> asciiDomain</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toASCII</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">例子.测试</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">asciiDomain</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 打印转换结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中，<code>.测试</code> 是一个包含中文的域名后缀，<code>toASCII</code> 方法会将它转换为可通过 DNS 查询的 ASCII 字符串。</p><h4 id="示例-从-punycode-转换回-unicode" tabindex="-1"><a class="header-anchor" href="#示例-从-punycode-转换回-unicode"><span>示例：从 Punycode 转换回 Unicode</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">punycode</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#616E88;">// 将Punycode格式的字符串转换回原始的Unicode格式</span></span>\n<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> unicodeDomain</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> punycode</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toUnicode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">xn--fsq.xn--0zwm56d</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>\n<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">unicodeDomain</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 打印转换结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>xn--fsq.xn--0zwm56d</code> 是经过 Punycode 编码的域名，<code>toUnicode</code> 方法可以将其还原回原始的 Unicode 形式。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>虽然 <code>punycode</code> 在 Node.js 中的重要性可能已经降低，但学习和理解它仍然对处理国际化内容的开发者有实际价值。利用 <code>punycode</code> 处理域名的示例展示了如何在全球化的互联网世界中促进不同语言和脚本的交流和连接。</p>',130)],l={},c=(0,e(8538).A)(l,[["render",function(s,n){return(0,o.uX)(),(0,o.CE)("div",null,a)}]]),p=JSON.parse('{"path":"/document/node-doc/Punycode.html","title":"Punycode","lang":"zh-CN","frontmatter":{"article":false,"description":"Punycode Node.js 在其早期版本中内嵌了一个名为 Punycode 的模块，这是一个用于编码和解码域名的工具。但从 Node.js v7.0.0 开始，Punycode 被标记为弃用，并推荐使用 JavaScript 内置的 Intl 对象下的 URL 和 URLSearchParams 类或其他库来处理 Unicode 域名和邮箱地址的...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/document/node-doc/Punycode.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"Punycode"}],["meta",{"property":"og:description","content":"Punycode Node.js 在其早期版本中内嵌了一个名为 Punycode 的模块，这是一个用于编码和解码域名的工具。但从 Node.js v7.0.0 开始，Punycode 被标记为弃用，并推荐使用 JavaScript 内置的 Intl 对象下的 URL 和 URLSearchParams 类或其他库来处理 Unicode 域名和邮箱地址的..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:46:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:46:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Punycode\\",\\"description\\":\\"Punycode Node.js 在其早期版本中内嵌了一个名为 Punycode 的模块，这是一个用于编码和解码域名的工具。但从 Node.js v7.0.0 开始，Punycode 被标记为弃用，并推荐使用 JavaScript 内置的 Intl 对象下的 URL 和 URLSearchParams 类或其他库来处理 Unicode 域名和邮箱地址的...\\"}"]]},"headers":[{"level":2,"title":"punycode.decode(string)","slug":"punycode-decode-string","link":"#punycode-decode-string","children":[{"level":3,"title":"什么是 Punycode？","slug":"什么是-punycode","link":"#什么是-punycode","children":[]},{"level":3,"title":"punycode.decode(string) 的作用","slug":"punycode-decode-string-的作用","link":"#punycode-decode-string-的作用","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子","link":"#实际运用的例子","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"punycode.encode(string)","slug":"punycode-encode-string","link":"#punycode-encode-string","children":[{"level":3,"title":"什么是 Punycode？","slug":"什么是-punycode-1","link":"#什么是-punycode-1","children":[]},{"level":3,"title":"Node.js 中的 punycode.encode(string)","slug":"node-js-中的-punycode-encode-string","link":"#node-js-中的-punycode-encode-string","children":[]},{"level":3,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"punycode.toASCII(domain)","slug":"punycode-toascii-domain","link":"#punycode-toascii-domain","children":[{"level":3,"title":"什么是 Punycode？","slug":"什么是-punycode-2","link":"#什么是-punycode-2","children":[]},{"level":3,"title":"为什么需要punycode.toASCII?","slug":"为什么需要punycode-toascii","link":"#为什么需要punycode-toascii","children":[]},{"level":3,"title":"如何在 Node.js 中使用punycode.toASCII(domain)?","slug":"如何在-node-js-中使用punycode-toascii-domain","link":"#如何在-node-js-中使用punycode-toascii-domain","children":[]}]},{"level":2,"title":"punycode.toUnicode(domain)","slug":"punycode-tounicode-domain","link":"#punycode-tounicode-domain","children":[{"level":3,"title":"什么是 Punycode？","slug":"什么是-punycode-3","link":"#什么是-punycode-3","children":[]},{"level":3,"title":"punycode.toUnicode(domain)","slug":"punycode-tounicode-domain-1","link":"#punycode-tounicode-domain-1","children":[]},{"level":3,"title":"实际运用的例子","slug":"实际运用的例子-1","link":"#实际运用的例子-1","children":[]},{"level":3,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"punycode.ucs2","slug":"punycode-ucs2","link":"#punycode-ucs2","children":[{"level":3,"title":"UCS-2 和 UTF-16","slug":"ucs-2-和-utf-16","link":"#ucs-2-和-utf-16","children":[]},{"level":3,"title":"punycode.ucs2","slug":"punycode-ucs2-1","link":"#punycode-ucs2-1","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例","link":"#实际运用示例","children":[]},{"level":3,"title":"punycode.ucs2.decode(string)","slug":"punycode-ucs2-decode-string","link":"#punycode-ucs2-decode-string","children":[]},{"level":3,"title":"示例解释","slug":"示例解释","link":"#示例解释","children":[]},{"level":3,"title":"punycode.ucs2.encode(codePoints)","slug":"punycode-ucs2-encode-codepoints","link":"#punycode-ucs2-encode-codepoints","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"punycode.version","slug":"punycode-version","link":"#punycode-version","children":[{"level":3,"title":"punycode.version","slug":"punycode-version-1","link":"#punycode-version-1","children":[]},{"level":3,"title":"实际运用","slug":"实际运用","link":"#实际运用","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]}],"git":{"createdTime":1718963177000,"updatedTime":1718963177000,"contributors":[{"name":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":1}]},"readingTime":{"minutes":17.8,"words":5340},"filePathRelative":"document/node-doc/Punycode.md","localizedDate":"2024年6月21日","excerpt":"\\n<p>Node.js 在其早期版本中内嵌了一个名为 <code>Punycode</code> 的模块，这是一个用于编码和解码域名的工具。但从 Node.js v7.0.0 开始，<code>Punycode</code> 被标记为弃用，并推荐使用 JavaScript 内置的 <code>Intl</code> 对象下的 <code>URL</code> 和 <code>URLSearchParams</code> 类或其他库来处理 Unicode 域名和邮箱地址的问题。</p>\\n<p><strong>什么是 Punycode？</strong></p>\\n<p>Punycode 是一种特殊的编码方式，它允许我们将包含国际字符（非 ASCII 字符）的域名转换成由限定的 ASCII 字符集组成的形式。这主要是因为互联网的许多部分，尤其是域名系统（DNS），最初仅支持 ASCII 字符集。Punycode 编码能够让世界各地的人们使用他们自己语言的字符来注册和访问网站。</p>","autoDesc":true}')},8538:(s,n)=>{n.A=(s,n)=>{const e=s.__vccOpts||s;for(const[s,o]of n)e[s]=o;return e}}}]);