"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[3272],{7518:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>h});var n=a(6352);const e=[(0,n.Fv)('<h1 id="router" tabindex="-1"><a class="header-anchor" href="#router"><span>Router</span></a></h1><p>react-router是跨平台的。<br> react-router-dom是在react-router基础上提供了Link和NavLink，而且依赖history库提供了两个浏览器端适用的BrowserRouter和HashRouter组件。<br> 项目中一般使用react-router-dom</p><h2 id="路由的基本使用" tabindex="-1"><a class="header-anchor" href="#路由的基本使用"><span>路由的基本使用</span></a></h2><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">1.明确好界面中的导航区、展示区</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">2.导航区的a标签改为Link标签</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/xxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Demo&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">3.展示区写Route标签进行路径的匹配</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/xxxx&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{Demo}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">4.&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;的最外侧包裹了一个&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">BrowserRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;或&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">HashRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由组件与一般组件" tabindex="-1"><a class="header-anchor" href="#路由组件与一般组件"><span>路由组件与一般组件</span></a></h2><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">1.写法不同：  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      一般组件：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt; </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      路由组件：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/demo&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{Demo}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">2.存放位置不同：  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      一般组件：components  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      路由组件：pages  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">3.接收到的props不同：  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      一般组件：写组件标签时传递了什么，就能收到什么  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      路由组件：接收到三个固定的属性  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                history:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      go: ƒ go(n)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      goBack: ƒ goBack()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      goForward: ƒ goForward()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      push: ƒ push(path, state)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      replace: ƒ replace(path, state)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                location:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      pathname: &quot;/about&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      search: &quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      state: undefined</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                match:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      params: {}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      path: &quot;/about&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                      url: &quot;/about&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="navlink与封装navlink" tabindex="-1"><a class="header-anchor" href="#navlink与封装navlink"><span>NavLink与封装NavLink</span></a></h2><p>1.NavLink可以实现路由链接的高亮，通过activeClassName指定样式名</p><h2 id="switch的使用" tabindex="-1"><a class="header-anchor" href="#switch的使用"><span>Switch的使用</span></a></h2><p>1.通常情况下，path和component是一一对应的关系。<br> 2.Switch可以提高路由匹配效率(单一匹配)。</p><h2 id="解决多级路径刷新页面样式丢失的问题" tabindex="-1"><a class="header-anchor" href="#解决多级路径刷新页面样式丢失的问题"><span>解决多级路径刷新页面样式丢失的问题</span></a></h2><p>1.public/index.html 中 引入样式时不写 ./ 写 / （常用）<br> 2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用）<br> 3.使用HashRouter</p><h2 id="路由的严格匹配与模糊匹配" tabindex="-1"><a class="header-anchor" href="#路由的严格匹配与模糊匹配"><span>路由的严格匹配与模糊匹配</span></a></h2><p>1.默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）<br> 2.开启严格匹配：<code>&lt;Route exact={true} path=&quot;/about&quot; component={About}/&gt;</code><br> 3.严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p><h2 id="redirect的使用" tabindex="-1"><a class="header-anchor" href="#redirect的使用"><span>Redirect的使用</span></a></h2><p>1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由<br> 2.具体编码：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Switch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/about&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">About</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/home&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Home</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Redirect</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/about&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Switch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由"><span>嵌套路由</span></a></h2><p>1.注册子路由时要写上父路由的path值<br> 2.路由的匹配是按照注册路由的顺序进行的</p><h2 id="向路由组件传递参数" tabindex="-1"><a class="header-anchor" href="#向路由组件传递参数"><span>向路由组件传递参数</span></a></h2><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">1.params参数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      路由链接(携带参数)：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/demo/test/tom/18&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;详情&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      注册路由(声明接收)：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/demo/test/:name/:age&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{Test}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      接收参数：this.props.match.params</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">2.search参数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      路由链接(携带参数)：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/demo/test?name=tom&amp;age=18&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;详情&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      注册路由(无需声明，正常注册即可)：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/demo/test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{Test}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      接收参数：this.props.location.search</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      备注：获取到的search是urlencoded编码字符串，需要借助querystring解析</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">3.state参数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      路由链接(携带参数)：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{{pathname:&#39;/demo/test&#39;,state:{name:&#39;tom&#39;,age:18}}}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;详情&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      注册路由(无需声明，正常注册即可)：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/demo/test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{Test}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      接收参数：this.props.location.state</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      备注：刷新也可以保留住参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编程式路由导航" tabindex="-1"><a class="header-anchor" href="#编程式路由导航"><span>编程式路由导航</span></a></h2><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">借助this.prosp.history对象上的API对操作路由跳转、前进、后退</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    -this.prosp.history.push()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    -this.prosp.history.replace()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    -this.prosp.history.goBack()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    -this.prosp.history.goForward()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    -this.prosp.history.go()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="browserrouter与hashrouter的区别" tabindex="-1"><a class="header-anchor" href="#browserrouter与hashrouter的区别"><span>BrowserRouter与HashRouter的区别</span></a></h2><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">1.底层原理不一样：  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      HashRouter使用的是URL的哈希值。  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">2.path表现形式不一样  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      BrowserRouter的路径中没有#,例如：localhost:3000/demo/test  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      HashRouter的路径包含#,例如：localhost:3000/#/demo/test  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">3.刷新后对路由state参数的影响  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      (1).BrowserRouter没有任何影响，因为state保存在history对象中。  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      (2).HashRouter刷新后会导致路由state参数的丢失！！！  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">4.备注：HashRouter可以用于解决一些路径错误相关的问题。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',25)],t={},l=(0,a(756).A)(t,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/framework_front/react/router.html","title":"Router","lang":"zh-CN","frontmatter":{"article":false,"description":"Router react-router是跨平台的。 react-router-dom是在react-router基础上提供了Link和NavLink，而且依赖history库提供了两个浏览器端适用的BrowserRouter和HashRouter组件。 项目中一般使用react-router-dom 路由的基本使用 路由组件与一般组件 NavLink与...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/framework_front/react/router.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"Router"}],["meta",{"property":"og:description","content":"Router react-router是跨平台的。 react-router-dom是在react-router基础上提供了Link和NavLink，而且依赖history库提供了两个浏览器端适用的BrowserRouter和HashRouter组件。 项目中一般使用react-router-dom 路由的基本使用 路由组件与一般组件 NavLink与..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-15T09:53:30.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2022-06-15T09:53:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Router\\",\\"description\\":\\"Router react-router是跨平台的。 react-router-dom是在react-router基础上提供了Link和NavLink，而且依赖history库提供了两个浏览器端适用的BrowserRouter和HashRouter组件。 项目中一般使用react-router-dom 路由的基本使用 路由组件与一般组件 NavLink与...\\"}"]]},"headers":[{"level":2,"title":"路由的基本使用","slug":"路由的基本使用","link":"#路由的基本使用","children":[]},{"level":2,"title":"路由组件与一般组件","slug":"路由组件与一般组件","link":"#路由组件与一般组件","children":[]},{"level":2,"title":"NavLink与封装NavLink","slug":"navlink与封装navlink","link":"#navlink与封装navlink","children":[]},{"level":2,"title":"Switch的使用","slug":"switch的使用","link":"#switch的使用","children":[]},{"level":2,"title":"解决多级路径刷新页面样式丢失的问题","slug":"解决多级路径刷新页面样式丢失的问题","link":"#解决多级路径刷新页面样式丢失的问题","children":[]},{"level":2,"title":"路由的严格匹配与模糊匹配","slug":"路由的严格匹配与模糊匹配","link":"#路由的严格匹配与模糊匹配","children":[]},{"level":2,"title":"Redirect的使用","slug":"redirect的使用","link":"#redirect的使用","children":[]},{"level":2,"title":"嵌套路由","slug":"嵌套路由","link":"#嵌套路由","children":[]},{"level":2,"title":"向路由组件传递参数","slug":"向路由组件传递参数","link":"#向路由组件传递参数","children":[]},{"level":2,"title":"编程式路由导航","slug":"编程式路由导航","link":"#编程式路由导航","children":[]},{"level":2,"title":"BrowserRouter与HashRouter的区别","slug":"browserrouter与hashrouter的区别","link":"#browserrouter与hashrouter的区别","children":[]}],"git":{"createdTime":1655200609000,"updatedTime":1655286810000,"contributors":[{"name":"shiki","email":"kamiacgxu@gmail.com","commits":2}]},"readingTime":{"minutes":3.04,"words":913},"filePathRelative":"framework_front/react/router.md","localizedDate":"2022年6月14日","excerpt":"\\n<p>react-router是跨平台的。<br>\\nreact-router-dom是在react-router基础上提供了Link和NavLink，而且依赖history库提供了两个浏览器端适用的BrowserRouter和HashRouter组件。<br>\\n项目中一般使用react-router-dom</p>\\n<h2>路由的基本使用</h2>\\n<div class=\\"language-md line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"md\\" data-title=\\"md\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">1.明确好界面中的导航区、展示区</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">2.导航区的a标签改为Link标签</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">      &lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">Link</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\"> to</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"/xxxxx\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;Demo&lt;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">Link</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">3.展示区写Route标签进行路径的匹配</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">      &lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">Route</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\"> path</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\'/xxxx\'</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\"> component</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">{Demo}</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">/&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">4.&lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">App</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;的最外侧包裹了一个&lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">BrowserRouter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;或&lt;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#E06C75\\">HashRouter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')},756:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}}}]);