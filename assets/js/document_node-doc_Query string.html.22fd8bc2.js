"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[6835],{2088:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>h});var e=a(7829);const n=[(0,e.Fv)('<h1 id="query-string" tabindex="-1"><a class="header-anchor" href="#query-string"><span><a href="https://nodejs.org/docs/latest/api/querystring.html#query-string" target="_blank" rel="noopener noreferrer">Query string</a></span></a></h1><p>Node.js 中的 Query String 模块提供了一套用于解析和格式化 URL 查询字符串的实用工具。简单来说，查询字符串是位于 URL 中&quot;?&quot;后面的那部分文本，通常用来传递参数或数据给服务器。</p><p>假如你有一个网址（URL），比如：<code>http://example.com/over/there?name=ferret</code>，这里 <code>?name=ferret</code> 就是查询字符串，表示一个键值对，其中 <code>name</code> 是键，<code>ferret</code> 是值。</p><h3 id="使用-node-js-的-query-string-模块" tabindex="-1"><a class="header-anchor" href="#使用-node-js-的-query-string-模块"><span>使用 Node.js 的 Query String 模块</span></a></h3><p>首先，你需要引入 Node.js 的 querystring 模块：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="解析查询字符串-parse" tabindex="-1"><a class="header-anchor" href="#解析查询字符串-parse"><span>解析查询字符串 (parse)</span></a></h4><p>当你需要从查询字符串中获取数据时，你可以使用 <code>querystring.parse()</code> 方法。这个方法会将查询字符串转换为一个易于操作的对象。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> qs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=ferret&amp;color=purple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> parsedQs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">qs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">parsedQs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: { name: &#39;ferret&#39;, color: &#39;purple&#39; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们传递了一个查询字符串 <code>&#39;name=ferret&amp;color=purple&#39;</code> 给 <code>querystring.parse()</code> 方法，并将返回的对象赋值给 <code>parsedQs</code>。这样，你就能通过 <code>parsedQs.name</code> 和 <code>parsedQs.color</code> 轻松访问到 <code>&#39;ferret&#39;</code> 和 <code>&#39;purple&#39;</code> 这两个值。</p><h4 id="格式化查询字符串-stringify" tabindex="-1"><a class="header-anchor" href="#格式化查询字符串-stringify"><span>格式化查询字符串 (stringify)</span></a></h4><p>相反，如果你有一些数据（以对象的形式）并想将其转换成查询字符串的格式进行发送，你可以使用 <code>querystring.stringify()</code> 方法。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;ferret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;purple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> qs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//이 문서는 잉차오 차(Ying Chao Tea)에서 온 것입니다. 상업적으로 사용하지 마십시오.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">qs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: &#39;name=ferret&amp;color=purple&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们将一个对象 <code>{ name: &#39;ferret&#39;, color: &#39;purple&#39; }</code> 传递给 <code>querystring.stringify()</code> 方法，并将返回的查询字符串赋值给 <code>qs</code>。这样就生成了一个可用于 URL 的查询字符串。</p><h3 id="实际运用示例" tabindex="-1"><a class="header-anchor" href="#实际运用示例"><span>实际运用示例</span></a></h3><ol><li><p><strong>Web 开发：</strong> 在处理 GET 请求时，服务器可能需要解析 URL 中的查询字符串，以获取必要的参数。例如，用户筛选电商网站商品时的价格范围、颜色等筛选条件。</p></li><li><p><strong>API 请求：</strong> 当你向一个提供 JSON 数据的 API 发送请求时，经常需要在查询字符串中携带搜索条件、分页信息等参数。</p></li><li><p><strong>日志记录与分析：</strong> 跟踪 URL 请求中的查询参数，分析用户行为或优化网站结构。</p></li></ol><p>使用 Node.js 的查询字符串模块，你可以方便地处理这些场景中的数据交互，使开发更加高效和灵活。</p><h2 id="querystring-decode" tabindex="-1"><a class="header-anchor" href="#querystring-decode"><span><a href="https://nodejs.org/docs/latest/api/querystring.html#querystringdecode" target="_blank" rel="noopener noreferrer">querystring.decode()</a></span></a></h2><p>Node.js 中的 <code>querystring.decode()</code> 函数是用来解析查询字符串（query string）的。查询字符串通常位于 URL 中<code>?</code>之后的部分，它们包含了一系列的键值对，每个键值对之间通常由<code>&amp;</code>符号连接。</p><h3 id="如何工作" tabindex="-1"><a class="header-anchor" href="#如何工作"><span>如何工作</span></a></h3><p>具体到<code>querystring.decode()</code>函数，它将一个查询字符串转换成一个 JavaScript 对象，这样你就可以很方便地访问查询参数的值了。实际上，<code>querystring.decode()</code>函数是<code>querystring.parse()</code>函数的别名，两者的功能完全相同。</p><h3 id="格式" tabindex="-1"><a class="header-anchor" href="#格式"><span>格式</span></a></h3><p>假设我们有一个查询字符串：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&quot;name=John%20Doe&amp;age=30&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>解码（decode）后应该得到：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 注意空格是如何被处理的</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">  age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;30&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>让我们通过具体的例子来展示<code>querystring.decode()</code>的使用。</p><h4 id="示例-1-基本使用" tabindex="-1"><a class="header-anchor" href="#示例-1-基本使用"><span>示例 1: 基本使用</span></a></h4><p>假设您有一个 Web 应用程序，用户通过一个表单提交了他们的信息，这些信息随后被发送到服务器端的某个 API。URL 可能看起来像这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>http://example.com/api/user?name=John%20Doe&amp;age=30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 Node.js 的服务器端代码中，您可能想要解析这个查询字符串以获取用户名和年龄：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 假设这是从URL获取的查询字符串</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> qs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=John%20Doe&amp;age=30&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用querystring.decode()解析查询字符串</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> parsedQs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">qs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">parsedQs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: { name: &#39;John Doe&#39;, age: &#39;30&#39; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-2-处理数组" tabindex="-1"><a class="header-anchor" href="#示例-2-处理数组"><span>示例 2: 处理数组</span></a></h4><p>如果查询字符串中包含数组，<code>querystring.decode()</code>也能够处理。假设查询字符串是这样的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&quot;item=apple&amp;item=banana&amp;item=cherry&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>解析后会得到：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> qs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;item=apple&amp;item=banana&amp;item=cherry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> parsedQs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">qs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">parsedQs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: { item: [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;] }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ul><li>解析出的值总是字符串，即使它们看起来像数字或其他类型。</li><li>如果你期望数字，你需要手动将它们转换成数字类型。</li><li><code>querystring.decode()</code>不会解析嵌套的对象，例如<code>user[name]=John&amp;user[age]=30</code>。</li></ul><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>通过<code>querystring.decode()</code>，你可以轻松地将 URL 中的查询字符串转换为 JavaScript 对象，这在处理 HTTP 请求时非常有用。无论是在实现 API、读取页面参数还是任何需要解析查询字符串的场景中，它都是一个非常实用的工具。</p><h2 id="querystring-encode" tabindex="-1"><a class="header-anchor" href="#querystring-encode"><span><a href="https://nodejs.org/docs/latest/api/querystring.html#querystringencode" target="_blank" rel="noopener noreferrer">querystring.encode()</a></span></a></h2><p>Node.js 中的 <code>querystring.encode()</code> 函数是用于将一个对象序列化成一个查询字符串（也就是 URL 中问号<code>?</code>后面跟着的那部分）。这个功能在处理 Web 开发中的 GET 请求参数时特别有用。实际上，在 Node.js 的较新版本中，<code>querystring.encode()</code> 已经被认为是遗留的（legacy），并推荐使用新的 URLSearchParams API 来代替它。但理解 <code>querystring.encode()</code> 的工作原理仍然对于理解 Web 开发中 URL 的处理很有帮助。</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><p>当您访问一个网页时，您的浏览器会向服务器发送一个请求。这个请求可以包含一些参数，告诉服务器您想要什么数据或者想要执行什么样的操作。这些参数通常以键值对的形式出现，并且通过查询字符串来传递。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><p>假设你正在开发一个电商网站，用户在搜索框里输入了要搜索的商品名称：“手机”。如果用户要通过 GET 请求（常见的 HTTP 请求类型之一，用于请求数据）发送这个搜索请求，您的应用需要生成包含搜索关键字的 URL，比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>https://example.com/search?query=手机</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这个 URL 中，“<code>?query=手机</code>”就是查询字符串，它告诉服务器用户想要搜索“手机”。</p><h3 id="使用-querystring-encode" tabindex="-1"><a class="header-anchor" href="#使用-querystring-encode"><span>使用 <code>querystring.encode()</code></span></a></h3><p>在 Node.js 中，如果你想从一个 JavaScript 对象生成这样的查询字符串，你可以使用 <code>querystring.encode()</code>。下面是如何使用它的一个示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 引入querystring模块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个对象，代表要转换的键值对</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> params</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  query</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;手机&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  limit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用querystring.encode()生成查询字符串</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> queryString</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">queryString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: &quot;query=%E6%89%8B%E6%9C%BA&amp;limit=10&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个名为<code>params</code>的对象，其中包含了两个键值对：<code>query</code>（用户搜索的内容）和<code>limit</code>（限制结果的数量）。调用<code>querystring.encode(params)</code>之后，我们得到了一个编码后的查询字符串：&quot;query=%E6%89%8B%E6%9C%BA&amp;limit=10&quot;。这里的编码（比如“手机”变成了“%E6%89%8B%E6%9C%BA”）是因为 URL 中只能包含有效的字符，因此对于中文和某些特殊字符进行了百分号编码。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>虽然现代开发中推荐使用<code>URLSearchParams</code>API 来处理查询字符串，了解<code>querystring.encode()</code>的工作方式仍对于理解 Web 开发中的 URL 处理非常有用。正如上面的例子所展示的，它允许我们从一个对象生成一个格式正确的、编码适当的查询字符串，这在处理 Web 请求中是非常常见的需求。</p><h2 id="querystring-escape-str" tabindex="-1"><a class="header-anchor" href="#querystring-escape-str"><span><a href="https://nodejs.org/docs/latest/api/querystring.html#querystringescapestr" target="_blank" rel="noopener noreferrer">querystring.escape(str)</a></span></a></h2><p>在解释<code>querystring.escape(str)</code>之前，让我们先理解一下什么是 Query String（查询字符串）以及为什么需要对其进行转义。</p><h3 id="什么是-query-string" tabindex="-1"><a class="header-anchor" href="#什么是-query-string"><span>什么是 Query String</span></a></h3><p>当你在浏览器中输入网址的时候，有时会看到 URL（统一资源定位符）的末尾附加了一些额外的信息，这部分以&quot;?&quot;开始，后面跟着一系列的参数，每个参数由键和值组成，通常用&quot;&amp;&quot;分隔。这部分就是查询字符串，主要用于传递参数或者信息给服务器。</p><p>例如，在 URL <code>https://example.com/search?query=nodejs&amp;sort=recent</code> 中，查询字符串为 <code>query=nodejs&amp;sort=recent</code>，包含了两个参数：<code>query</code> 的值为 <code>nodejs</code> 和 <code>sort</code> 的值为 <code>recent</code>。</p><h3 id="为什么需要转义-query-string" tabindex="-1"><a class="header-anchor" href="#为什么需要转义-query-string"><span>为什么需要转义 Query String</span></a></h3><p>因为 URL 有一定的格式要求，而查询字符串可能包含特殊字符，如空格、&quot;&amp;&quot;、&quot;=&quot;等，这些特殊字符在 URL 中有特别的含义，如果直接使用它们会破坏 URL 的结构，导致服务器无法正确解析。所以，需要通过转义将这些特殊字符转换成服务器能够理解的形式。</p><h3 id="querystring-escape-str-1" tabindex="-1"><a class="header-anchor" href="#querystring-escape-str-1"><span>querystring.escape(str)</span></a></h3><p>Node.js 中的<code>querystring.escape(str)</code>函数正是用于这种转义的。它将传入的字符串中的特殊字符转换成 URL 编码，使其可以安全地嵌入到 URL 的查询字符串中。</p><p>来看一个简单的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> param</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Hello World! &amp; Goodbye.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> escapedString</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">escape</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">escapedString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: Hello%20World%21%20%26%20Goodbye.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们试图将字符串<code>&quot;Hello World! &amp; Goodbye.&quot;</code>作为查询参数的一部分发送。由于该字符串中包含空格(&quot; &quot;)、感叹号(&quot;!&quot;)和与号(&quot;&amp;&quot;)，直接使用会造成问题。使用<code>querystring.escape</code>处理后，得到的输出是<code>Hello%20World%21%20%26%20Goodbye.</code>，这样就可以安全地将其作为查询字符串的一部分了。</p><h3 id="实际应用示例" tabindex="-1"><a class="header-anchor" href="#实际应用示例"><span>实际应用示例</span></a></h3><p>假设你正在开发一个 Web 应用，用户需要通过表单搜索书籍名称，搜索项可能包含特殊字符。为了安全地将搜索项作为查询参数发送到服务器，你可以使用<code>querystring.escape</code>来转义用户的输入。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">http</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;The Great Gatsby &amp; others&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 假设这是用户输入</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> escapedInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">escape</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userInput</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> queryUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `https://example.com/search?query=</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">escapedInput</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 使用转义后的查询字符串构建请求URL</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">``</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `p&gt;Encoded URL: </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">queryUrl</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `/p&gt;`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，通过将用户的输入转义后嵌入到查询 URL 中，就可以确保特殊字符不会破坏 URL 的结构，同时服务器也能够正确解析查询字符串中的参数。</p><h2 id="querystring-parse-str-sep-eq-options" tabindex="-1"><a class="header-anchor" href="#querystring-parse-str-sep-eq-options"><span><a href="https://nodejs.org/docs/latest/api/querystring.html#querystringparsestr-sep-eq-options" target="_blank" rel="noopener noreferrer">querystring.parse(str[, sep[, eq[, options]]])</a></span></a></h2><p>当然，让我来帮你深入理解 <code>querystring.parse()</code> 方法在 Node.js 中的应用。</p><h3 id="什么是-query-string-1" tabindex="-1"><a class="header-anchor" href="#什么是-query-string-1"><span>什么是 Query String？</span></a></h3><p>首先，我们得知道什么是 Query String。简单来说，Query String 是 URL（统一资源定位符）中的一部分，用于传递额外的参数给网页。它通常出现在 URL 的 &quot;?&quot; 后面，各个参数之间用 &quot;&amp;&quot; 分隔。例如，在 URL <code>http://example.com/page?name=John&amp;age=30</code> 中，<code>name=John&amp;age=30</code> 就是 Query String，表示传递了两个参数：<code>name</code> 和 <code>age</code>。</p><h3 id="node-js-中的-querystring-parse" tabindex="-1"><a class="header-anchor" href="#node-js-中的-querystring-parse"><span>Node.js 中的 <code>querystring.parse()</code></span></a></h3><p>在 Node.js 中，<code>querystring.parse()</code> 函数用于将这样的 Query String 转换成一个易于操作的对象形式。这对于服务器处理客户端发来的查询字符串非常有用。</p><h4 id="参数解释" tabindex="-1"><a class="header-anchor" href="#参数解释"><span>参数解释</span></a></h4><ul><li><strong>str</strong>: 要被解析的 query string。</li><li><strong>sep</strong> (可选): 用于界定不同键值对的分隔符，默认为 <code>&amp;</code>。</li><li><strong>eq</strong> (可选): 用于分隔键和值的字符，默认为 <code>=</code>。</li><li><strong>options</strong> (可选): 一个包含附加配置的对象。比如，可以通过设置 <code>maxKeys</code> 来限制解析出来的键的数量。</li></ul><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h4><p>假设我们有一个 URL 的 Query String: <code>name=John&amp;age=30</code></p><p>如果你想在 Node.js 程序中解析这个字符串，代码大概长这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// Query String</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=John&amp;age=30&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用 querystring.parse() 解析</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> parsed</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">parsed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出会是：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;30&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你会得到一个对象，其中包含两个属性 <code>name</code> 和 <code>age</code>，它们分别对应着 Query String 中的键和值。</p><h4 id="更改分隔符" tabindex="-1"><a class="header-anchor" href="#更改分隔符"><span>更改分隔符</span></a></h4><p>如果你的 Query String 使用不同的分隔符，比如使用 <code>;</code> 而非 <code>&amp;</code>，你也可以这样解析：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 如果 Query String 是 &quot;name=John;age=30&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=John;age=30&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> parsed</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">parsed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将正确解析使用 <code>;</code> 作为分隔符的字符串。</p><h3 id="实际运用例子" tabindex="-1"><a class="header-anchor" href="#实际运用例子"><span>实际运用例子</span></a></h3><ol><li><p><strong>Web 应用程序中获取用户信息</strong>：如果你正在开发一个 Web 应用，并希望根据 URL 中的 Query String 获取用户提供的信息，比如他们的偏好设置或者页面请求的特定部分。</p></li><li><p><strong>API 开发时过滤数据</strong>：开发 RESTful API 时，你可能需要根据 URL 参数过滤返回的数据，例如 <code>/api/users?age=30</code> 可能意味着需要获取所有年龄为 30 的用户。这时 <code>querystring.parse()</code> 就可以派上用场了。</p></li><li><p><strong>日志分析与处理</strong>：处理和分析网络日志时，经常会遇到需要从大量 URL 中提取特定信息的情况，使用 <code>querystring.parse()</code> 可以简化这一过程。</p></li></ol><p>总之，<code>querystring.parse()</code> 是处理 HTTP 查询字符串的强大工具，无论是在开发 Web 应用、API 还是进行数据分析时都非常有用。</p><h2 id="querystring-stringify-obj-sep-eq-options" tabindex="-1"><a class="header-anchor" href="#querystring-stringify-obj-sep-eq-options"><span><a href="https://nodejs.org/docs/latest/api/querystring.html#querystringstringifyobj-sep-eq-options" target="_blank" rel="noopener noreferrer">querystring.stringify(obj[, sep[, eq[, options]]])</a></span></a></h2><p>当然，让我帮你理解 <code>querystring.stringify</code> 方法在 Node.js 中的用途和如何使用它。</p><h3 id="什么是-querystring-stringify" tabindex="-1"><a class="header-anchor" href="#什么是-querystring-stringify"><span>什么是 <code>querystring.stringify</code>?</span></a></h3><p>在 Web 开发中，我们经常需要在 URL 的查询字符串中发送数据。<code>querystring.stringify</code> 方法就是用来将一个对象转换成一个 URL 查询字符串的。这个方法来源于 Node.js 的 <code>querystring</code> 模块。</p><p>简单地说，如果你有一些数据（以键值对的形式组织）需要被附加到 URL 后面以便进行 GET 请求或其他操作，你就可以使用 <code>querystring.stringify</code> 方法来生成合适的查询字符串。</p><h3 id="参数解释-1" tabindex="-1"><a class="header-anchor" href="#参数解释-1"><span>参数解释</span></a></h3><ul><li><code>obj</code>: 需要转换成查询字符串的对象。</li><li><code>sep</code> (可选): 用于分隔不同键值对的字符，默认为 <code>&#39;&amp;&#39;</code>。</li><li><code>eq</code> (可选): 用于连接键和值的字符，默认为 <code>&#39;=&#39;</code>。</li><li><code>options</code> (可选): 一个配置对象，用于进一步定制行为。</li></ul><h3 id="实际运用例子-1" tabindex="-1"><a class="header-anchor" href="#实际运用例子-1"><span>实际运用例子</span></a></h3><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h4><p>假设你想将下面的对象：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> myObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  city</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;New York&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换成一个查询字符串，以便将这些信息作为参数传递给一个网页或 API，你可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> queryString</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">myObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">queryString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: &quot;name=John%20Doe&amp;age=30&amp;city=New%20York&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用自定义分隔符和连接符" tabindex="-1"><a class="header-anchor" href="#使用自定义分隔符和连接符"><span>使用自定义分隔符和连接符</span></a></h4><p>如果你出于某种原因（如 API 要求）需要使用不同的分隔符和连接符，比如分隔符为 <code>;</code> 而连接符为 <code>:</code>，你可以这样做：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> customQueryString</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">myObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">customQueryString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: &quot;name:John%20Doe;age:30;city:New%20York&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-options-参数" tabindex="-1"><a class="header-anchor" href="#使用-options-参数"><span>使用 options 参数</span></a></h4><p>从 Node.js 14.0.0 版本开始，<code>querystring.stringify</code> 方法支持一个新的可选参数 <code>options</code>。其中一个有用的选项是 <code>encodeURIComponent</code>，这允许你指定一个自定义的函数来编码 URI 组件。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> optionsQueryString</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">myObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  encodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unescape</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用 unescape 对字符串进行解码</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">optionsQueryString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 注意输出可能会与期望不同，因为这里选择了一个特定于示例的编码方式。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p><code>querystring.stringify</code> 是 Node.js 中一个非常有用的工具，尤其是在处理 Web 应用和 API 时。它使得从复杂数据到 URL 查询字符串的转换变得简单快捷。通过调整参数和选项，你可以轻松定制生成的查询字符串，以满足各种需求。</p><h2 id="querystring-unescape-str" tabindex="-1"><a class="header-anchor" href="#querystring-unescape-str"><span><a href="https://nodejs.org/docs/latest/api/querystring.html#querystringunescapestr" target="_blank" rel="noopener noreferrer">querystring.unescape(str)</a></span></a></h2><p>理解 <code>querystring.unescape(str)</code> 的概念之前，首先要明白几个关键点：</p><ol><li><p><strong>什么是 Query String？</strong> 简单来说，Query String 是 URL（网址）中用于传递数据的一部分，紧跟在问号<code>?</code>后面，可以包含多个参数，各参数之间通常以<code>&amp;</code>分隔。例如，在 URL <code>https://example.com/search?q=javascript&amp;lang=en</code> 中，<code>q=javascript&amp;lang=en</code> 就是 Query String。</p></li><li><p><strong>为什么要对字符进行转义和反转义？</strong> 在 URI（统一资源标识符，如 URL）中，某些字符有特殊意义，如<code>?</code>、<code>&amp;</code>、空格等。为了安全地传输那些可能被误解析的数据或特殊字符，我们需要将这些字符转换成一个由数字和字母组成的字符串（即<em>转义</em>）。相应地，接收方需要将这些转义后的字符<em>反转义</em>回原始形式以正确读取数据。</p></li><li><p><strong>Node.js 中的 <code>querystring.unescape</code> 函数作用是什么？</strong> 它就是用于执行上述提到的反转义操作，即将转义后的 URL 查询字符串转换回它原本的形式。</p></li></ol><p>现在，让我们通过具体的例子来看 <code>querystring.unescape(str)</code> 是如何工作的：</p><p>假设你有一个经过转义的 Query String，其中包含有特殊字符的数据，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>name=John%20Doe&amp;city=New%20York</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这个例子中，<code>%20</code> 是空格字符的转义形式。如果你想在 Node.js 应用程序中处理这样的 Query String，获取实际的参数值（即将 <code>%20</code> 转换回空格），你可以使用 <code>querystring.unescape()</code> 方法。</p><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤"><span>使用步骤</span></a></h3><ol><li><strong>引入 <code>querystring</code> 模块：</strong> 首先，需要引入 Node.js 中的 <code>querystring</code> 模块，因为 <code>unescape</code> 函数是这个模块提供的。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;querystring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li><strong>使用 <code>querystring.unescape()</code> 函数：</strong> 然后，使用这个函数来反转义字符串。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> qs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;name=John%20Doe&amp;city=New%20York&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> unescapedQS</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> querystring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unescape</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">qs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">unescapedQS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以上代码，输出结果将会是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>name=John Doe&amp;city=New York</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你可以看到，<code>%20</code> 被成功转换回空格，从而使得 Query String 更加易读和处理。</p><h3 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h3><ul><li><strong>API 调用：</strong> 当你开发一个需要与其他服务交互的应用时，往往需要构造请求的 URL，包括 Query String。如果请求的参数中包含特殊字符，那么在发送请求之前需要对这些参数进行转义。而当你在服务端接收到这些请求时，可能又需要将 Query String 反转义，以便正确处理数据。</li><li><strong>日志记录与分析：</strong> 在处理或分析网站的访问日志时，URL 中的 Query String 往往是被转义的。为了更好地理解用户的搜索意图和行为，你可能需要将这部分数据反转义。</li></ul><p>总结来说，<code>querystring.unescape()</code> 方法在处理那些包含特殊字符的 URL 数据时非常有用，它帮助开发者能够正确解析和使用这些数据。</p>',135)],t={},l=(0,a(1305).A)(t,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,n)}]]),h=JSON.parse('{"path":"/document/node-doc/Query%20string.html","title":"Query string","lang":"zh-CN","frontmatter":{"article":false,"description":"Query string Node.js 中的 Query String 模块提供了一套用于解析和格式化 URL 查询字符串的实用工具。简单来说，查询字符串是位于 URL 中\\"?\\"后面的那部分文本，通常用来传递参数或数据给服务器。 假如你有一个网址（URL），比如：http://example.com/over/there?name=ferret，这里...","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/document/node-doc/Query%20string.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"Query string"}],["meta",{"property":"og:description","content":"Query string Node.js 中的 Query String 模块提供了一套用于解析和格式化 URL 查询字符串的实用工具。简单来说，查询字符串是位于 URL 中\\"?\\"后面的那部分文本，通常用来传递参数或数据给服务器。 假如你有一个网址（URL），比如：http://example.com/over/there?name=ferret，这里..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:46:17.000Z"}],["meta",{"property":"article:author","content":"hanekawa-shiki"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:46:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Query string\\",\\"description\\":\\"Query string Node.js 中的 Query String 模块提供了一套用于解析和格式化 URL 查询字符串的实用工具。简单来说，查询字符串是位于 URL 中\\\\\\"?\\\\\\"后面的那部分文本，通常用来传递参数或数据给服务器。 假如你有一个网址（URL），比如：http://example.com/over/there?name=ferret，这里...\\"}"]]},"headers":[{"level":3,"title":"使用 Node.js 的 Query String 模块","slug":"使用-node-js-的-query-string-模块","link":"#使用-node-js-的-query-string-模块","children":[]},{"level":3,"title":"实际运用示例","slug":"实际运用示例","link":"#实际运用示例","children":[]},{"level":2,"title":"querystring.decode()","slug":"querystring-decode","link":"#querystring-decode","children":[{"level":3,"title":"如何工作","slug":"如何工作","link":"#如何工作","children":[]},{"level":3,"title":"格式","slug":"格式","link":"#格式","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]},{"level":2,"title":"querystring.encode()","slug":"querystring-encode","link":"#querystring-encode","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":3,"title":"使用 querystring.encode()","slug":"使用-querystring-encode","link":"#使用-querystring-encode","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"querystring.escape(str)","slug":"querystring-escape-str","link":"#querystring-escape-str","children":[{"level":3,"title":"什么是 Query String","slug":"什么是-query-string","link":"#什么是-query-string","children":[]},{"level":3,"title":"为什么需要转义 Query String","slug":"为什么需要转义-query-string","link":"#为什么需要转义-query-string","children":[]},{"level":3,"title":"querystring.escape(str)","slug":"querystring-escape-str-1","link":"#querystring-escape-str-1","children":[]},{"level":3,"title":"实际应用示例","slug":"实际应用示例","link":"#实际应用示例","children":[]}]},{"level":2,"title":"querystring.parse(str[, sep[, eq[, options]]])","slug":"querystring-parse-str-sep-eq-options","link":"#querystring-parse-str-sep-eq-options","children":[{"level":3,"title":"什么是 Query String？","slug":"什么是-query-string-1","link":"#什么是-query-string-1","children":[]},{"level":3,"title":"Node.js 中的 querystring.parse()","slug":"node-js-中的-querystring-parse","link":"#node-js-中的-querystring-parse","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子","link":"#实际运用例子","children":[]}]},{"level":2,"title":"querystring.stringify(obj[, sep[, eq[, options]]])","slug":"querystring-stringify-obj-sep-eq-options","link":"#querystring-stringify-obj-sep-eq-options","children":[{"level":3,"title":"什么是 querystring.stringify?","slug":"什么是-querystring-stringify","link":"#什么是-querystring-stringify","children":[]},{"level":3,"title":"参数解释","slug":"参数解释-1","link":"#参数解释-1","children":[]},{"level":3,"title":"实际运用例子","slug":"实际运用例子-1","link":"#实际运用例子-1","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"querystring.unescape(str)","slug":"querystring-unescape-str","link":"#querystring-unescape-str","children":[{"level":3,"title":"使用步骤","slug":"使用步骤","link":"#使用步骤","children":[]},{"level":3,"title":"实际应用场景","slug":"实际应用场景","link":"#实际应用场景","children":[]}]}],"git":{"createdTime":1718963177000,"updatedTime":1718963177000,"contributors":[{"name":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":1}]},"readingTime":{"minutes":15.1,"words":4529},"filePathRelative":"document/node-doc/Query string.md","localizedDate":"2024年6月21日","excerpt":"\\n<p>Node.js 中的 Query String 模块提供了一套用于解析和格式化 URL 查询字符串的实用工具。简单来说，查询字符串是位于 URL 中\\"?\\"后面的那部分文本，通常用来传递参数或数据给服务器。</p>\\n<p>假如你有一个网址（URL），比如：<code>http://example.com/over/there?name=ferret</code>，这里 <code>?name=ferret</code> 就是查询字符串，表示一个键值对，其中 <code>name</code> 是键，<code>ferret</code> 是值。</p>\\n<h3>使用 Node.js 的 Query String 模块</h3>","autoDesc":true}')},1305:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}}}]);