const n=JSON.parse('{"key":"v-29ada780","path":"/docker/commomCmds.html","title":"","lang":"zh-CN","frontmatter":{"article":false,"description":"# 当前 shell 下 attach 连接指定运行镜像 attach # 通过 Dockerfile 定制镜像 build # 提交当前容器为新的镜像 commit # 从容器中拷贝指定文件或者目录到宿主机中 cp # 创建一个新的容器，同 run，但不启动容器 create # 查看 docker 容器变化 diff # 从 docker 服务获取容器实时事件 events # 在已存在的容器上运行命令 exec # 导出容器的内容流作为一个 tar 归档文件[对应 import ] export # 展示一个镜像形成历史 history # 列出系统当前镜像 images # 从tar包中的内容创建一个新的文件系统映像[对应export] import # 显示系统相关信息 info # 查看容器详细信息 inspect # kill 指定 docker 容器 kill # 从一个 tar 包中加载一个镜像[对应 save] load # 注册或者登陆一个 docker 源服务器 login # 从当前 Docker registry 退出 logout # 输出当前容器日志信息 logs # 查看映射端口对应的容器内部源端口 port # 暂停容器 pause # 列出容器列表 ps # 从docker镜像源服务器拉取指定镜像或者库镜像 pull # 推送指定镜像或者库镜像至docker源服务器 push # 重启运行的容器 restart # 移除一个或者多个容器 rm # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] rmi # 创建一个新的容器并运行一个命令 run # 保存一个镜像为一个 tar 包[对应 load] save # 在 docker hub 中搜索镜像 search # 启动容器 start # 停止容器 stop # 给源中镜像打标签 tag # 查看容器中运行的进程信息 top # 取消暂停容器 unpause # 查看 docker 版本号 version # 截取容器停止时的退出状态值 wait","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/docker/commomCmds.html"}],["meta",{"property":"og:site_name","content":"Kamishima-kaede"}],["meta",{"property":"og:description","content":"# 当前 shell 下 attach 连接指定运行镜像 attach # 通过 Dockerfile 定制镜像 build # 提交当前容器为新的镜像 commit # 从容器中拷贝指定文件或者目录到宿主机中 cp # 创建一个新的容器，同 run，但不启动容器 create # 查看 docker 容器变化 diff # 从 docker 服务获取容器实时事件 events # 在已存在的容器上运行命令 exec # 导出容器的内容流作为一个 tar 归档文件[对应 import ] export # 展示一个镜像形成历史 history # 列出系统当前镜像 images # 从tar包中的内容创建一个新的文件系统映像[对应export] import # 显示系统相关信息 info # 查看容器详细信息 inspect # kill 指定 docker 容器 kill # 从一个 tar 包中加载一个镜像[对应 save] load # 注册或者登陆一个 docker 源服务器 login # 从当前 Docker registry 退出 logout # 输出当前容器日志信息 logs # 查看映射端口对应的容器内部源端口 port # 暂停容器 pause # 列出容器列表 ps # 从docker镜像源服务器拉取指定镜像或者库镜像 pull # 推送指定镜像或者库镜像至docker源服务器 push # 重启运行的容器 restart # 移除一个或者多个容器 rm # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] rmi # 创建一个新的容器并运行一个命令 run # 保存一个镜像为一个 tar 包[对应 load] save # 在 docker hub 中搜索镜像 search # 启动容器 start # 停止容器 stop # 给源中镜像打标签 tag # 查看容器中运行的进程信息 top # 取消暂停容器 unpause # 查看 docker 版本号 version # 截取容器停止时的退出状态值 wait"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://hanekawa.top/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-21T10:01:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"property":"article:modified_time","content":"2023-03-21T10:01:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"\\",\\"description\\":\\"# 当前 shell 下 attach 连接指定运行镜像 attach # 通过 Dockerfile 定制镜像 build # 提交当前容器为新的镜像 commit # 从容器中拷贝指定文件或者目录到宿主机中 cp # 创建一个新的容器，同 run，但不启动容器 create # 查看 docker 容器变化 diff # 从 docker 服务获取容器实时事件 events # 在已存在的容器上运行命令 exec # 导出容器的内容流作为一个 tar 归档文件[对应 import ] export # 展示一个镜像形成历史 history # 列出系统当前镜像 images # 从tar包中的内容创建一个新的文件系统映像[对应export] import # 显示系统相关信息 info # 查看容器详细信息 inspect # kill 指定 docker 容器 kill # 从一个 tar 包中加载一个镜像[对应 save] load # 注册或者登陆一个 docker 源服务器 login # 从当前 Docker registry 退出 logout # 输出当前容器日志信息 logs # 查看映射端口对应的容器内部源端口 port # 暂停容器 pause # 列出容器列表 ps # 从docker镜像源服务器拉取指定镜像或者库镜像 pull # 推送指定镜像或者库镜像至docker源服务器 push # 重启运行的容器 restart # 移除一个或者多个容器 rm # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] rmi # 创建一个新的容器并运行一个命令 run # 保存一个镜像为一个 tar 包[对应 load] save # 在 docker hub 中搜索镜像 search # 启动容器 start # 停止容器 stop # 给源中镜像打标签 tag # 查看容器中运行的进程信息 top # 取消暂停容器 unpause # 查看 docker 版本号 version # 截取容器停止时的退出状态值 wait\\"}"]]},"headers":[],"git":{"createdTime":1679305911000,"updatedTime":1679392917000,"contributors":[{"name":"shiki ryougi","email":"shikiryougi@shikideMacBook.local","commits":2}]},"readingTime":{"minutes":1.6,"words":479},"filePathRelative":"docker/commomCmds.md","localizedDate":"2023年3月20日","excerpt":"<p></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>\\n\\n\\n\\n\\n<span class=\\"token comment\\"># 当前 shell 下 attach 连接指定运行镜像</span>\\nattach\\n<span class=\\"token comment\\"># 通过 Dockerfile 定制镜像 </span>\\nbuild\\n<span class=\\"token comment\\"># 提交当前容器为新的镜像 </span>\\ncommit\\n<span class=\\"token comment\\"># 从容器中拷贝指定文件或者目录到宿主机中</span>\\n<span class=\\"token function\\">cp</span>\\n<span class=\\"token comment\\"># 创建一个新的容器，同 run，但不启动容器 </span>\\ncreate\\n<span class=\\"token comment\\"># 查看 docker 容器变化           </span>\\n<span class=\\"token function\\">diff</span>\\n<span class=\\"token comment\\"># 从 docker 服务获取容器实时事件</span>\\nevents\\n<span class=\\"token comment\\"># 在已存在的容器上运行命令</span>\\n<span class=\\"token builtin class-name\\">exec</span>\\n<span class=\\"token comment\\"># 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span>\\n<span class=\\"token builtin class-name\\">export</span>\\n<span class=\\"token comment\\"># 展示一个镜像形成历史</span>\\n<span class=\\"token function\\">history</span>\\n<span class=\\"token comment\\"># 列出系统当前镜像</span>\\nimages\\n<span class=\\"token comment\\"># 从tar包中的内容创建一个新的文件系统映像[对应export]</span>\\n<span class=\\"token function\\">import</span>\\n<span class=\\"token comment\\"># 显示系统相关信息</span>\\ninfo\\n<span class=\\"token comment\\"># 查看容器详细信息</span>\\ninspect\\n<span class=\\"token comment\\"># kill 指定 docker 容器</span>\\n<span class=\\"token function\\">kill</span>\\n<span class=\\"token comment\\"># 从一个 tar 包中加载一个镜像[对应 save]</span>\\nload\\n<span class=\\"token comment\\"># 注册或者登陆一个 docker 源服务器</span>\\nlogin\\n<span class=\\"token comment\\"># 从当前 Docker registry 退出</span>\\n<span class=\\"token builtin class-name\\">logout</span>\\n<span class=\\"token comment\\"># 输出当前容器日志信息</span>\\nlogs\\n<span class=\\"token comment\\"># 查看映射端口对应的容器内部源端口</span>\\nport\\n<span class=\\"token comment\\"># 暂停容器</span>\\npause\\n<span class=\\"token comment\\"># 列出容器列表</span>\\n<span class=\\"token function\\">ps</span>\\n<span class=\\"token comment\\"># 从docker镜像源服务器拉取指定镜像或者库镜像</span>\\npull\\n<span class=\\"token comment\\"># 推送指定镜像或者库镜像至docker源服务器</span>\\npush\\n<span class=\\"token comment\\"># 重启运行的容器</span>\\nrestart\\n<span class=\\"token comment\\"># 移除一个或者多个容器</span>\\n<span class=\\"token function\\">rm</span>\\n<span class=\\"token comment\\"># 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span>\\nrmi\\n<span class=\\"token comment\\"># 创建一个新的容器并运行一个命令</span>\\nrun\\n<span class=\\"token comment\\"># 保存一个镜像为一个 tar 包[对应 load]</span>\\nsave\\n<span class=\\"token comment\\"># 在 docker hub 中搜索镜像</span>\\nsearch\\n<span class=\\"token comment\\"># 启动容器</span>\\nstart\\n<span class=\\"token comment\\"># 停止容器</span>\\nstop\\n<span class=\\"token comment\\"># 给源中镜像打标签</span>\\ntag\\n<span class=\\"token comment\\"># 查看容器中运行的进程信息</span>\\n<span class=\\"token function\\">top</span>\\n<span class=\\"token comment\\"># 取消暂停容器</span>\\nunpause\\n<span class=\\"token comment\\"># 查看 docker 版本号</span>\\nversion\\n<span class=\\"token comment\\"># 截取容器停止时的退出状态值</span>\\n<span class=\\"token function\\">wait</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
