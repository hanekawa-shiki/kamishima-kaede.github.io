const e=JSON.parse('{"key":"v-53374772","path":"/linux/package.html","title":"","lang":"zh-CN","frontmatter":{"article":false,"description":"应用和包管理 涉及复杂的实现逻辑和复杂多样的需求，一次性实现所有功能几乎是不可能的。为了解决这个问题，高级编程语言都提供一套模块化组织代码的方法，以便将复杂问题拆解成 多个相对简单的子问题，分别实现对应功能，再组合到一起。 库(library)：实现了某个功能，但又不直接体现在最终实现的功能里的代码模块。 档案文件(archive file)：将一个库或者应用包含的所有源代码文件以及元数据文件(元数据指描述对象一般特征的数据，例如名称、版本、作者、依赖等信息，保存这些数据的文件 就叫元数据文件)压缩放在一个文件中，这个文件叫档案文件。","head":[["meta",{"property":"og:url","content":"https://hanekawa.top/linux/package.html"}],["meta",{"property":"og:site_name","content":"Kamishima-kaede"}],["meta",{"property":"og:description","content":"应用和包管理 涉及复杂的实现逻辑和复杂多样的需求，一次性实现所有功能几乎是不可能的。为了解决这个问题，高级编程语言都提供一套模块化组织代码的方法，以便将复杂问题拆解成 多个相对简单的子问题，分别实现对应功能，再组合到一起。 库(library)：实现了某个功能，但又不直接体现在最终实现的功能里的代码模块。 档案文件(archive file)：将一个库或者应用包含的所有源代码文件以及元数据文件(元数据指描述对象一般特征的数据，例如名称、版本、作者、依赖等信息，保存这些数据的文件 就叫元数据文件)压缩放在一个文件中，这个文件叫档案文件。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-12T14:30:29.000Z"}],["meta",{"property":"article:author","content":"kamishima-kaede"}],["meta",{"property":"article:modified_time","content":"2023-04-12T14:30:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"\\",\\"description\\":\\"应用和包管理 涉及复杂的实现逻辑和复杂多样的需求，一次性实现所有功能几乎是不可能的。为了解决这个问题，高级编程语言都提供一套模块化组织代码的方法，以便将复杂问题拆解成 多个相对简单的子问题，分别实现对应功能，再组合到一起。 库(library)：实现了某个功能，但又不直接体现在最终实现的功能里的代码模块。 档案文件(archive file)：将一个库或者应用包含的所有源代码文件以及元数据文件(元数据指描述对象一般特征的数据，例如名称、版本、作者、依赖等信息，保存这些数据的文件 就叫元数据文件)压缩放在一个文件中，这个文件叫档案文件。\\"}"]]},"headers":[{"level":2,"title":"应用和包管理","slug":"应用和包管理","link":"#应用和包管理","children":[{"level":3,"title":"使用apt管理应用","slug":"使用apt管理应用","link":"#使用apt管理应用","children":[]},{"level":3,"title":"使用dpkg管理应用","slug":"使用dpkg管理应用","link":"#使用dpkg管理应用","children":[]}]},{"level":2,"title":"跨平台包管理器","slug":"跨平台包管理器","link":"#跨平台包管理器","children":[]}],"git":{"createdTime":1679046743000,"updatedTime":1681309829000,"contributors":[{"name":"shiki ryougi","email":"shikiryougi@shikideMacBook.local","commits":3}]},"readingTime":{"minutes":3.91,"words":1174},"filePathRelative":"linux/package.md","localizedDate":"2023年3月17日","excerpt":"<h2> 应用和包管理</h2>\\n<p>涉及复杂的实现逻辑和复杂多样的需求，一次性实现所有功能几乎是不可能的。为了解决这个问题，高级编程语言都提供一套模块化组织代码的方法，以便将复杂问题拆解成 多个相对简单的子问题，分别实现对应功能，再组合到一起。</p>\\n<p>库(library)：实现了某个功能，但又不直接体现在最终实现的功能里的代码模块。</p>\\n<p>档案文件(archive file)：将一个库或者应用包含的所有源代码文件以及元数据文件(元数据指描述对象一般特征的数据，例如名称、版本、作者、依赖等信息，保存这些数据的文件 就叫元数据文件)压缩放在一个文件中，这个文件叫档案文件。</p>","autoDesc":true}');export{e as data};
